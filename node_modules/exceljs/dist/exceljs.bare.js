(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.ExcelJS = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var fs = require('fs');

var fastCsv = require('fast-csv');

var customParseFormat = require('dayjs/plugin/customParseFormat');

var utc = require('dayjs/plugin/utc');

var dayjs = require('dayjs').extend(customParseFormat).extend(utc);

var StreamBuf = require('../utils/stream-buf');

var _require = require('../utils/utils'),
    exists = _require.fs.exists;
/* eslint-disable quote-props */


var SpecialValues = {
  true: true,
  false: false,
  '#N/A': {
    error: '#N/A'
  },
  '#REF!': {
    error: '#REF!'
  },
  '#NAME?': {
    error: '#NAME?'
  },
  '#DIV/0!': {
    error: '#DIV/0!'
  },
  '#NULL!': {
    error: '#NULL!'
  },
  '#VALUE!': {
    error: '#VALUE!'
  },
  '#NUM!': {
    error: '#NUM!'
  }
};
/* eslint-ensable quote-props */

var CSV = /*#__PURE__*/function () {
  function CSV(workbook) {
    _classCallCheck(this, CSV);

    this.workbook = workbook;
    this.worksheet = null;
  }

  _createClass(CSV, [{
    key: "readFile",
    value: function () {
      var _readFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(filename, options) {
        var stream, worksheet;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = options || {};
                _context.next = 3;
                return exists(filename);

              case 3:
                if (_context.sent) {
                  _context.next = 5;
                  break;
                }

                throw new Error("File not found: ".concat(filename));

              case 5:
                stream = fs.createReadStream(filename);
                _context.next = 8;
                return this.read(stream, options);

              case 8:
                worksheet = _context.sent;
                stream.close();
                return _context.abrupt("return", worksheet);

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function readFile(_x, _x2) {
        return _readFile.apply(this, arguments);
      }

      return readFile;
    }()
  }, {
    key: "read",
    value: function read(stream, options) {
      var _this = this;

      options = options || {};
      return new Promise(function (resolve, reject) {
        var worksheet = _this.workbook.addWorksheet(options.sheetName);

        var dateFormats = options.dateFormats || ['YYYY-MM-DD[T]HH:mm:ssZ', 'YYYY-MM-DD[T]HH:mm:ss', 'MM-DD-YYYY', 'YYYY-MM-DD'];

        var map = options.map || function (datum) {
          if (datum === '') {
            return null;
          }

          var datumNumber = Number(datum);

          if (!Number.isNaN(datumNumber) && datumNumber !== Infinity) {
            return datumNumber;
          }

          var dt = dateFormats.reduce(function (matchingDate, currentDateFormat) {
            if (matchingDate) {
              return matchingDate;
            }

            var dayjsObj = dayjs(datum, currentDateFormat, true);

            if (dayjsObj.isValid()) {
              return dayjsObj;
            }

            return null;
          }, null);

          if (dt) {
            return new Date(dt.valueOf());
          }

          var special = SpecialValues[datum];

          if (special !== undefined) {
            return special;
          }

          return datum;
        };

        var csvStream = fastCsv.parse(options.parserOptions).on('data', function (data) {
          worksheet.addRow(data.map(map));
        }).on('end', function () {
          csvStream.emit('worksheet', worksheet);
        });
        csvStream.on('worksheet', resolve).on('error', reject);
        stream.pipe(csvStream);
      });
    }
    /**
     * @deprecated since version 4.0. You should use `CSV#read` instead. Please follow upgrade instruction: https://github.com/exceljs/exceljs/blob/master/UPGRADE-4.0.md
     */

  }, {
    key: "createInputStream",
    value: function createInputStream() {
      throw new Error('`CSV#createInputStream` is deprecated. You should use `CSV#read` instead. This method will be removed in version 5.0. Please follow upgrade instruction: https://github.com/exceljs/exceljs/blob/master/UPGRADE-4.0.md');
    }
  }, {
    key: "write",
    value: function write(stream, options) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        options = options || {}; // const encoding = options.encoding || 'utf8';
        // const separator = options.separator || ',';
        // const quoteChar = options.quoteChar || '\'';

        var worksheet = _this2.workbook.getWorksheet(options.sheetName || options.sheetId);

        var csvStream = fastCsv.format(options.formatterOptions);
        stream.on('finish', function () {
          resolve();
        });
        csvStream.on('error', reject);
        csvStream.pipe(stream);
        var _options = options,
            dateFormat = _options.dateFormat,
            dateUTC = _options.dateUTC;

        var map = options.map || function (value) {
          if (value) {
            if (value.text || value.hyperlink) {
              return value.hyperlink || value.text || '';
            }

            if (value.formula || value.result) {
              return value.result || '';
            }

            if (value instanceof Date) {
              if (dateFormat) {
                return dateUTC ? dayjs.utc(value).format(dateFormat) : dayjs(value).format(dateFormat);
              }

              return dateUTC ? dayjs.utc(value).format() : dayjs(value).format();
            }

            if (value.error) {
              return value.error;
            }

            if (_typeof(value) === 'object') {
              return JSON.stringify(value);
            }
          }

          return value;
        };

        var includeEmptyRows = options.includeEmptyRows === undefined || options.includeEmptyRows;
        var lastRow = 1;

        if (worksheet) {
          worksheet.eachRow(function (row, rowNumber) {
            if (includeEmptyRows) {
              while (lastRow++ < rowNumber - 1) {
                csvStream.write([]);
              }
            }

            var values = row.values;
            values.shift();
            csvStream.write(values.map(map));
            lastRow = rowNumber;
          });
        }

        csvStream.end();
      });
    }
  }, {
    key: "writeFile",
    value: function writeFile(filename, options) {
      options = options || {};
      var streamOptions = {
        encoding: options.encoding || 'utf8'
      };
      var stream = fs.createWriteStream(filename, streamOptions);
      return this.write(stream, options);
    }
  }, {
    key: "writeBuffer",
    value: function () {
      var _writeBuffer = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(options) {
        var stream;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                stream = new StreamBuf();
                _context2.next = 3;
                return this.write(stream, options);

              case 3:
                return _context2.abrupt("return", stream.read());

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function writeBuffer(_x3) {
        return _writeBuffer.apply(this, arguments);
      }

      return writeBuffer;
    }()
  }]);

  return CSV;
}();

module.exports = CSV;

},{"../utils/stream-buf":23,"../utils/utils":26,"dayjs":227,"dayjs/plugin/customParseFormat":228,"dayjs/plugin/utc":229,"fast-csv":260,"fs":215}],2:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var colCache = require('../utils/col-cache');

var Anchor = /*#__PURE__*/function () {
  function Anchor(worksheet, address) {
    var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    _classCallCheck(this, Anchor);

    if (!address) {
      this.nativeCol = 0;
      this.nativeColOff = 0;
      this.nativeRow = 0;
      this.nativeRowOff = 0;
    } else if (typeof address === 'string') {
      var decoded = colCache.decodeAddress(address);
      this.nativeCol = decoded.col + offset;
      this.nativeColOff = 0;
      this.nativeRow = decoded.row + offset;
      this.nativeRowOff = 0;
    } else if (address.nativeCol !== undefined) {
      this.nativeCol = address.nativeCol || 0;
      this.nativeColOff = address.nativeColOff || 0;
      this.nativeRow = address.nativeRow || 0;
      this.nativeRowOff = address.nativeRowOff || 0;
    } else if (address.col !== undefined) {
      this.col = address.col + offset;
      this.row = address.row + offset;
    } else {
      this.nativeCol = 0;
      this.nativeColOff = 0;
      this.nativeRow = 0;
      this.nativeRowOff = 0;
    }

    this.worksheet = worksheet;
  }

  _createClass(Anchor, [{
    key: "col",
    get: function get() {
      return this.nativeCol + Math.min(this.colWidth - 1, this.nativeColOff) / this.colWidth;
    },
    set: function set(v) {
      this.nativeCol = Math.floor(v);
      this.nativeColOff = Math.floor((v - this.nativeCol) * this.colWidth);
    }
  }, {
    key: "row",
    get: function get() {
      return this.nativeRow + Math.min(this.rowHeight - 1, this.nativeRowOff) / this.rowHeight;
    },
    set: function set(v) {
      this.nativeRow = Math.floor(v);
      this.nativeRowOff = Math.floor((v - this.nativeRow) * this.rowHeight);
    }
  }, {
    key: "colWidth",
    get: function get() {
      return this.worksheet && this.worksheet.getColumn(this.nativeCol + 1) && this.worksheet.getColumn(this.nativeCol + 1).isCustomWidth ? Math.floor(this.worksheet.getColumn(this.nativeCol + 1).width * 10000) : 640000;
    }
  }, {
    key: "rowHeight",
    get: function get() {
      return this.worksheet && this.worksheet.getRow(this.nativeRow + 1) && this.worksheet.getRow(this.nativeRow + 1).height ? Math.floor(this.worksheet.getRow(this.nativeRow + 1).height * 10000) : 180000;
    }
  }, {
    key: "model",
    get: function get() {
      return {
        nativeCol: this.nativeCol,
        nativeColOff: this.nativeColOff,
        nativeRow: this.nativeRow,
        nativeRowOff: this.nativeRowOff
      };
    },
    set: function set(value) {
      this.nativeCol = value.nativeCol;
      this.nativeColOff = value.nativeColOff;
      this.nativeRow = value.nativeRow;
      this.nativeRowOff = value.nativeRowOff;
    }
  }], [{
    key: "asInstance",
    value: function asInstance(model) {
      return model instanceof Anchor || model == null ? model : new Anchor(model);
    }
  }]);

  return Anchor;
}();

module.exports = Anchor;

},{"../utils/col-cache":19}],3:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/* eslint-disable max-classes-per-file */
var colCache = require('../utils/col-cache');

var _ = require('../utils/under-dash');

var Enums = require('./enums');

var _require = require('../utils/shared-formula'),
    slideFormula = _require.slideFormula;

var Note = require('./note'); // Cell requirements
//  Operate inside a worksheet
//  Store and retrieve a value with a range of types: text, number, date, hyperlink, reference, formula, etc.
//  Manage/use and manipulate cell format either as local to cell or inherited from column or row.


var Cell = /*#__PURE__*/function () {
  function Cell(row, column, address) {
    _classCallCheck(this, Cell);

    if (!row || !column) {
      throw new Error('A Cell needs a Row');
    }

    this._row = row;
    this._column = column;
    colCache.validateAddress(address);
    this._address = address; // TODO: lazy evaluation of this._value

    this._value = Value.create(Cell.Types.Null, this);
    this.style = this._mergeStyle(row.style, column.style, {});
    this._mergeCount = 0;
  }

  _createClass(Cell, [{
    key: "destroy",
    // help GC by removing cyclic (and other) references
    value: function destroy() {
      delete this.style;
      delete this._value;
      delete this._row;
      delete this._column;
      delete this._address;
    } // =========================================================================
    // Styles stuff

  }, {
    key: "_mergeStyle",
    value: function _mergeStyle(rowStyle, colStyle, style) {
      var numFmt = rowStyle && rowStyle.numFmt || colStyle && colStyle.numFmt;
      if (numFmt) style.numFmt = numFmt;
      var font = rowStyle && rowStyle.font || colStyle && colStyle.font;
      if (font) style.font = font;
      var alignment = rowStyle && rowStyle.alignment || colStyle && colStyle.alignment;
      if (alignment) style.alignment = alignment;
      var border = rowStyle && rowStyle.border || colStyle && colStyle.border;
      if (border) style.border = border;
      var fill = rowStyle && rowStyle.fill || colStyle && colStyle.fill;
      if (fill) style.fill = fill;
      var protection = rowStyle && rowStyle.protection || colStyle && colStyle.protection;
      if (protection) style.protection = protection;
      return style;
    } // =========================================================================
    // return the address for this cell

  }, {
    key: "toCsvString",
    value: function toCsvString() {
      return this._value.toCsvString();
    } // =========================================================================
    // Merge stuff

  }, {
    key: "addMergeRef",
    value: function addMergeRef() {
      this._mergeCount++;
    }
  }, {
    key: "releaseMergeRef",
    value: function releaseMergeRef() {
      this._mergeCount--;
    }
  }, {
    key: "merge",
    value: function merge(master, ignoreStyle) {
      this._value.release();

      this._value = Value.create(Cell.Types.Merge, this, master);

      if (!ignoreStyle) {
        this.style = master.style;
      }
    }
  }, {
    key: "unmerge",
    value: function unmerge() {
      if (this.type === Cell.Types.Merge) {
        this._value.release();

        this._value = Value.create(Cell.Types.Null, this);
        this.style = this._mergeStyle(this._row.style, this._column.style, {});
      }
    }
  }, {
    key: "isMergedTo",
    value: function isMergedTo(master) {
      if (this._value.type !== Cell.Types.Merge) return false;
      return this._value.isMergedTo(master);
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.text;
    }
  }, {
    key: "_upgradeToHyperlink",
    value: function _upgradeToHyperlink(hyperlink) {
      // if this cell is a string, turn it into a Hyperlink
      if (this.type === Cell.Types.String) {
        this._value = Value.create(Cell.Types.Hyperlink, this, {
          text: this._value.value,
          hyperlink: hyperlink
        });
      }
    } // =========================================================================
    // Formula stuff

  }, {
    key: "addName",
    value: function addName(name) {
      this.workbook.definedNames.addEx(this.fullAddress, name);
    }
  }, {
    key: "removeName",
    value: function removeName(name) {
      this.workbook.definedNames.removeEx(this.fullAddress, name);
    }
  }, {
    key: "removeAllNames",
    value: function removeAllNames() {
      this.workbook.definedNames.removeAllNames(this.fullAddress);
    } // =========================================================================
    // Data Validation stuff

  }, {
    key: "worksheet",
    get: function get() {
      return this._row.worksheet;
    }
  }, {
    key: "workbook",
    get: function get() {
      return this._row.worksheet.workbook;
    }
  }, {
    key: "numFmt",
    get: function get() {
      return this.style.numFmt;
    },
    set: function set(value) {
      this.style.numFmt = value;
    }
  }, {
    key: "font",
    get: function get() {
      return this.style.font;
    },
    set: function set(value) {
      this.style.font = value;
    }
  }, {
    key: "alignment",
    get: function get() {
      return this.style.alignment;
    },
    set: function set(value) {
      this.style.alignment = value;
    }
  }, {
    key: "border",
    get: function get() {
      return this.style.border;
    },
    set: function set(value) {
      this.style.border = value;
    }
  }, {
    key: "fill",
    get: function get() {
      return this.style.fill;
    },
    set: function set(value) {
      this.style.fill = value;
    }
  }, {
    key: "protection",
    get: function get() {
      return this.style.protection;
    },
    set: function set(value) {
      this.style.protection = value;
    }
  }, {
    key: "address",
    get: function get() {
      return this._address;
    }
  }, {
    key: "row",
    get: function get() {
      return this._row.number;
    }
  }, {
    key: "col",
    get: function get() {
      return this._column.number;
    }
  }, {
    key: "$col$row",
    get: function get() {
      return "$".concat(this._column.letter, "$").concat(this.row);
    } // =========================================================================
    // Value stuff

  }, {
    key: "type",
    get: function get() {
      return this._value.type;
    }
  }, {
    key: "effectiveType",
    get: function get() {
      return this._value.effectiveType;
    }
  }, {
    key: "isMerged",
    get: function get() {
      return this._mergeCount > 0 || this.type === Cell.Types.Merge;
    }
  }, {
    key: "master",
    get: function get() {
      if (this.type === Cell.Types.Merge) {
        return this._value.master;
      }

      return this; // an unmerged cell is its own master
    }
  }, {
    key: "isHyperlink",
    get: function get() {
      return this._value.type === Cell.Types.Hyperlink;
    }
  }, {
    key: "hyperlink",
    get: function get() {
      return this._value.hyperlink;
    } // return the value

  }, {
    key: "value",
    get: function get() {
      return this._value.value;
    } // set the value - can be number, string or raw
    ,
    set: function set(v) {
      // special case - merge cells set their master's value
      if (this.type === Cell.Types.Merge) {
        this._value.master.value = v;
        return;
      }

      this._value.release(); // assign value


      this._value = Value.create(Value.getType(v), this, v);
    }
  }, {
    key: "note",
    get: function get() {
      return this._comment && this._comment.note;
    },
    set: function set(note) {
      this._comment = new Note(note);
    }
  }, {
    key: "text",
    get: function get() {
      return this._value.toString();
    }
  }, {
    key: "html",
    get: function get() {
      return _.escapeHtml(this.text);
    }
  }, {
    key: "formula",
    get: function get() {
      return this._value.formula;
    }
  }, {
    key: "result",
    get: function get() {
      return this._value.result;
    }
  }, {
    key: "formulaType",
    get: function get() {
      return this._value.formulaType;
    } // =========================================================================
    // Name stuff

  }, {
    key: "fullAddress",
    get: function get() {
      var worksheet = this._row.worksheet;
      return {
        sheetName: worksheet.name,
        address: this.address,
        row: this.row,
        col: this.col
      };
    }
  }, {
    key: "name",
    get: function get() {
      return this.names[0];
    },
    set: function set(value) {
      this.names = [value];
    }
  }, {
    key: "names",
    get: function get() {
      return this.workbook.definedNames.getNamesEx(this.fullAddress);
    },
    set: function set(value) {
      var _this = this;

      var definedNames = this.workbook.definedNames;
      definedNames.removeAllNames(this.fullAddress);
      value.forEach(function (name) {
        definedNames.addEx(_this.fullAddress, name);
      });
    }
  }, {
    key: "_dataValidations",
    get: function get() {
      return this.worksheet.dataValidations;
    }
  }, {
    key: "dataValidation",
    get: function get() {
      return this._dataValidations.find(this.address);
    },
    set: function set(value) {
      this._dataValidations.add(this.address, value);
    } // =========================================================================
    // Model stuff

  }, {
    key: "model",
    get: function get() {
      var model = this._value.model;
      model.style = this.style;

      if (this._comment) {
        model.comment = this._comment.model;
      }

      return model;
    },
    set: function set(value) {
      this._value.release();

      this._value = Value.create(value.type, this);
      this._value.model = value;

      if (value.comment) {
        switch (value.comment.type) {
          case 'note':
            this._comment = Note.fromModel(value.comment);
            break;
        }
      }

      if (value.style) {
        this.style = value.style;
      } else {
        this.style = {};
      }
    }
  }]);

  return Cell;
}();

Cell.Types = Enums.ValueType; // =============================================================================
// Internal Value Types

var NullValue = /*#__PURE__*/function () {
  function NullValue(cell) {
    _classCallCheck(this, NullValue);

    this.model = {
      address: cell.address,
      type: Cell.Types.Null
    };
  }

  _createClass(NullValue, [{
    key: "toCsvString",
    value: function toCsvString() {
      return '';
    }
  }, {
    key: "release",
    value: function release() {}
  }, {
    key: "toString",
    value: function toString() {
      return '';
    }
  }, {
    key: "value",
    get: function get() {
      return null;
    },
    set: function set(value) {// nothing to do
    }
  }, {
    key: "type",
    get: function get() {
      return Cell.Types.Null;
    }
  }, {
    key: "effectiveType",
    get: function get() {
      return Cell.Types.Null;
    }
  }, {
    key: "address",
    get: function get() {
      return this.model.address;
    },
    set: function set(value) {
      this.model.address = value;
    }
  }]);

  return NullValue;
}();

var NumberValue = /*#__PURE__*/function () {
  function NumberValue(cell, value) {
    _classCallCheck(this, NumberValue);

    this.model = {
      address: cell.address,
      type: Cell.Types.Number,
      value: value
    };
  }

  _createClass(NumberValue, [{
    key: "toCsvString",
    value: function toCsvString() {
      return this.model.value.toString();
    }
  }, {
    key: "release",
    value: function release() {}
  }, {
    key: "toString",
    value: function toString() {
      return this.model.value.toString();
    }
  }, {
    key: "value",
    get: function get() {
      return this.model.value;
    },
    set: function set(value) {
      this.model.value = value;
    }
  }, {
    key: "type",
    get: function get() {
      return Cell.Types.Number;
    }
  }, {
    key: "effectiveType",
    get: function get() {
      return Cell.Types.Number;
    }
  }, {
    key: "address",
    get: function get() {
      return this.model.address;
    },
    set: function set(value) {
      this.model.address = value;
    }
  }]);

  return NumberValue;
}();

var StringValue = /*#__PURE__*/function () {
  function StringValue(cell, value) {
    _classCallCheck(this, StringValue);

    this.model = {
      address: cell.address,
      type: Cell.Types.String,
      value: value
    };
  }

  _createClass(StringValue, [{
    key: "toCsvString",
    value: function toCsvString() {
      return "\"".concat(this.model.value.replace(/"/g, '""'), "\"");
    }
  }, {
    key: "release",
    value: function release() {}
  }, {
    key: "toString",
    value: function toString() {
      return this.model.value;
    }
  }, {
    key: "value",
    get: function get() {
      return this.model.value;
    },
    set: function set(value) {
      this.model.value = value;
    }
  }, {
    key: "type",
    get: function get() {
      return Cell.Types.String;
    }
  }, {
    key: "effectiveType",
    get: function get() {
      return Cell.Types.String;
    }
  }, {
    key: "address",
    get: function get() {
      return this.model.address;
    },
    set: function set(value) {
      this.model.address = value;
    }
  }]);

  return StringValue;
}();

var RichTextValue = /*#__PURE__*/function () {
  function RichTextValue(cell, value) {
    _classCallCheck(this, RichTextValue);

    this.model = {
      address: cell.address,
      type: Cell.Types.String,
      value: value
    };
  }

  _createClass(RichTextValue, [{
    key: "toString",
    value: function toString() {
      return this.model.value.richText.map(function (t) {
        return t.text;
      }).join('');
    }
  }, {
    key: "toCsvString",
    value: function toCsvString() {
      return "\"".concat(this.text.replace(/"/g, '""'), "\"");
    }
  }, {
    key: "release",
    value: function release() {}
  }, {
    key: "value",
    get: function get() {
      return this.model.value;
    },
    set: function set(value) {
      this.model.value = value;
    }
  }, {
    key: "type",
    get: function get() {
      return Cell.Types.RichText;
    }
  }, {
    key: "effectiveType",
    get: function get() {
      return Cell.Types.RichText;
    }
  }, {
    key: "address",
    get: function get() {
      return this.model.address;
    },
    set: function set(value) {
      this.model.address = value;
    }
  }]);

  return RichTextValue;
}();

var DateValue = /*#__PURE__*/function () {
  function DateValue(cell, value) {
    _classCallCheck(this, DateValue);

    this.model = {
      address: cell.address,
      type: Cell.Types.Date,
      value: value
    };
  }

  _createClass(DateValue, [{
    key: "toCsvString",
    value: function toCsvString() {
      return this.model.value.toISOString();
    }
  }, {
    key: "release",
    value: function release() {}
  }, {
    key: "toString",
    value: function toString() {
      return this.model.value.toString();
    }
  }, {
    key: "value",
    get: function get() {
      return this.model.value;
    },
    set: function set(value) {
      this.model.value = value;
    }
  }, {
    key: "type",
    get: function get() {
      return Cell.Types.Date;
    }
  }, {
    key: "effectiveType",
    get: function get() {
      return Cell.Types.Date;
    }
  }, {
    key: "address",
    get: function get() {
      return this.model.address;
    },
    set: function set(value) {
      this.model.address = value;
    }
  }]);

  return DateValue;
}();

var HyperlinkValue = /*#__PURE__*/function () {
  function HyperlinkValue(cell, value) {
    _classCallCheck(this, HyperlinkValue);

    this.model = {
      address: cell.address,
      type: Cell.Types.Hyperlink,
      text: value ? value.text : undefined,
      hyperlink: value ? value.hyperlink : undefined
    };

    if (value && value.tooltip) {
      this.model.tooltip = value.tooltip;
    }
  }

  _createClass(HyperlinkValue, [{
    key: "toCsvString",
    value: function toCsvString() {
      return this.model.hyperlink;
    }
  }, {
    key: "release",
    value: function release() {}
  }, {
    key: "toString",
    value: function toString() {
      return this.model.text;
    }
  }, {
    key: "value",
    get: function get() {
      var v = {
        text: this.model.text,
        hyperlink: this.model.hyperlink
      };

      if (this.model.tooltip) {
        v.tooltip = this.model.tooltip;
      }

      return v;
    },
    set: function set(value) {
      this.model = {
        text: value.text,
        hyperlink: value.hyperlink
      };

      if (value.tooltip) {
        this.model.tooltip = value.tooltip;
      }
    }
  }, {
    key: "text",
    get: function get() {
      return this.model.text;
    },
    set: function set(value) {
      this.model.text = value;
    }
    /*
    get tooltip() {
      return this.model.tooltip;
    }
      set tooltip(value) {
      this.model.tooltip = value;
    } */

  }, {
    key: "hyperlink",
    get: function get() {
      return this.model.hyperlink;
    },
    set: function set(value) {
      this.model.hyperlink = value;
    }
  }, {
    key: "type",
    get: function get() {
      return Cell.Types.Hyperlink;
    }
  }, {
    key: "effectiveType",
    get: function get() {
      return Cell.Types.Hyperlink;
    }
  }, {
    key: "address",
    get: function get() {
      return this.model.address;
    },
    set: function set(value) {
      this.model.address = value;
    }
  }]);

  return HyperlinkValue;
}();

var MergeValue = /*#__PURE__*/function () {
  function MergeValue(cell, master) {
    _classCallCheck(this, MergeValue);

    this.model = {
      address: cell.address,
      type: Cell.Types.Merge,
      master: master ? master.address : undefined
    };
    this._master = master;

    if (master) {
      master.addMergeRef();
    }
  }

  _createClass(MergeValue, [{
    key: "isMergedTo",
    value: function isMergedTo(master) {
      return master === this._master;
    }
  }, {
    key: "toCsvString",
    value: function toCsvString() {
      return '';
    }
  }, {
    key: "release",
    value: function release() {
      this._master.releaseMergeRef();
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.value.toString();
    }
  }, {
    key: "value",
    get: function get() {
      return this._master.value;
    },
    set: function set(value) {
      if (value instanceof Cell) {
        if (this._master) {
          this._master.releaseMergeRef();
        }

        value.addMergeRef();
        this._master = value;
      } else {
        this._master.value = value;
      }
    }
  }, {
    key: "master",
    get: function get() {
      return this._master;
    }
  }, {
    key: "type",
    get: function get() {
      return Cell.Types.Merge;
    }
  }, {
    key: "effectiveType",
    get: function get() {
      return this._master.effectiveType;
    }
  }, {
    key: "address",
    get: function get() {
      return this.model.address;
    },
    set: function set(value) {
      this.model.address = value;
    }
  }]);

  return MergeValue;
}();

var FormulaValue = /*#__PURE__*/function () {
  function FormulaValue(cell, value) {
    _classCallCheck(this, FormulaValue);

    this.cell = cell;
    this.model = {
      address: cell.address,
      type: Cell.Types.Formula,
      shareType: value ? value.shareType : undefined,
      ref: value ? value.ref : undefined,
      formula: value ? value.formula : undefined,
      sharedFormula: value ? value.sharedFormula : undefined,
      result: value ? value.result : undefined
    };
  }

  _createClass(FormulaValue, [{
    key: "_copyModel",
    value: function _copyModel(model) {
      var copy = {};

      var cp = function cp(name) {
        var value = model[name];

        if (value) {
          copy[name] = value;
        }
      };

      cp('formula');
      cp('result');
      cp('ref');
      cp('shareType');
      cp('sharedFormula');
      return copy;
    }
  }, {
    key: "validate",
    value: function validate(value) {
      switch (Value.getType(value)) {
        case Cell.Types.Null:
        case Cell.Types.String:
        case Cell.Types.Number:
        case Cell.Types.Date:
          break;

        case Cell.Types.Hyperlink:
        case Cell.Types.Formula:
        default:
          throw new Error('Cannot process that type of result value');
      }
    }
  }, {
    key: "_getTranslatedFormula",
    value: function _getTranslatedFormula() {
      if (!this._translatedFormula && this.model.sharedFormula) {
        var worksheet = this.cell.worksheet;
        var master = worksheet.findCell(this.model.sharedFormula);
        this._translatedFormula = master && slideFormula(master.formula, master.address, this.model.address);
      }

      return this._translatedFormula;
    }
  }, {
    key: "toCsvString",
    value: function toCsvString() {
      return "".concat(this.model.result || '');
    }
  }, {
    key: "release",
    value: function release() {}
  }, {
    key: "toString",
    value: function toString() {
      return this.model.result ? this.model.result.toString() : '';
    }
  }, {
    key: "value",
    get: function get() {
      return this._copyModel(this.model);
    },
    set: function set(value) {
      this.model = this._copyModel(value);
    }
  }, {
    key: "dependencies",
    get: function get() {
      // find all the ranges and cells mentioned in the formula
      var ranges = this.formula.match(/([a-zA-Z0-9]+!)?[A-Z]{1,3}\d{1,4}:[A-Z]{1,3}\d{1,4}/g);
      var cells = this.formula.replace(/([a-zA-Z0-9]+!)?[A-Z]{1,3}\d{1,4}:[A-Z]{1,3}\d{1,4}/g, '').match(/([a-zA-Z0-9]+!)?[A-Z]{1,3}\d{1,4}/g);
      return {
        ranges: ranges,
        cells: cells
      };
    }
  }, {
    key: "formula",
    get: function get() {
      return this.model.formula || this._getTranslatedFormula();
    },
    set: function set(value) {
      this.model.formula = value;
    }
  }, {
    key: "formulaType",
    get: function get() {
      if (this.model.formula) {
        return Enums.FormulaType.Master;
      }

      if (this.model.sharedFormula) {
        return Enums.FormulaType.Shared;
      }

      return Enums.FormulaType.None;
    }
  }, {
    key: "result",
    get: function get() {
      return this.model.result;
    },
    set: function set(value) {
      this.model.result = value;
    }
  }, {
    key: "type",
    get: function get() {
      return Cell.Types.Formula;
    }
  }, {
    key: "effectiveType",
    get: function get() {
      var v = this.model.result;

      if (v === null || v === undefined) {
        return Enums.ValueType.Null;
      }

      if (v instanceof String || typeof v === 'string') {
        return Enums.ValueType.String;
      }

      if (typeof v === 'number') {
        return Enums.ValueType.Number;
      }

      if (v instanceof Date) {
        return Enums.ValueType.Date;
      }

      if (v.text && v.hyperlink) {
        return Enums.ValueType.Hyperlink;
      }

      if (v.formula) {
        return Enums.ValueType.Formula;
      }

      return Enums.ValueType.Null;
    }
  }, {
    key: "address",
    get: function get() {
      return this.model.address;
    },
    set: function set(value) {
      this.model.address = value;
    }
  }]);

  return FormulaValue;
}();

var SharedStringValue = /*#__PURE__*/function () {
  function SharedStringValue(cell, value) {
    _classCallCheck(this, SharedStringValue);

    this.model = {
      address: cell.address,
      type: Cell.Types.SharedString,
      value: value
    };
  }

  _createClass(SharedStringValue, [{
    key: "toCsvString",
    value: function toCsvString() {
      return this.model.value.toString();
    }
  }, {
    key: "release",
    value: function release() {}
  }, {
    key: "toString",
    value: function toString() {
      return this.model.value.toString();
    }
  }, {
    key: "value",
    get: function get() {
      return this.model.value;
    },
    set: function set(value) {
      this.model.value = value;
    }
  }, {
    key: "type",
    get: function get() {
      return Cell.Types.SharedString;
    }
  }, {
    key: "effectiveType",
    get: function get() {
      return Cell.Types.SharedString;
    }
  }, {
    key: "address",
    get: function get() {
      return this.model.address;
    },
    set: function set(value) {
      this.model.address = value;
    }
  }]);

  return SharedStringValue;
}();

var BooleanValue = /*#__PURE__*/function () {
  function BooleanValue(cell, value) {
    _classCallCheck(this, BooleanValue);

    this.model = {
      address: cell.address,
      type: Cell.Types.Boolean,
      value: value
    };
  }

  _createClass(BooleanValue, [{
    key: "toCsvString",
    value: function toCsvString() {
      return this.model.value ? 1 : 0;
    }
  }, {
    key: "release",
    value: function release() {}
  }, {
    key: "toString",
    value: function toString() {
      return this.model.value.toString();
    }
  }, {
    key: "value",
    get: function get() {
      return this.model.value;
    },
    set: function set(value) {
      this.model.value = value;
    }
  }, {
    key: "type",
    get: function get() {
      return Cell.Types.Boolean;
    }
  }, {
    key: "effectiveType",
    get: function get() {
      return Cell.Types.Boolean;
    }
  }, {
    key: "address",
    get: function get() {
      return this.model.address;
    },
    set: function set(value) {
      this.model.address = value;
    }
  }]);

  return BooleanValue;
}();

var ErrorValue = /*#__PURE__*/function () {
  function ErrorValue(cell, value) {
    _classCallCheck(this, ErrorValue);

    this.model = {
      address: cell.address,
      type: Cell.Types.Error,
      value: value
    };
  }

  _createClass(ErrorValue, [{
    key: "toCsvString",
    value: function toCsvString() {
      return this.toString();
    }
  }, {
    key: "release",
    value: function release() {}
  }, {
    key: "toString",
    value: function toString() {
      return this.model.value.error.toString();
    }
  }, {
    key: "value",
    get: function get() {
      return this.model.value;
    },
    set: function set(value) {
      this.model.value = value;
    }
  }, {
    key: "type",
    get: function get() {
      return Cell.Types.Error;
    }
  }, {
    key: "effectiveType",
    get: function get() {
      return Cell.Types.Error;
    }
  }, {
    key: "address",
    get: function get() {
      return this.model.address;
    },
    set: function set(value) {
      this.model.address = value;
    }
  }]);

  return ErrorValue;
}();

var JSONValue = /*#__PURE__*/function () {
  function JSONValue(cell, value) {
    _classCallCheck(this, JSONValue);

    this.model = {
      address: cell.address,
      type: Cell.Types.String,
      value: JSON.stringify(value),
      rawValue: value
    };
  }

  _createClass(JSONValue, [{
    key: "toCsvString",
    value: function toCsvString() {
      return this.model.value;
    }
  }, {
    key: "release",
    value: function release() {}
  }, {
    key: "toString",
    value: function toString() {
      return this.model.value;
    }
  }, {
    key: "value",
    get: function get() {
      return this.model.rawValue;
    },
    set: function set(value) {
      this.model.rawValue = value;
      this.model.value = JSON.stringify(value);
    }
  }, {
    key: "type",
    get: function get() {
      return Cell.Types.String;
    }
  }, {
    key: "effectiveType",
    get: function get() {
      return Cell.Types.String;
    }
  }, {
    key: "address",
    get: function get() {
      return this.model.address;
    },
    set: function set(value) {
      this.model.address = value;
    }
  }]);

  return JSONValue;
}(); // Value is a place to hold common static Value type functions


var Value = {
  getType: function getType(value) {
    if (value === null || value === undefined) {
      return Cell.Types.Null;
    }

    if (value instanceof String || typeof value === 'string') {
      return Cell.Types.String;
    }

    if (typeof value === 'number') {
      return Cell.Types.Number;
    }

    if (typeof value === 'boolean') {
      return Cell.Types.Boolean;
    }

    if (value instanceof Date) {
      return Cell.Types.Date;
    }

    if (value.text && value.hyperlink) {
      return Cell.Types.Hyperlink;
    }

    if (value.formula || value.sharedFormula) {
      return Cell.Types.Formula;
    }

    if (value.richText) {
      return Cell.Types.RichText;
    }

    if (value.sharedString) {
      return Cell.Types.SharedString;
    }

    if (value.error) {
      return Cell.Types.Error;
    }

    return Cell.Types.JSON;
  },
  // map valueType to constructor
  types: [{
    t: Cell.Types.Null,
    f: NullValue
  }, {
    t: Cell.Types.Number,
    f: NumberValue
  }, {
    t: Cell.Types.String,
    f: StringValue
  }, {
    t: Cell.Types.Date,
    f: DateValue
  }, {
    t: Cell.Types.Hyperlink,
    f: HyperlinkValue
  }, {
    t: Cell.Types.Formula,
    f: FormulaValue
  }, {
    t: Cell.Types.Merge,
    f: MergeValue
  }, {
    t: Cell.Types.JSON,
    f: JSONValue
  }, {
    t: Cell.Types.SharedString,
    f: SharedStringValue
  }, {
    t: Cell.Types.RichText,
    f: RichTextValue
  }, {
    t: Cell.Types.Boolean,
    f: BooleanValue
  }, {
    t: Cell.Types.Error,
    f: ErrorValue
  }].reduce(function (p, t) {
    p[t.t] = t.f;
    return p;
  }, []),
  create: function create(type, cell, value) {
    var T = this.types[type];

    if (!T) {
      throw new Error("Could not create Value of type ".concat(type));
    }

    return new T(cell, value);
  }
};
module.exports = Cell;

},{"../utils/col-cache":19,"../utils/shared-formula":22,"../utils/under-dash":25,"./enums":7,"./note":9}],4:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _ = require('../utils/under-dash');

var Enums = require('./enums');

var colCache = require('../utils/col-cache');

var DEFAULT_COLUMN_WIDTH = 9; // Column defines the column properties for 1 column.
// This includes header rows, widths, key, (style), etc.
// Worksheet will condense the columns as appropriate during serialization

var Column = /*#__PURE__*/function () {
  function Column(worksheet, number, defn) {
    _classCallCheck(this, Column);

    this._worksheet = worksheet;
    this._number = number;

    if (defn !== false) {
      // sometimes defn will follow
      this.defn = defn;
    }
  }

  _createClass(Column, [{
    key: "toString",
    value: function toString() {
      return JSON.stringify({
        key: this.key,
        width: this.width,
        headers: this.headers.length ? this.headers : undefined
      });
    }
  }, {
    key: "equivalentTo",
    value: function equivalentTo(other) {
      return this.width === other.width && this.hidden === other.hidden && this.outlineLevel === other.outlineLevel && _.isEqual(this.style, other.style);
    }
  }, {
    key: "eachCell",
    value: function eachCell(options, iteratee) {
      var colNumber = this.number;

      if (!iteratee) {
        iteratee = options;
        options = null;
      }

      this._worksheet.eachRow(options, function (row, rowNumber) {
        iteratee(row.getCell(colNumber), rowNumber);
      });
    }
  }, {
    key: "_applyStyle",
    // =========================================================================
    // styles
    value: function _applyStyle(name, value) {
      this.style[name] = value;
      this.eachCell(function (cell) {
        cell[name] = value;
      });
      return value;
    }
  }, {
    key: "number",
    get: function get() {
      return this._number;
    }
  }, {
    key: "worksheet",
    get: function get() {
      return this._worksheet;
    }
  }, {
    key: "letter",
    get: function get() {
      return colCache.n2l(this._number);
    }
  }, {
    key: "isCustomWidth",
    get: function get() {
      return this.width !== undefined && this.width !== DEFAULT_COLUMN_WIDTH;
    }
  }, {
    key: "defn",
    get: function get() {
      return {
        header: this._header,
        key: this.key,
        width: this.width,
        style: this.style,
        hidden: this.hidden,
        outlineLevel: this.outlineLevel
      };
    },
    set: function set(value) {
      if (value) {
        this.key = value.key;
        this.width = value.width !== undefined ? value.width : DEFAULT_COLUMN_WIDTH;
        this.outlineLevel = value.outlineLevel;

        if (value.style) {
          this.style = value.style;
        } else {
          this.style = {};
        } // headers must be set after style


        this.header = value.header;
        this._hidden = !!value.hidden;
      } else {
        delete this._header;
        delete this._key;
        delete this.width;
        this.style = {};
        this.outlineLevel = 0;
      }
    }
  }, {
    key: "headers",
    get: function get() {
      return this._header && this._header instanceof Array ? this._header : [this._header];
    }
  }, {
    key: "header",
    get: function get() {
      return this._header;
    },
    set: function set(value) {
      var _this = this;

      if (value !== undefined) {
        this._header = value;
        this.headers.forEach(function (text, index) {
          _this._worksheet.getCell(index + 1, _this.number).value = text;
        });
      } else {
        this._header = undefined;
      }
    }
  }, {
    key: "key",
    get: function get() {
      return this._key;
    },
    set: function set(value) {
      var column = this._key && this._worksheet.getColumnKey(this._key);

      if (column === this) {
        this._worksheet.deleteColumnKey(this._key);
      }

      this._key = value;

      if (value) {
        this._worksheet.setColumnKey(this._key, this);
      }
    }
  }, {
    key: "hidden",
    get: function get() {
      return !!this._hidden;
    },
    set: function set(value) {
      this._hidden = value;
    }
  }, {
    key: "outlineLevel",
    get: function get() {
      return this._outlineLevel || 0;
    },
    set: function set(value) {
      this._outlineLevel = value;
    }
  }, {
    key: "collapsed",
    get: function get() {
      return !!(this._outlineLevel && this._outlineLevel >= this._worksheet.properties.outlineLevelCol);
    }
  }, {
    key: "isDefault",
    get: function get() {
      if (this.isCustomWidth) {
        return false;
      }

      if (this.hidden) {
        return false;
      }

      if (this.outlineLevel) {
        return false;
      }

      var s = this.style;

      if (s && (s.font || s.numFmt || s.alignment || s.border || s.fill || s.protection)) {
        return false;
      }

      return true;
    }
  }, {
    key: "headerCount",
    get: function get() {
      return this.headers.length;
    }
  }, {
    key: "values",
    get: function get() {
      var v = [];
      this.eachCell(function (cell, rowNumber) {
        if (cell && cell.type !== Enums.ValueType.Null) {
          v[rowNumber] = cell.value;
        }
      });
      return v;
    },
    set: function set(v) {
      var _this2 = this;

      if (!v) {
        return;
      }

      var colNumber = this.number;
      var offset = 0;

      if (v.hasOwnProperty('0')) {
        // assume contiguous array, start at row 1
        offset = 1;
      }

      v.forEach(function (value, index) {
        _this2._worksheet.getCell(index + offset, colNumber).value = value;
      });
    }
  }, {
    key: "numFmt",
    get: function get() {
      return this.style.numFmt;
    },
    set: function set(value) {
      this._applyStyle('numFmt', value);
    }
  }, {
    key: "font",
    get: function get() {
      return this.style.font;
    },
    set: function set(value) {
      this._applyStyle('font', value);
    }
  }, {
    key: "alignment",
    get: function get() {
      return this.style.alignment;
    },
    set: function set(value) {
      this._applyStyle('alignment', value);
    }
  }, {
    key: "protection",
    get: function get() {
      return this.style.protection;
    },
    set: function set(value) {
      this._applyStyle('protection', value);
    }
  }, {
    key: "border",
    get: function get() {
      return this.style.border;
    },
    set: function set(value) {
      this._applyStyle('border', value);
    }
  }, {
    key: "fill",
    get: function get() {
      return this.style.fill;
    },
    set: function set(value) {
      this._applyStyle('fill', value);
    } // =============================================================================
    // static functions

  }], [{
    key: "toModel",
    value: function toModel(columns) {
      // Convert array of Column into compressed list cols
      var cols = [];
      var col = null;

      if (columns) {
        columns.forEach(function (column, index) {
          if (column.isDefault) {
            if (col) {
              col = null;
            }
          } else if (!col || !column.equivalentTo(col)) {
            col = {
              min: index + 1,
              max: index + 1,
              width: column.width !== undefined ? column.width : DEFAULT_COLUMN_WIDTH,
              style: column.style,
              isCustomWidth: column.isCustomWidth,
              hidden: column.hidden,
              outlineLevel: column.outlineLevel,
              collapsed: column.collapsed
            };
            cols.push(col);
          } else {
            col.max = index + 1;
          }
        });
      }

      return cols.length ? cols : undefined;
    }
  }, {
    key: "fromModel",
    value: function fromModel(worksheet, cols) {
      cols = cols || [];
      var columns = [];
      var count = 1;
      var index = 0;

      while (index < cols.length) {
        var col = cols[index++];

        while (count < col.min) {
          columns.push(new Column(worksheet, count++));
        }

        while (count <= col.max) {
          columns.push(new Column(worksheet, count++, col));
        }
      }

      return columns.length ? columns : null;
    }
  }]);

  return Column;
}();

module.exports = Column;

},{"../utils/col-cache":19,"../utils/under-dash":25,"./enums":7}],5:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DataValidations = /*#__PURE__*/function () {
  function DataValidations(model) {
    _classCallCheck(this, DataValidations);

    this.model = model || {};
  }

  _createClass(DataValidations, [{
    key: "add",
    value: function add(address, validation) {
      return this.model[address] = validation;
    }
  }, {
    key: "find",
    value: function find(address) {
      return this.model[address];
    }
  }, {
    key: "remove",
    value: function remove(address) {
      this.model[address] = undefined;
    }
  }]);

  return DataValidations;
}();

module.exports = DataValidations;

},{}],6:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _ = require('../utils/under-dash');

var colCache = require('../utils/col-cache');

var CellMatrix = require('../utils/cell-matrix');

var Range = require('./range');

var rangeRegexp = /[$](\w+)[$](\d+)(:[$](\w+)[$](\d+))?/;

var DefinedNames = /*#__PURE__*/function () {
  function DefinedNames() {
    _classCallCheck(this, DefinedNames);

    this.matrixMap = {};
  }

  _createClass(DefinedNames, [{
    key: "getMatrix",
    value: function getMatrix(name) {
      var matrix = this.matrixMap[name] || (this.matrixMap[name] = new CellMatrix());
      return matrix;
    } // add a name to a cell. locStr in the form SheetName!$col$row or SheetName!$c1$r1:$c2:$r2

  }, {
    key: "add",
    value: function add(locStr, name) {
      var location = colCache.decodeEx(locStr);
      this.addEx(location, name);
    }
  }, {
    key: "addEx",
    value: function addEx(location, name) {
      var matrix = this.getMatrix(name);

      if (location.top) {
        for (var col = location.left; col <= location.right; col++) {
          for (var row = location.top; row <= location.bottom; row++) {
            var address = {
              sheetName: location.sheetName,
              address: colCache.n2l(col) + row,
              row: row,
              col: col
            };
            matrix.addCellEx(address);
          }
        }
      } else {
        matrix.addCellEx(location);
      }
    }
  }, {
    key: "remove",
    value: function remove(locStr, name) {
      var location = colCache.decodeEx(locStr);
      this.removeEx(location, name);
    }
  }, {
    key: "removeEx",
    value: function removeEx(location, name) {
      var matrix = this.getMatrix(name);
      matrix.removeCellEx(location);
    }
  }, {
    key: "removeAllNames",
    value: function removeAllNames(location) {
      _.each(this.matrixMap, function (matrix) {
        matrix.removeCellEx(location);
      });
    }
  }, {
    key: "forEach",
    value: function forEach(callback) {
      _.each(this.matrixMap, function (matrix, name) {
        matrix.forEach(function (cell) {
          callback(name, cell);
        });
      });
    } // get all the names of a cell

  }, {
    key: "getNames",
    value: function getNames(addressStr) {
      return this.getNamesEx(colCache.decodeEx(addressStr));
    }
  }, {
    key: "getNamesEx",
    value: function getNamesEx(address) {
      return _.map(this.matrixMap, function (matrix, name) {
        return matrix.findCellEx(address) && name;
      }).filter(Boolean);
    }
  }, {
    key: "_explore",
    value: function _explore(matrix, cell) {
      cell.mark = false;
      var sheetName = cell.sheetName;
      var range = new Range(cell.row, cell.col, cell.row, cell.col, sheetName);
      var x;
      var y; // grow vertical - only one col to worry about

      function vGrow(yy, edge) {
        var c = matrix.findCellAt(sheetName, yy, cell.col);

        if (!c || !c.mark) {
          return false;
        }

        range[edge] = yy;
        c.mark = false;
        return true;
      }

      for (y = cell.row - 1; vGrow(y, 'top'); y--) {
        ;
      }

      for (y = cell.row + 1; vGrow(y, 'bottom'); y++) {
        ;
      } // grow horizontal - ensure all rows can grow


      function hGrow(xx, edge) {
        var cells = [];

        for (y = range.top; y <= range.bottom; y++) {
          var c = matrix.findCellAt(sheetName, y, xx);

          if (c && c.mark) {
            cells.push(c);
          } else {
            return false;
          }
        }

        range[edge] = xx;

        for (var i = 0; i < cells.length; i++) {
          cells[i].mark = false;
        }

        return true;
      }

      for (x = cell.col - 1; hGrow(x, 'left'); x--) {
        ;
      }

      for (x = cell.col + 1; hGrow(x, 'right'); x++) {
        ;
      }

      return range;
    }
  }, {
    key: "getRanges",
    value: function getRanges(name, matrix) {
      var _this = this;

      matrix = matrix || this.matrixMap[name];

      if (!matrix) {
        return {
          name: name,
          ranges: []
        };
      } // mark and sweep!


      matrix.forEach(function (cell) {
        cell.mark = true;
      });
      var ranges = matrix.map(function (cell) {
        return cell.mark && _this._explore(matrix, cell);
      }).filter(Boolean).map(function (range) {
        return range.$shortRange;
      });
      return {
        name: name,
        ranges: ranges
      };
    }
  }, {
    key: "normaliseMatrix",
    value: function normaliseMatrix(matrix, sheetName) {
      // some of the cells might have shifted on specified sheet
      // need to reassign rows, cols
      matrix.forEachInSheet(sheetName, function (cell, row, col) {
        if (cell) {
          if (cell.row !== row || cell.col !== col) {
            cell.row = row;
            cell.col = col;
            cell.address = colCache.n2l(col) + row;
          }
        }
      });
    }
  }, {
    key: "spliceRows",
    value: function spliceRows(sheetName, start, numDelete, numInsert) {
      var _this2 = this;

      _.each(this.matrixMap, function (matrix) {
        matrix.spliceRows(sheetName, start, numDelete, numInsert);

        _this2.normaliseMatrix(matrix, sheetName);
      });
    }
  }, {
    key: "spliceColumns",
    value: function spliceColumns(sheetName, start, numDelete, numInsert) {
      var _this3 = this;

      _.each(this.matrixMap, function (matrix) {
        matrix.spliceColumns(sheetName, start, numDelete, numInsert);

        _this3.normaliseMatrix(matrix, sheetName);
      });
    }
  }, {
    key: "model",
    get: function get() {
      var _this4 = this;

      // To get names per cell - just iterate over all names finding cells if they exist
      return _.map(this.matrixMap, function (matrix, name) {
        return _this4.getRanges(name, matrix);
      }).filter(function (definedName) {
        return definedName.ranges.length;
      });
    },
    set: function set(value) {
      // value is [ { name, ranges }, ... ]
      var matrixMap = this.matrixMap = {};
      value.forEach(function (definedName) {
        var matrix = matrixMap[definedName.name] = new CellMatrix();
        definedName.ranges.forEach(function (rangeStr) {
          if (rangeRegexp.test(rangeStr.split('!').pop() || '')) {
            matrix.addCell(rangeStr);
          }
        });
      });
    }
  }]);

  return DefinedNames;
}();

module.exports = DefinedNames;

},{"../utils/cell-matrix":18,"../utils/col-cache":19,"../utils/under-dash":25,"./range":10}],7:[function(require,module,exports){
'use strict';

module.exports = {
  ValueType: {
    Null: 0,
    Merge: 1,
    Number: 2,
    String: 3,
    Date: 4,
    Hyperlink: 5,
    Formula: 6,
    SharedString: 7,
    RichText: 8,
    Boolean: 9,
    Error: 10
  },
  FormulaType: {
    None: 0,
    Master: 1,
    Shared: 2
  },
  RelationshipType: {
    None: 0,
    OfficeDocument: 1,
    Worksheet: 2,
    CalcChain: 3,
    SharedStrings: 4,
    Styles: 5,
    Theme: 6,
    Hyperlink: 7
  },
  DocumentType: {
    Xlsx: 1
  },
  ReadingOrder: {
    LeftToRight: 1,
    RightToLeft: 2
  },
  ErrorValue: {
    NotApplicable: '#N/A',
    Ref: '#REF!',
    Name: '#NAME?',
    DivZero: '#DIV/0!',
    Null: '#NULL!',
    Value: '#VALUE!',
    Num: '#NUM!'
  }
};

},{}],8:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var colCache = require('../utils/col-cache');

var Anchor = require('./anchor');

var Image = /*#__PURE__*/function () {
  function Image(worksheet, model) {
    _classCallCheck(this, Image);

    this.worksheet = worksheet;
    this.model = model;
  }

  _createClass(Image, [{
    key: "model",
    get: function get() {
      switch (this.type) {
        case 'background':
          return {
            type: this.type,
            imageId: this.imageId
          };

        case 'image':
          return {
            type: this.type,
            imageId: this.imageId,
            hyperlinks: this.range.hyperlinks,
            range: {
              tl: this.range.tl.model,
              br: this.range.br && this.range.br.model,
              ext: this.range.ext,
              editAs: this.range.editAs
            }
          };

        default:
          throw new Error('Invalid Image Type');
      }
    },
    set: function set(_ref) {
      var type = _ref.type,
          imageId = _ref.imageId,
          range = _ref.range,
          hyperlinks = _ref.hyperlinks;
      this.type = type;
      this.imageId = imageId;

      if (type === 'image') {
        if (typeof range === 'string') {
          var decoded = colCache.decode(range);
          this.range = {
            tl: new Anchor(this.worksheet, {
              col: decoded.left,
              row: decoded.top
            }, -1),
            br: new Anchor(this.worksheet, {
              col: decoded.right,
              row: decoded.bottom
            }, 0),
            editAs: 'oneCell'
          };
        } else {
          this.range = {
            tl: new Anchor(this.worksheet, range.tl, 0),
            br: range.br && new Anchor(this.worksheet, range.br, 0),
            ext: range.ext,
            editAs: range.editAs,
            hyperlinks: hyperlinks || range.hyperlinks
          };
        }
      }
    }
  }]);

  return Image;
}();

module.exports = Image;

},{"../utils/col-cache":19,"./anchor":2}],9:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _ = require('../utils/under-dash');

var Note = /*#__PURE__*/function () {
  function Note(note) {
    _classCallCheck(this, Note);

    this.note = note;
  }

  _createClass(Note, [{
    key: "model",
    get: function get() {
      var value = null;

      switch (_typeof(this.note)) {
        case 'string':
          value = {
            type: 'note',
            note: {
              texts: [{
                text: this.note
              }]
            }
          };
          break;

        default:
          value = {
            type: 'note',
            note: this.note
          };
          break;
      } // Suitable for all cell comments


      return _.deepMerge({}, Note.DEFAULT_CONFIGS, value);
    },
    set: function set(value) {
      var note = value.note;
      var texts = note.texts;

      if (texts.length === 1 && Object.keys(texts[0]).length === 1) {
        this.note = texts[0].text;
      } else {
        this.note = note;
      }
    }
  }], [{
    key: "fromModel",
    value: function fromModel(model) {
      var note = new Note();
      note.model = model;
      return note;
    }
  }]);

  return Note;
}();

Note.DEFAULT_CONFIGS = {
  note: {
    margins: {
      insetmode: 'auto',
      inset: [0.13, 0.13, 0.25, 0.25]
    },
    protection: {
      locked: 'True',
      lockText: 'True'
    },
    editAs: 'absolute'
  }
};
module.exports = Note;

},{"../utils/under-dash":25}],10:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var colCache = require('../utils/col-cache'); // used by worksheet to calculate sheet dimensions


var Range = /*#__PURE__*/function () {
  function Range() {
    _classCallCheck(this, Range);

    this.decode(arguments);
  }

  _createClass(Range, [{
    key: "setTLBR",
    value: function setTLBR(t, l, b, r, s) {
      if (arguments.length < 4) {
        // setTLBR(tl, br, s)
        var tl = colCache.decodeAddress(t);
        var br = colCache.decodeAddress(l);
        this.model = {
          top: Math.min(tl.row, br.row),
          left: Math.min(tl.col, br.col),
          bottom: Math.max(tl.row, br.row),
          right: Math.max(tl.col, br.col),
          sheetName: b
        };
        this.setTLBR(tl.row, tl.col, br.row, br.col, s);
      } else {
        // setTLBR(t, l, b, r, s)
        this.model = {
          top: Math.min(t, b),
          left: Math.min(l, r),
          bottom: Math.max(t, b),
          right: Math.max(l, r),
          sheetName: s
        };
      }
    }
  }, {
    key: "decode",
    value: function decode(argv) {
      switch (argv.length) {
        case 5:
          // [t,l,b,r,s]
          this.setTLBR(argv[0], argv[1], argv[2], argv[3], argv[4]);
          break;

        case 4:
          // [t,l,b,r]
          this.setTLBR(argv[0], argv[1], argv[2], argv[3]);
          break;

        case 3:
          // [tl,br,s]
          this.setTLBR(argv[0], argv[1], argv[2]);
          break;

        case 2:
          // [tl,br]
          this.setTLBR(argv[0], argv[1]);
          break;

        case 1:
          {
            var value = argv[0];

            if (value instanceof Range) {
              // copy constructor
              this.model = {
                top: value.model.top,
                left: value.model.left,
                bottom: value.model.bottom,
                right: value.model.right,
                sheetName: value.sheetName
              };
            } else if (value instanceof Array) {
              // an arguments array
              this.decode(value);
            } else if (value.top && value.left && value.bottom && value.right) {
              // a model
              this.model = {
                top: value.top,
                left: value.left,
                bottom: value.bottom,
                right: value.right,
                sheetName: value.sheetName
              };
            } else {
              // [sheetName!]tl:br
              var tlbr = colCache.decodeEx(value);

              if (tlbr.top) {
                this.model = {
                  top: tlbr.top,
                  left: tlbr.left,
                  bottom: tlbr.bottom,
                  right: tlbr.right,
                  sheetName: tlbr.sheetName
                };
              } else {
                this.model = {
                  top: tlbr.row,
                  left: tlbr.col,
                  bottom: tlbr.row,
                  right: tlbr.col,
                  sheetName: tlbr.sheetName
                };
              }
            }

            break;
          }

        case 0:
          this.model = {
            top: 0,
            left: 0,
            bottom: 0,
            right: 0
          };
          break;

        default:
          throw new Error("Invalid number of arguments to _getDimensions() - ".concat(argv.length));
      }
    }
  }, {
    key: "expand",
    value: function expand(top, left, bottom, right) {
      if (!this.model.top || top < this.top) this.top = top;
      if (!this.model.left || left < this.left) this.left = left;
      if (!this.model.bottom || bottom > this.bottom) this.bottom = bottom;
      if (!this.model.right || right > this.right) this.right = right;
    }
  }, {
    key: "expandRow",
    value: function expandRow(row) {
      if (row) {
        var dimensions = row.dimensions,
            number = row.number;

        if (dimensions) {
          this.expand(number, dimensions.min, number, dimensions.max);
        }
      }
    }
  }, {
    key: "expandToAddress",
    value: function expandToAddress(addressStr) {
      var address = colCache.decodeEx(addressStr);
      this.expand(address.row, address.col, address.row, address.col);
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.range;
    }
  }, {
    key: "intersects",
    value: function intersects(other) {
      if (other.sheetName && this.sheetName && other.sheetName !== this.sheetName) return false;
      if (other.bottom < this.top) return false;
      if (other.top > this.bottom) return false;
      if (other.right < this.left) return false;
      if (other.left > this.right) return false;
      return true;
    }
  }, {
    key: "contains",
    value: function contains(addressStr) {
      var address = colCache.decodeEx(addressStr);
      return this.containsEx(address);
    }
  }, {
    key: "containsEx",
    value: function containsEx(address) {
      if (address.sheetName && this.sheetName && address.sheetName !== this.sheetName) return false;
      return address.row >= this.top && address.row <= this.bottom && address.col >= this.left && address.col <= this.right;
    }
  }, {
    key: "forEachAddress",
    value: function forEachAddress(cb) {
      for (var col = this.left; col <= this.right; col++) {
        for (var row = this.top; row <= this.bottom; row++) {
          cb(colCache.encodeAddress(row, col), row, col);
        }
      }
    }
  }, {
    key: "top",
    get: function get() {
      return this.model.top || 1;
    },
    set: function set(value) {
      this.model.top = value;
    }
  }, {
    key: "left",
    get: function get() {
      return this.model.left || 1;
    },
    set: function set(value) {
      this.model.left = value;
    }
  }, {
    key: "bottom",
    get: function get() {
      return this.model.bottom || 1;
    },
    set: function set(value) {
      this.model.bottom = value;
    }
  }, {
    key: "right",
    get: function get() {
      return this.model.right || 1;
    },
    set: function set(value) {
      this.model.right = value;
    }
  }, {
    key: "sheetName",
    get: function get() {
      return this.model.sheetName;
    },
    set: function set(value) {
      this.model.sheetName = value;
    }
  }, {
    key: "_serialisedSheetName",
    get: function get() {
      var sheetName = this.model.sheetName;

      if (sheetName) {
        if (/^[a-zA-Z0-9]*$/.test(sheetName)) {
          return "".concat(sheetName, "!");
        }

        return "'".concat(sheetName, "'!");
      }

      return '';
    }
  }, {
    key: "tl",
    get: function get() {
      return colCache.n2l(this.left) + this.top;
    }
  }, {
    key: "$t$l",
    get: function get() {
      return "$".concat(colCache.n2l(this.left), "$").concat(this.top);
    }
  }, {
    key: "br",
    get: function get() {
      return colCache.n2l(this.right) + this.bottom;
    }
  }, {
    key: "$b$r",
    get: function get() {
      return "$".concat(colCache.n2l(this.right), "$").concat(this.bottom);
    }
  }, {
    key: "range",
    get: function get() {
      return "".concat(this._serialisedSheetName + this.tl, ":").concat(this.br);
    }
  }, {
    key: "$range",
    get: function get() {
      return "".concat(this._serialisedSheetName + this.$t$l, ":").concat(this.$b$r);
    }
  }, {
    key: "shortRange",
    get: function get() {
      return this.count > 1 ? this.range : this._serialisedSheetName + this.tl;
    }
  }, {
    key: "$shortRange",
    get: function get() {
      return this.count > 1 ? this.$range : this._serialisedSheetName + this.$t$l;
    }
  }, {
    key: "count",
    get: function get() {
      return (1 + this.bottom - this.top) * (1 + this.right - this.left);
    }
  }]);

  return Range;
}();

module.exports = Range;

},{"../utils/col-cache":19}],11:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _ = require('../utils/under-dash');

var Enums = require('./enums');

var colCache = require('../utils/col-cache');

var Cell = require('./cell');

var Row = /*#__PURE__*/function () {
  function Row(worksheet, number) {
    _classCallCheck(this, Row);

    this._worksheet = worksheet;
    this._number = number;
    this._cells = [];
    this.style = {};
    this.outlineLevel = 0;
  } // return the row number


  _createClass(Row, [{
    key: "commit",
    // Inform Streaming Writer that this row (and all rows before it) are complete
    // and ready to write. Has no effect on Worksheet document
    value: function commit() {
      this._worksheet._commitRow(this); // eslint-disable-line no-underscore-dangle

    } // helps GC by breaking cyclic references

  }, {
    key: "destroy",
    value: function destroy() {
      delete this._worksheet;
      delete this._cells;
      delete this.style;
    }
  }, {
    key: "findCell",
    value: function findCell(colNumber) {
      return this._cells[colNumber - 1];
    } // given {address, row, col}, find or create new cell

  }, {
    key: "getCellEx",
    value: function getCellEx(address) {
      var cell = this._cells[address.col - 1];

      if (!cell) {
        var column = this._worksheet.getColumn(address.col);

        cell = new Cell(this, column, address.address);
        this._cells[address.col - 1] = cell;
      }

      return cell;
    } // get cell by key, letter or column number

  }, {
    key: "getCell",
    value: function getCell(col) {
      if (typeof col === 'string') {
        // is it a key?
        var column = this._worksheet.getColumnKey(col);

        if (column) {
          col = column.number;
        } else {
          col = colCache.l2n(col);
        }
      }

      return this._cells[col - 1] || this.getCellEx({
        address: colCache.encodeAddress(this._number, col),
        row: this._number,
        col: col
      });
    } // remove cell(s) and shift all higher cells down by count

  }, {
    key: "splice",
    value: function splice(start, count) {
      var nKeep = start + count;

      for (var _len = arguments.length, inserts = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        inserts[_key - 2] = arguments[_key];
      }

      var nExpand = inserts.length - count;
      var nEnd = this._cells.length;
      var i;
      var cSrc;
      var cDst;

      if (nExpand < 0) {
        // remove cells
        for (i = start + inserts.length; i <= nEnd; i++) {
          cDst = this._cells[i - 1];
          cSrc = this._cells[i - nExpand - 1];

          if (cSrc) {
            cDst = this.getCell(i);
            cDst.value = cSrc.value;
            cDst.style = cSrc.style; // eslint-disable-next-line no-underscore-dangle

            cDst._comment = cSrc._comment;
          } else if (cDst) {
            cDst.value = null;
            cDst.style = {}; // eslint-disable-next-line no-underscore-dangle

            cDst._comment = undefined;
          }
        }
      } else if (nExpand > 0) {
        // insert new cells
        for (i = nEnd; i >= nKeep; i--) {
          cSrc = this._cells[i - 1];

          if (cSrc) {
            cDst = this.getCell(i + nExpand);
            cDst.value = cSrc.value;
            cDst.style = cSrc.style; // eslint-disable-next-line no-underscore-dangle

            cDst._comment = cSrc._comment;
          } else {
            this._cells[i + nExpand - 1] = undefined;
          }
        }
      } // now add the new values


      for (i = 0; i < inserts.length; i++) {
        cDst = this.getCell(start + i);
        cDst.value = inserts[i];
        cDst.style = {}; // eslint-disable-next-line no-underscore-dangle

        cDst._comment = undefined;
      }
    } // Iterate over all non-null cells in this row

  }, {
    key: "eachCell",
    value: function eachCell(options, iteratee) {
      if (!iteratee) {
        iteratee = options;
        options = null;
      }

      if (options && options.includeEmpty) {
        var n = this._cells.length;

        for (var i = 1; i <= n; i++) {
          iteratee(this.getCell(i), i);
        }
      } else {
        this._cells.forEach(function (cell, index) {
          if (cell && cell.type !== Enums.ValueType.Null) {
            iteratee(cell, index + 1);
          }
        });
      }
    } // ===========================================================================
    // Page Breaks

  }, {
    key: "addPageBreak",
    value: function addPageBreak(lft, rght) {
      var ws = this._worksheet;
      var left = Math.max(0, lft - 1) || 0;
      var right = Math.max(0, rght - 1) || 16838;
      var pb = {
        id: this._number,
        max: right,
        man: 1
      };
      if (left) pb.min = left;
      ws.rowBreaks.push(pb);
    } // return a sparse array of cell values

  }, {
    key: "_applyStyle",
    // =========================================================================
    // styles
    value: function _applyStyle(name, value) {
      this.style[name] = value;

      this._cells.forEach(function (cell) {
        if (cell) {
          cell[name] = value;
        }
      });

      return value;
    }
  }, {
    key: "number",
    get: function get() {
      return this._number;
    }
  }, {
    key: "worksheet",
    get: function get() {
      return this._worksheet;
    }
  }, {
    key: "values",
    get: function get() {
      var values = [];

      this._cells.forEach(function (cell) {
        if (cell && cell.type !== Enums.ValueType.Null) {
          values[cell.col] = cell.value;
        }
      });

      return values;
    } // set the values by contiguous or sparse array, or by key'd object literal
    ,
    set: function set(value) {
      var _this = this;

      // this operation is not additive - any prior cells are removed
      this._cells = [];

      if (!value) {// empty row
      } else if (value instanceof Array) {
        var offset = 0;

        if (value.hasOwnProperty('0')) {
          // contiguous array - start at column 1
          offset = 1;
        }

        value.forEach(function (item, index) {
          if (item !== undefined) {
            _this.getCellEx({
              address: colCache.encodeAddress(_this._number, index + offset),
              row: _this._number,
              col: index + offset
            }).value = item;
          }
        });
      } else {
        // assume object with column keys
        this._worksheet.eachColumnKey(function (column, key) {
          if (value[key] !== undefined) {
            _this.getCellEx({
              address: colCache.encodeAddress(_this._number, column.number),
              row: _this._number,
              col: column.number
            }).value = value[key];
          }
        });
      }
    } // returns true if the row includes at least one cell with a value

  }, {
    key: "hasValues",
    get: function get() {
      return _.some(this._cells, function (cell) {
        return cell && cell.type !== Enums.ValueType.Null;
      });
    }
  }, {
    key: "cellCount",
    get: function get() {
      return this._cells.length;
    }
  }, {
    key: "actualCellCount",
    get: function get() {
      var count = 0;
      this.eachCell(function () {
        count++;
      });
      return count;
    } // get the min and max column number for the non-null cells in this row or null

  }, {
    key: "dimensions",
    get: function get() {
      var min = 0;
      var max = 0;

      this._cells.forEach(function (cell) {
        if (cell && cell.type !== Enums.ValueType.Null) {
          if (!min || min > cell.col) {
            min = cell.col;
          }

          if (max < cell.col) {
            max = cell.col;
          }
        }
      });

      return min > 0 ? {
        min: min,
        max: max
      } : null;
    }
  }, {
    key: "numFmt",
    get: function get() {
      return this.style.numFmt;
    },
    set: function set(value) {
      this._applyStyle('numFmt', value);
    }
  }, {
    key: "font",
    get: function get() {
      return this.style.font;
    },
    set: function set(value) {
      this._applyStyle('font', value);
    }
  }, {
    key: "alignment",
    get: function get() {
      return this.style.alignment;
    },
    set: function set(value) {
      this._applyStyle('alignment', value);
    }
  }, {
    key: "protection",
    get: function get() {
      return this.style.protection;
    },
    set: function set(value) {
      this._applyStyle('protection', value);
    }
  }, {
    key: "border",
    get: function get() {
      return this.style.border;
    },
    set: function set(value) {
      this._applyStyle('border', value);
    }
  }, {
    key: "fill",
    get: function get() {
      return this.style.fill;
    },
    set: function set(value) {
      this._applyStyle('fill', value);
    }
  }, {
    key: "hidden",
    get: function get() {
      return !!this._hidden;
    },
    set: function set(value) {
      this._hidden = value;
    }
  }, {
    key: "outlineLevel",
    get: function get() {
      return this._outlineLevel || 0;
    },
    set: function set(value) {
      this._outlineLevel = value;
    }
  }, {
    key: "collapsed",
    get: function get() {
      return !!(this._outlineLevel && this._outlineLevel >= this._worksheet.properties.outlineLevelRow);
    } // =========================================================================

  }, {
    key: "model",
    get: function get() {
      var cells = [];
      var min = 0;
      var max = 0;

      this._cells.forEach(function (cell) {
        if (cell) {
          var cellModel = cell.model;

          if (cellModel) {
            if (!min || min > cell.col) {
              min = cell.col;
            }

            if (max < cell.col) {
              max = cell.col;
            }

            cells.push(cellModel);
          }
        }
      });

      return this.height || cells.length ? {
        cells: cells,
        number: this.number,
        min: min,
        max: max,
        height: this.height,
        style: this.style,
        hidden: this.hidden,
        outlineLevel: this.outlineLevel,
        collapsed: this.collapsed
      } : null;
    },
    set: function set(value) {
      var _this2 = this;

      if (value.number !== this._number) {
        throw new Error('Invalid row number in model');
      }

      this._cells = [];
      var previousAddress;
      value.cells.forEach(function (cellModel) {
        switch (cellModel.type) {
          case Cell.Types.Merge:
            // special case - don't add this types
            break;

          default:
            {
              var address;

              if (cellModel.address) {
                address = colCache.decodeAddress(cellModel.address);
              } else if (previousAddress) {
                // This is a <c> element without an r attribute
                // Assume that it's the cell for the next column
                var _previousAddress = previousAddress,
                    row = _previousAddress.row;
                var col = previousAddress.col + 1;
                address = {
                  row: row,
                  col: col,
                  address: colCache.encodeAddress(row, col),
                  $col$row: "$".concat(colCache.n2l(col), "$").concat(row)
                };
              }

              previousAddress = address;

              var cell = _this2.getCellEx(address);

              cell.model = cellModel;
              break;
            }
        }
      });

      if (value.height) {
        this.height = value.height;
      } else {
        delete this.height;
      }

      this.hidden = value.hidden;
      this.outlineLevel = value.outlineLevel || 0;
      this.style = value.style && JSON.parse(JSON.stringify(value.style)) || {};
    }
  }]);

  return Row;
}();

module.exports = Row;

},{"../utils/col-cache":19,"../utils/under-dash":25,"./cell":3,"./enums":7}],12:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/* eslint-disable max-classes-per-file */
var colCache = require('../utils/col-cache');

var Column = /*#__PURE__*/function () {
  // wrapper around column model, allowing access and manipulation
  function Column(table, column, index) {
    _classCallCheck(this, Column);

    this.table = table;
    this.column = column;
    this.index = index;
  }

  _createClass(Column, [{
    key: "_set",
    value: function _set(name, value) {
      this.table.cacheState();
      this.column[name] = value;
    }
    /* eslint-disable lines-between-class-members */

  }, {
    key: "name",
    get: function get() {
      return this.column.name;
    },
    set: function set(value) {
      this._set('name', value);
    }
  }, {
    key: "filterButton",
    get: function get() {
      return this.column.filterButton;
    },
    set: function set(value) {
      this.column.filterButton = value;
    }
  }, {
    key: "style",
    get: function get() {
      return this.column.style;
    },
    set: function set(value) {
      this.column.style = value;
    }
  }, {
    key: "totalsRowLabel",
    get: function get() {
      return this.column.totalsRowLabel;
    },
    set: function set(value) {
      this._set('totalsRowLabel', value);
    }
  }, {
    key: "totalsRowFunction",
    get: function get() {
      return this.column.totalsRowFunction;
    },
    set: function set(value) {
      this._set('totalsRowFunction', value);
    }
  }, {
    key: "totalsRowResult",
    get: function get() {
      return this.column.totalsRowResult;
    },
    set: function set(value) {
      this._set('totalsRowResult', value);
    }
  }, {
    key: "totalsRowFormula",
    get: function get() {
      return this.column.totalsRowFormula;
    },
    set: function set(value) {
      this._set('totalsRowFormula', value);
    }
    /* eslint-enable lines-between-class-members */

  }]);

  return Column;
}();

var Table = /*#__PURE__*/function () {
  function Table(worksheet, table) {
    _classCallCheck(this, Table);

    this.worksheet = worksheet;

    if (table) {
      this.table = table; // check things are ok first

      this.validate();
      this.store();
    }
  }

  _createClass(Table, [{
    key: "getFormula",
    value: function getFormula(column) {
      // get the correct formula to apply to the totals row
      switch (column.totalsRowFunction) {
        case 'none':
          return null;

        case 'average':
          return "SUBTOTAL(101,".concat(this.table.name, "[").concat(column.name, "])");

        case 'countNums':
          return "SUBTOTAL(102,".concat(this.table.name, "[").concat(column.name, "])");

        case 'count':
          return "SUBTOTAL(103,".concat(this.table.name, "[").concat(column.name, "])");

        case 'max':
          return "SUBTOTAL(104,".concat(this.table.name, "[").concat(column.name, "])");

        case 'min':
          return "SUBTOTAL(105,".concat(this.table.name, "[").concat(column.name, "])");

        case 'stdDev':
          return "SUBTOTAL(106,".concat(this.table.name, "[").concat(column.name, "])");

        case 'var':
          return "SUBTOTAL(107,".concat(this.table.name, "[").concat(column.name, "])");

        case 'sum':
          return "SUBTOTAL(109,".concat(this.table.name, "[").concat(column.name, "])");

        case 'custom':
          return column.totalsRowFormula;

        default:
          throw new Error("Invalid Totals Row Function: ".concat(column.totalsRowFunction));
      }
    }
  }, {
    key: "validate",
    value: function validate() {
      var _this = this;

      var table = this.table; // set defaults and check is valid

      var assign = function assign(o, name, dflt) {
        if (o[name] === undefined) {
          o[name] = dflt;
        }
      };

      assign(table, 'headerRow', true);
      assign(table, 'totalsRow', false);
      assign(table, 'style', {});
      assign(table.style, 'theme', 'TableStyleMedium2');
      assign(table.style, 'showFirstColumn', false);
      assign(table.style, 'showLastColumn', false);
      assign(table.style, 'showRowStripes', false);
      assign(table.style, 'showColumnStripes', false);

      var assert = function assert(test, message) {
        if (!test) {
          throw new Error(message);
        }
      };

      assert(table.ref, 'Table must have ref');
      assert(table.columns, 'Table must have column definitions');
      assert(table.rows, 'Table must have row definitions');
      table.tl = colCache.decodeAddress(table.ref);
      var _table$tl = table.tl,
          row = _table$tl.row,
          col = _table$tl.col;
      assert(row > 0, 'Table must be on valid row');
      assert(col > 0, 'Table must be on valid col');
      var width = this.width,
          filterHeight = this.filterHeight,
          tableHeight = this.tableHeight; // autoFilterRef is a range that includes optional headers only

      table.autoFilterRef = colCache.encode(row, col, row + filterHeight - 1, col + width - 1); // tableRef is a range that includes optional headers and totals

      table.tableRef = colCache.encode(row, col, row + tableHeight - 1, col + width - 1);
      table.columns.forEach(function (column, i) {
        assert(column.name, "Column ".concat(i, " must have a name"));

        if (i === 0) {
          assign(column, 'totalsRowLabel', 'Total');
        } else {
          assign(column, 'totalsRowFunction', 'none');
          column.totalsRowFormula = _this.getFormula(column);
        }
      });
    }
  }, {
    key: "store",
    value: function store() {
      var _this2 = this;

      // where the table needs to store table data, headers, footers in
      // the sheet...
      var assignStyle = function assignStyle(cell, style) {
        if (style) {
          Object.keys(style).forEach(function (key) {
            cell[key] = style[key];
          });
        }
      };

      var worksheet = this.worksheet,
          table = this.table;
      var _table$tl2 = table.tl,
          row = _table$tl2.row,
          col = _table$tl2.col;
      var count = 0;

      if (table.headerRow) {
        var r = worksheet.getRow(row + count++);
        table.columns.forEach(function (column, j) {
          var style = column.style,
              name = column.name;
          var cell = r.getCell(col + j);
          cell.value = name;
          assignStyle(cell, style);
        });
      }

      table.rows.forEach(function (data) {
        var r = worksheet.getRow(row + count++);
        data.forEach(function (value, j) {
          var cell = r.getCell(col + j);
          cell.value = value;
          assignStyle(cell, table.columns[j].style);
        });
      });

      if (table.totalsRow) {
        var _r = worksheet.getRow(row + count++);

        table.columns.forEach(function (column, j) {
          var cell = _r.getCell(col + j);

          if (j === 0) {
            cell.value = column.totalsRowLabel;
          } else {
            var formula = _this2.getFormula(column);

            if (formula) {
              cell.value = {
                formula: column.totalsRowFormula,
                result: column.totalsRowResult
              };
            } else {
              cell.value = null;
            }
          }

          assignStyle(cell, column.style);
        });
      }
    }
  }, {
    key: "load",
    value: function load(worksheet) {
      var _this3 = this;

      // where the table will read necessary features from a loaded sheet
      var table = this.table;
      var _table$tl3 = table.tl,
          row = _table$tl3.row,
          col = _table$tl3.col;
      var count = 0;

      if (table.headerRow) {
        var r = worksheet.getRow(row + count++);
        table.columns.forEach(function (column, j) {
          var cell = r.getCell(col + j);
          cell.value = column.name;
        });
      }

      table.rows.forEach(function (data) {
        var r = worksheet.getRow(row + count++);
        data.forEach(function (value, j) {
          var cell = r.getCell(col + j);
          cell.value = value;
        });
      });

      if (table.totalsRow) {
        var _r2 = worksheet.getRow(row + count++);

        table.columns.forEach(function (column, j) {
          var cell = _r2.getCell(col + j);

          if (j === 0) {
            cell.value = column.totalsRowLabel;
          } else {
            var formula = _this3.getFormula(column);

            if (formula) {
              cell.value = {
                formula: column.totalsRowFormula,
                result: column.totalsRowResult
              };
            }
          }
        });
      }
    }
  }, {
    key: "cacheState",
    // ================================================================
    // TODO: Mutating methods
    value: function cacheState() {
      if (!this._cache) {
        this._cache = {
          ref: this.ref,
          width: this.width,
          tableHeight: this.tableHeight
        };
      }
    }
  }, {
    key: "commit",
    value: function commit() {
      // changes may have been made that might have on-sheet effects
      if (!this._cache) {
        return;
      } // check things are ok first


      this.validate();
      var ref = colCache.decodeAddress(this._cache.ref);

      if (this.ref !== this._cache.ref) {
        // wipe out whole table footprint at previous location
        for (var i = 0; i < this._cache.tableHeight; i++) {
          var row = this.worksheet.getRow(ref.row + i);

          for (var j = 0; j < this._cache.width; j++) {
            var cell = row.getCell(ref.col + j);
            cell.value = null;
          }
        }
      } else {
        // clear out below table if it has shrunk
        for (var _i = this.tableHeight; _i < this._cache.tableHeight; _i++) {
          var _row = this.worksheet.getRow(ref.row + _i);

          for (var _j = 0; _j < this._cache.width; _j++) {
            var _cell = _row.getCell(ref.col + _j);

            _cell.value = null;
          }
        } // clear out to right of table if it has lost columns


        for (var _i2 = 0; _i2 < this.tableHeight; _i2++) {
          var _row2 = this.worksheet.getRow(ref.row + _i2);

          for (var _j2 = this.width; _j2 < this._cache.width; _j2++) {
            var _cell2 = _row2.getCell(ref.col + _j2);

            _cell2.value = null;
          }
        }
      }

      this.store();
    }
  }, {
    key: "addRow",
    value: function addRow(values, rowNumber) {
      // Add a row of data, either insert at rowNumber or append
      this.cacheState();

      if (rowNumber === undefined) {
        this.table.rows.push(values);
      } else {
        this.table.rows.splice(rowNumber, 0, values);
      }
    }
  }, {
    key: "removeRows",
    value: function removeRows(rowIndex) {
      var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      // Remove a rows of data
      this.cacheState();
      this.table.rows.splice(rowIndex, count);
    }
  }, {
    key: "getColumn",
    value: function getColumn(colIndex) {
      var column = this.table.columns[colIndex];
      return new Column(this, column, colIndex);
    }
  }, {
    key: "addColumn",
    value: function addColumn(column, values, colIndex) {
      // Add a new column, including column defn and values
      // Inserts at colNumber or adds to the right
      this.cacheState();

      if (colIndex === undefined) {
        this.table.columns.push(column);
        this.table.rows.forEach(function (row, i) {
          row.push(values[i]);
        });
      } else {
        this.table.columns.splice(colIndex, 0, column);
        this.table.rows.forEach(function (row, i) {
          row.splice(colIndex, 0, values[i]);
        });
      }
    }
  }, {
    key: "removeColumns",
    value: function removeColumns(colIndex) {
      var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      // Remove a column with data
      this.cacheState();
      this.table.columns.splice(colIndex, count);
      this.table.rows.forEach(function (row) {
        row.splice(colIndex, count);
      });
    }
  }, {
    key: "_assign",
    value: function _assign(target, prop, value) {
      this.cacheState();
      target[prop] = value;
    }
    /* eslint-disable lines-between-class-members */

  }, {
    key: "width",
    get: function get() {
      // width of the table
      return this.table.columns.length;
    }
  }, {
    key: "height",
    get: function get() {
      // height of the table data
      return this.table.rows.length;
    }
  }, {
    key: "filterHeight",
    get: function get() {
      // height of the table data plus optional header row
      return this.height + (this.table.headerRow ? 1 : 0);
    }
  }, {
    key: "tableHeight",
    get: function get() {
      // full height of the table on the sheet
      return this.filterHeight + (this.table.totalsRow ? 1 : 0);
    }
  }, {
    key: "model",
    get: function get() {
      return this.table;
    },
    set: function set(value) {
      this.table = value;
    }
  }, {
    key: "ref",
    get: function get() {
      return this.table.ref;
    },
    set: function set(value) {
      this._assign(this.table, 'ref', value);
    }
  }, {
    key: "name",
    get: function get() {
      return this.table.name;
    },
    set: function set(value) {
      this.table.name = value;
    }
  }, {
    key: "displayName",
    get: function get() {
      return this.table.displyName || this.table.name;
    }
  }, {
    key: "displayNamename",
    set: function set(value) {
      this.table.displayName = value;
    }
  }, {
    key: "headerRow",
    get: function get() {
      return this.table.headerRow;
    },
    set: function set(value) {
      this._assign(this.table, 'headerRow', value);
    }
  }, {
    key: "totalsRow",
    get: function get() {
      return this.table.totalsRow;
    },
    set: function set(value) {
      this._assign(this.table, 'totalsRow', value);
    }
  }, {
    key: "theme",
    get: function get() {
      return this.table.style.name;
    },
    set: function set(value) {
      this.table.style.name = value;
    }
  }, {
    key: "showFirstColumn",
    get: function get() {
      return this.table.style.showFirstColumn;
    },
    set: function set(value) {
      this.table.style.showFirstColumn = value;
    }
  }, {
    key: "showLastColumn",
    get: function get() {
      return this.table.style.showLastColumn;
    },
    set: function set(value) {
      this.table.style.showLastColumn = value;
    }
  }, {
    key: "showRowStripes",
    get: function get() {
      return this.table.style.showRowStripes;
    },
    set: function set(value) {
      this.table.style.showRowStripes = value;
    }
  }, {
    key: "showColumnStripes",
    get: function get() {
      return this.table.style.showColumnStripes;
    },
    set: function set(value) {
      this.table.style.showColumnStripes = value;
    }
    /* eslint-enable lines-between-class-members */

  }]);

  return Table;
}();

module.exports = Table;

},{"../utils/col-cache":19}],13:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Worksheet = require('./worksheet');

var DefinedNames = require('./defined-names');

var XLSX = require('../xlsx/xlsx');

var CSV = require('../csv/csv'); // Workbook requirements
//  Load and Save from file and stream
//  Access/Add/Delete individual worksheets
//  Manage String table, Hyperlink table, etc.
//  Manage scaffolding for contained objects to write to/read from


var Workbook = /*#__PURE__*/function () {
  function Workbook() {
    _classCallCheck(this, Workbook);

    this.category = '';
    this.company = '';
    this.created = new Date();
    this.description = '';
    this.keywords = '';
    this.manager = '';
    this.modified = this.created;
    this.properties = {};
    this.calcProperties = {};
    this._worksheets = [];
    this.subject = '';
    this.title = '';
    this.views = [];
    this.media = [];
    this._definedNames = new DefinedNames();
  }

  _createClass(Workbook, [{
    key: "addWorksheet",
    value: function addWorksheet(name, options) {
      var id = this.nextId;

      if (name && name.length > 31) {
        // eslint-disable-next-line no-console
        console.warn("Worksheet name ".concat(name, " exceeds 31 chars. This will be truncated"));
      } // Illegal character in worksheet name: asterisk (*), question mark (?),
      // colon (:), forward slash (/ \), or bracket ([])


      if (/[*?:/\\[\]]/.test(name)) {
        throw new Error("Worksheet name ".concat(name, " cannot include any of the following characters: * ? : \\ / [ ]"));
      }

      if (/(^')|('$)/.test(name)) {
        throw new Error("The first or last character of worksheet name cannot be a single quotation mark: ".concat(name));
      }

      name = (name || "sheet".concat(id)).substring(0, 31);

      if (this._worksheets.find(function (ws) {
        return ws && ws.name.toLowerCase() === name.toLowerCase();
      })) {
        throw new Error("Worksheet name already exists: ".concat(name));
      } // if options is a color, call it tabColor (and signal deprecated message)


      if (options) {
        if (typeof options === 'string') {
          // eslint-disable-next-line no-console
          console.trace('tabColor argument is now deprecated. Please use workbook.addWorksheet(name, {properties: { tabColor: { argb: "rbg value" } }');
          options = {
            properties: {
              tabColor: {
                argb: options
              }
            }
          };
        } else if (options.argb || options.theme || options.indexed) {
          // eslint-disable-next-line no-console
          console.trace('tabColor argument is now deprecated. Please use workbook.addWorksheet(name, {properties: { tabColor: { ... } }');
          options = {
            properties: {
              tabColor: options
            }
          };
        }
      }

      var lastOrderNo = this._worksheets.reduce(function (acc, ws) {
        return (ws && ws.orderNo) > acc ? ws.orderNo : acc;
      }, 0);

      var worksheetOptions = Object.assign({}, options, {
        id: id,
        name: name,
        orderNo: lastOrderNo + 1,
        workbook: this
      });
      var worksheet = new Worksheet(worksheetOptions);
      this._worksheets[id] = worksheet;
      return worksheet;
    }
  }, {
    key: "removeWorksheetEx",
    value: function removeWorksheetEx(worksheet) {
      delete this._worksheets[worksheet.id];
    }
  }, {
    key: "removeWorksheet",
    value: function removeWorksheet(id) {
      var worksheet = this.getWorksheet(id);

      if (worksheet) {
        worksheet.destroy();
      }
    }
  }, {
    key: "getWorksheet",
    value: function getWorksheet(id) {
      if (id === undefined) {
        return this._worksheets.find(Boolean);
      }

      if (typeof id === 'number') {
        return this._worksheets[id];
      }

      if (typeof id === 'string') {
        return this._worksheets.find(function (worksheet) {
          return worksheet && worksheet.name === id;
        });
      }

      return undefined;
    }
  }, {
    key: "eachSheet",
    value: function eachSheet(iteratee) {
      this.worksheets.forEach(function (sheet) {
        iteratee(sheet, sheet.id);
      });
    }
  }, {
    key: "clearThemes",
    value: function clearThemes() {
      // Note: themes are not an exposed feature, meddle at your peril!
      this._themes = undefined;
    }
  }, {
    key: "addImage",
    value: function addImage(image) {
      // TODO:  validation?
      var id = this.media.length;
      this.media.push(Object.assign({}, image, {
        type: 'image'
      }));
      return id;
    }
  }, {
    key: "getImage",
    value: function getImage(id) {
      return this.media[id];
    }
  }, {
    key: "xlsx",
    get: function get() {
      if (!this._xlsx) this._xlsx = new XLSX(this);
      return this._xlsx;
    }
  }, {
    key: "csv",
    get: function get() {
      if (!this._csv) this._csv = new CSV(this);
      return this._csv;
    }
  }, {
    key: "nextId",
    get: function get() {
      // find the next unique spot to add worksheet
      for (var i = 1; i < this._worksheets.length; i++) {
        if (!this._worksheets[i]) {
          return i;
        }
      }

      return this._worksheets.length || 1;
    }
  }, {
    key: "worksheets",
    get: function get() {
      // return a clone of _worksheets
      return this._worksheets.slice(1).sort(function (a, b) {
        return a.orderNo - b.orderNo;
      }).filter(Boolean);
    }
  }, {
    key: "definedNames",
    get: function get() {
      return this._definedNames;
    }
  }, {
    key: "model",
    get: function get() {
      return {
        creator: this.creator || 'Unknown',
        lastModifiedBy: this.lastModifiedBy || 'Unknown',
        lastPrinted: this.lastPrinted,
        created: this.created,
        modified: this.modified,
        properties: this.properties,
        worksheets: this.worksheets.map(function (worksheet) {
          return worksheet.model;
        }),
        sheets: this.worksheets.map(function (ws) {
          return ws.model;
        }).filter(Boolean),
        definedNames: this._definedNames.model,
        views: this.views,
        company: this.company,
        manager: this.manager,
        title: this.title,
        subject: this.subject,
        keywords: this.keywords,
        category: this.category,
        description: this.description,
        language: this.language,
        revision: this.revision,
        contentStatus: this.contentStatus,
        themes: this._themes,
        media: this.media,
        calcProperties: this.calcProperties
      };
    },
    set: function set(value) {
      var _this = this;

      this.creator = value.creator;
      this.lastModifiedBy = value.lastModifiedBy;
      this.lastPrinted = value.lastPrinted;
      this.created = value.created;
      this.modified = value.modified;
      this.company = value.company;
      this.manager = value.manager;
      this.title = value.title;
      this.subject = value.subject;
      this.keywords = value.keywords;
      this.category = value.category;
      this.description = value.description;
      this.language = value.language;
      this.revision = value.revision;
      this.contentStatus = value.contentStatus;
      this.properties = value.properties;
      this.calcProperties = value.calcProperties;
      this._worksheets = [];
      value.worksheets.forEach(function (worksheetModel) {
        var id = worksheetModel.id,
            name = worksheetModel.name,
            state = worksheetModel.state;
        var orderNo = value.sheets && value.sheets.findIndex(function (ws) {
          return ws.id === id;
        });
        var worksheet = _this._worksheets[id] = new Worksheet({
          id: id,
          name: name,
          orderNo: orderNo,
          state: state,
          workbook: _this
        });
        worksheet.model = worksheetModel;
      });
      this._definedNames.model = value.definedNames;
      this.views = value.views;
      this._themes = value.themes;
      this.media = value.media || [];
    }
  }]);

  return Workbook;
}();

module.exports = Workbook;

},{"../csv/csv":1,"../xlsx/xlsx":141,"./defined-names":6,"./worksheet":14}],14:[function(require,module,exports){
"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _ = require('../utils/under-dash');

var colCache = require('../utils/col-cache');

var Range = require('./range');

var Row = require('./row');

var Column = require('./column');

var Enums = require('./enums');

var Image = require('./image');

var Table = require('./table');

var DataValidations = require('./data-validations');

var Encryptor = require('../utils/encryptor'); // Worksheet requirements
//  Operate as sheet inside workbook or standalone
//  Load and Save from file and stream
//  Access/Add/Delete individual cells
//  Manage column widths and row heights


var Worksheet = /*#__PURE__*/function () {
  function Worksheet(options) {
    _classCallCheck(this, Worksheet);

    options = options || {}; // in a workbook, each sheet will have a number

    this.id = options.id;
    this.orderNo = options.orderNo; // and a name

    this.name = options.name || "Sheet".concat(this.id); // add a state

    this.state = options.state || 'visible'; // rows allows access organised by row. Sparse array of arrays indexed by row-1, col
    // Note: _rows is zero based. Must subtract 1 to go from cell.row to index

    this._rows = []; // column definitions

    this._columns = null; // column keys (addRow convenience): key ==> this._collumns index

    this._keys = {}; // keep record of all merges

    this._merges = {}; // record of all row and column pageBreaks

    this.rowBreaks = [];
    this._workbook = options.workbook; // for tabColor, default row height, outline levels, etc

    this.properties = Object.assign({}, {
      defaultRowHeight: 15,
      dyDescent: 55,
      outlineLevelCol: 0,
      outlineLevelRow: 0
    }, options.properties); // for all things printing

    this.pageSetup = Object.assign({}, {
      margins: {
        left: 0.7,
        right: 0.7,
        top: 0.75,
        bottom: 0.75,
        header: 0.3,
        footer: 0.3
      },
      orientation: 'portrait',
      horizontalDpi: 4294967295,
      verticalDpi: 4294967295,
      fitToPage: !!(options.pageSetup && (options.pageSetup.fitToWidth || options.pageSetup.fitToHeight) && !options.pageSetup.scale),
      pageOrder: 'downThenOver',
      blackAndWhite: false,
      draft: false,
      cellComments: 'None',
      errors: 'displayed',
      scale: 100,
      fitToWidth: 1,
      fitToHeight: 1,
      paperSize: undefined,
      showRowColHeaders: false,
      showGridLines: false,
      firstPageNumber: undefined,
      horizontalCentered: false,
      verticalCentered: false,
      rowBreaks: null,
      colBreaks: null
    }, options.pageSetup);
    this.headerFooter = Object.assign({}, {
      differentFirst: false,
      differentOddEven: false,
      oddHeader: null,
      oddFooter: null,
      evenHeader: null,
      evenFooter: null,
      firstHeader: null,
      firstFooter: null
    }, options.headerFooter);
    this.dataValidations = new DataValidations(); // for freezepanes, split, zoom, gridlines, etc

    this.views = options.views || [];
    this.autoFilter = options.autoFilter || null; // for images, etc

    this._media = []; // worksheet protection

    this.sheetProtection = null; // for tables

    this.tables = {};
    this.conditionalFormattings = [];
  }

  _createClass(Worksheet, [{
    key: "destroy",
    // when you're done with this worksheet, call this to remove from workbook
    value: function destroy() {
      this._workbook.removeWorksheetEx(this);
    } // Get the bounding range of the cells in this worksheet

  }, {
    key: "getColumnKey",
    value: function getColumnKey(key) {
      return this._keys[key];
    }
  }, {
    key: "setColumnKey",
    value: function setColumnKey(key, value) {
      this._keys[key] = value;
    }
  }, {
    key: "deleteColumnKey",
    value: function deleteColumnKey(key) {
      delete this._keys[key];
    }
  }, {
    key: "eachColumnKey",
    value: function eachColumnKey(f) {
      _.each(this._keys, f);
    } // get a single column by col number. If it doesn't exist, create it and any gaps before it

  }, {
    key: "getColumn",
    value: function getColumn(c) {
      if (typeof c === 'string') {
        // if it matches a key'd column, return that
        var col = this._keys[c];
        if (col) return col; // otherwise, assume letter

        c = colCache.l2n(c);
      }

      if (!this._columns) {
        this._columns = [];
      }

      if (c > this._columns.length) {
        var n = this._columns.length + 1;

        while (n <= c) {
          this._columns.push(new Column(this, n++));
        }
      }

      return this._columns[c - 1];
    }
  }, {
    key: "spliceColumns",
    value: function spliceColumns(start, count) {
      var _this = this;

      var rows = this._rows;
      var nRows = rows.length;

      for (var _len = arguments.length, inserts = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        inserts[_key - 2] = arguments[_key];
      }

      if (inserts.length > 0) {
        var _loop = function _loop(i) {
          var rowArguments = [start, count]; // eslint-disable-next-line no-loop-func

          inserts.forEach(function (insert) {
            rowArguments.push(insert[i] || null);
          });

          var row = _this.getRow(i + 1); // eslint-disable-next-line prefer-spread


          row.splice.apply(row, rowArguments);
        };

        // must iterate over all rows whether they exist yet or not
        for (var i = 0; i < nRows; i++) {
          _loop(i);
        }
      } else {
        // nothing to insert, so just splice all rows
        this._rows.forEach(function (r) {
          if (r) {
            r.splice(start, count);
          }
        });
      } // splice column definitions


      var nExpand = inserts.length - count;
      var nKeep = start + count;
      var nEnd = this._columns.length;

      if (nExpand < 0) {
        for (var _i = start + inserts.length; _i <= nEnd; _i++) {
          this.getColumn(_i).defn = this.getColumn(_i - nExpand).defn;
        }
      } else if (nExpand > 0) {
        for (var _i2 = nEnd; _i2 >= nKeep; _i2--) {
          this.getColumn(_i2 + nExpand).defn = this.getColumn(_i2).defn;
        }
      }

      for (var _i3 = start; _i3 < start + inserts.length; _i3++) {
        this.getColumn(_i3).defn = null;
      } // account for defined names


      this.workbook.definedNames.spliceColumns(this.name, start, count, inserts.length);
    }
  }, {
    key: "_commitRow",
    // =========================================================================
    // Rows
    value: function _commitRow() {// nop - allows streaming reader to fill a document
    }
  }, {
    key: "findRow",
    // find a row (if exists) by row number
    value: function findRow(r) {
      return this._rows[r - 1];
    } // find multiple rows (if exists) by row number

  }, {
    key: "findRows",
    value: function findRows(start, length) {
      return this._rows.slice(start - 1, start - 1 + length);
    }
  }, {
    key: "getRow",
    // get a row by row number.
    value: function getRow(r) {
      var row = this._rows[r - 1];

      if (!row) {
        row = this._rows[r - 1] = new Row(this, r);
      }

      return row;
    } // get multiple rows by row number.

  }, {
    key: "getRows",
    value: function getRows(start, length) {
      if (length < 1) return undefined;
      var rows = [];

      for (var i = start; i < start + length; i++) {
        rows.push(this.getRow(i));
      }

      return rows;
    }
  }, {
    key: "addRow",
    value: function addRow(value) {
      var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'n';
      var rowNo = this._nextRow;
      var row = this.getRow(rowNo);
      row.values = value;

      this._setStyleOption(rowNo, style[0] === 'i' ? style : 'n');

      return row;
    }
  }, {
    key: "addRows",
    value: function addRows(value) {
      var _this2 = this;

      var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'n';
      var rows = [];
      value.forEach(function (row) {
        rows.push(_this2.addRow(row, style));
      });
      return rows;
    }
  }, {
    key: "insertRow",
    value: function insertRow(pos, value) {
      var style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'n';
      this.spliceRows(pos, 0, value);

      this._setStyleOption(pos, style);

      return this.getRow(pos);
    }
  }, {
    key: "insertRows",
    value: function insertRows(pos, values) {
      var style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'n';
      this.spliceRows.apply(this, [pos, 0].concat(_toConsumableArray(values)));

      if (style !== 'n') {
        // copy over the styles
        for (var i = 0; i < values.length; i++) {
          if (style[0] === 'o' && this.findRow(values.length + pos + i) !== undefined) {
            this._copyStyle(values.length + pos + i, pos + i, style[1] === '+');
          } else if (style[0] === 'i' && this.findRow(pos - 1) !== undefined) {
            this._copyStyle(pos - 1, pos + i, style[1] === '+');
          }
        }
      }

      return this.getRows(pos, values.length);
    } // set row at position to same style as of either pervious row (option 'i') or next row (option 'o')

  }, {
    key: "_setStyleOption",
    value: function _setStyleOption(pos) {
      var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'n';

      if (style[0] === 'o' && this.findRow(pos + 1) !== undefined) {
        this._copyStyle(pos + 1, pos, style[1] === '+');
      } else if (style[0] === 'i' && this.findRow(pos - 1) !== undefined) {
        this._copyStyle(pos - 1, pos, style[1] === '+');
      }
    }
  }, {
    key: "_copyStyle",
    value: function _copyStyle(src, dest) {
      var styleEmpty = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var rSrc = this.getRow(src);
      var rDst = this.getRow(dest);
      rDst.style = Object.freeze(_objectSpread({}, rSrc.style)); // eslint-disable-next-line no-loop-func

      rSrc.eachCell({
        includeEmpty: styleEmpty
      }, function (cell, colNumber) {
        rDst.getCell(colNumber).style = Object.freeze(_objectSpread({}, cell.style));
      });
      rDst.height = rSrc.height;
    }
  }, {
    key: "duplicateRow",
    value: function duplicateRow(rowNum, count) {
      var _this3 = this;

      var insert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      // create count duplicates of rowNum
      // either inserting new or overwriting existing rows
      var rSrc = this._rows[rowNum - 1];
      var inserts = new Array(count).fill(rSrc.values);
      this.spliceRows.apply(this, [rowNum + 1, insert ? 0 : count].concat(_toConsumableArray(inserts))); // now copy styles...

      var _loop2 = function _loop2(i) {
        var rDst = _this3._rows[rowNum + i];
        rDst.style = rSrc.style;
        rDst.height = rSrc.height; // eslint-disable-next-line no-loop-func

        rSrc.eachCell({
          includeEmpty: true
        }, function (cell, colNumber) {
          rDst.getCell(colNumber).style = cell.style;
        });
      };

      for (var i = 0; i < count; i++) {
        _loop2(i);
      }
    }
  }, {
    key: "spliceRows",
    value: function spliceRows(start, count) {
      var _this4 = this;

      // same problem as row.splice, except worse.
      var nKeep = start + count;

      for (var _len2 = arguments.length, inserts = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        inserts[_key2 - 2] = arguments[_key2];
      }

      var nInserts = inserts.length;
      var nExpand = nInserts - count;
      var nEnd = this._rows.length;
      var i;
      var rSrc;

      if (nExpand < 0) {
        // remove rows
        for (i = nKeep; i <= nEnd; i++) {
          rSrc = this._rows[i - 1];

          if (rSrc) {
            (function () {
              var rDst = _this4.getRow(i + nExpand);

              rDst.values = rSrc.values;
              rDst.style = rSrc.style;
              rDst.height = rSrc.height; // eslint-disable-next-line no-loop-func

              rSrc.eachCell({
                includeEmpty: true
              }, function (cell, colNumber) {
                rDst.getCell(colNumber).style = cell.style;
              });
              _this4._rows[i - 1] = undefined;
            })();
          } else {
            this._rows[i + nExpand - 1] = undefined;
          }
        }
      } else if (nExpand > 0) {
        // insert new cells
        for (i = nEnd; i >= nKeep; i--) {
          rSrc = this._rows[i - 1];

          if (rSrc) {
            (function () {
              var rDst = _this4.getRow(i + nExpand);

              rDst.values = rSrc.values;
              rDst.style = rSrc.style;
              rDst.height = rSrc.height; // eslint-disable-next-line no-loop-func

              rSrc.eachCell({
                includeEmpty: true
              }, function (cell, colNumber) {
                rDst.getCell(colNumber).style = cell.style; // remerge cells accounting for insert offset

                if (cell._value.constructor.name === 'MergeValue') {
                  var cellToBeMerged = _this4.getRow(cell._row._number + nInserts).getCell(colNumber);

                  var prevMaster = cell._value._master;

                  var newMaster = _this4.getRow(prevMaster._row._number + nInserts).getCell(prevMaster._column._number);

                  cellToBeMerged.merge(newMaster);
                }
              });
            })();
          } else {
            this._rows[i + nExpand - 1] = undefined;
          }
        }
      } // now copy over the new values


      for (i = 0; i < nInserts; i++) {
        var rDst = this.getRow(start + i);
        rDst.style = {};
        rDst.values = inserts[i];
      } // account for defined names


      this.workbook.definedNames.spliceRows(this.name, start, count, nInserts);
    } // iterate over every row in the worksheet, including maybe empty rows

  }, {
    key: "eachRow",
    value: function eachRow(options, iteratee) {
      if (!iteratee) {
        iteratee = options;
        options = undefined;
      }

      if (options && options.includeEmpty) {
        var n = this._rows.length;

        for (var i = 1; i <= n; i++) {
          iteratee(this.getRow(i), i);
        }
      } else {
        this._rows.forEach(function (row) {
          if (row && row.hasValues) {
            iteratee(row, row.number);
          }
        });
      }
    } // return all rows as sparse array

  }, {
    key: "getSheetValues",
    value: function getSheetValues() {
      var rows = [];

      this._rows.forEach(function (row) {
        if (row) {
          rows[row.number] = row.values;
        }
      });

      return rows;
    } // =========================================================================
    // Cells
    // returns the cell at [r,c] or address given by r. If not found, return undefined

  }, {
    key: "findCell",
    value: function findCell(r, c) {
      var address = colCache.getAddress(r, c);
      var row = this._rows[address.row - 1];
      return row ? row.findCell(address.col) : undefined;
    } // return the cell at [r,c] or address given by r. If not found, create a new one.

  }, {
    key: "getCell",
    value: function getCell(r, c) {
      var address = colCache.getAddress(r, c);
      var row = this.getRow(address.row);
      return row.getCellEx(address);
    } // =========================================================================
    // Merge
    // convert the range defined by ['tl:br'], [tl,br] or [t,l,b,r] into a single 'merged' cell

  }, {
    key: "mergeCells",
    value: function mergeCells() {
      for (var _len3 = arguments.length, cells = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        cells[_key3] = arguments[_key3];
      }

      var dimensions = new Range(cells);

      this._mergeCellsInternal(dimensions);
    }
  }, {
    key: "mergeCellsWithoutStyle",
    value: function mergeCellsWithoutStyle() {
      for (var _len4 = arguments.length, cells = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        cells[_key4] = arguments[_key4];
      }

      var dimensions = new Range(cells);

      this._mergeCellsInternal(dimensions, true);
    }
  }, {
    key: "_mergeCellsInternal",
    value: function _mergeCellsInternal(dimensions, ignoreStyle) {
      // check cells aren't already merged
      _.each(this._merges, function (merge) {
        if (merge.intersects(dimensions)) {
          throw new Error('Cannot merge already merged cells');
        }
      }); // apply merge


      var master = this.getCell(dimensions.top, dimensions.left);

      for (var i = dimensions.top; i <= dimensions.bottom; i++) {
        for (var j = dimensions.left; j <= dimensions.right; j++) {
          // merge all but the master cell
          if (i > dimensions.top || j > dimensions.left) {
            this.getCell(i, j).merge(master, ignoreStyle);
          }
        }
      } // index merge


      this._merges[master.address] = dimensions;
    }
  }, {
    key: "_unMergeMaster",
    value: function _unMergeMaster(master) {
      // master is always top left of a rectangle
      var merge = this._merges[master.address];

      if (merge) {
        for (var i = merge.top; i <= merge.bottom; i++) {
          for (var j = merge.left; j <= merge.right; j++) {
            this.getCell(i, j).unmerge();
          }
        }

        delete this._merges[master.address];
      }
    }
  }, {
    key: "unMergeCells",
    // scan the range defined by ['tl:br'], [tl,br] or [t,l,b,r] and if any cell is part of a merge,
    // un-merge the group. Note this function can affect multiple merges and merge-blocks are
    // atomic - either they're all merged or all un-merged.
    value: function unMergeCells() {
      for (var _len5 = arguments.length, cells = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        cells[_key5] = arguments[_key5];
      }

      var dimensions = new Range(cells); // find any cells in that range and unmerge them

      for (var i = dimensions.top; i <= dimensions.bottom; i++) {
        for (var j = dimensions.left; j <= dimensions.right; j++) {
          var cell = this.findCell(i, j);

          if (cell) {
            if (cell.type === Enums.ValueType.Merge) {
              // this cell merges to another master
              this._unMergeMaster(cell.master);
            } else if (this._merges[cell.address]) {
              // this cell is a master
              this._unMergeMaster(cell);
            }
          }
        }
      }
    } // ===========================================================================
    // Shared/Array Formula

  }, {
    key: "fillFormula",
    value: function fillFormula(range, formula, results) {
      var shareType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'shared';
      // Define formula for top-left cell and share to rest
      var decoded = colCache.decode(range);
      var top = decoded.top,
          left = decoded.left,
          bottom = decoded.bottom,
          right = decoded.right;
      var width = right - left + 1;
      var masterAddress = colCache.encodeAddress(top, left);
      var isShared = shareType === 'shared'; // work out result accessor

      var getResult;

      if (typeof results === 'function') {
        getResult = results;
      } else if (Array.isArray(results)) {
        if (Array.isArray(results[0])) {
          getResult = function getResult(row, col) {
            return results[row - top][col - left];
          };
        } else {
          // eslint-disable-next-line no-mixed-operators
          getResult = function getResult(row, col) {
            return results[(row - top) * width + (col - left)];
          };
        }
      } else {
        getResult = function getResult() {
          return undefined;
        };
      }

      var first = true;

      for (var r = top; r <= bottom; r++) {
        for (var c = left; c <= right; c++) {
          if (first) {
            this.getCell(r, c).value = {
              shareType: shareType,
              formula: formula,
              ref: range,
              result: getResult(r, c)
            };
            first = false;
          } else {
            this.getCell(r, c).value = isShared ? {
              sharedFormula: masterAddress,
              result: getResult(r, c)
            } : getResult(r, c);
          }
        }
      }
    } // =========================================================================
    // Images

  }, {
    key: "addImage",
    value: function addImage(imageId, range) {
      var model = {
        type: 'image',
        imageId: imageId,
        range: range
      };

      this._media.push(new Image(this, model));
    }
  }, {
    key: "getImages",
    value: function getImages() {
      return this._media.filter(function (m) {
        return m.type === 'image';
      });
    }
  }, {
    key: "addBackgroundImage",
    value: function addBackgroundImage(imageId) {
      var model = {
        type: 'background',
        imageId: imageId
      };

      this._media.push(new Image(this, model));
    }
  }, {
    key: "getBackgroundImageId",
    value: function getBackgroundImageId() {
      var image = this._media.find(function (m) {
        return m.type === 'background';
      });

      return image && image.imageId;
    } // =========================================================================
    // Worksheet Protection

  }, {
    key: "protect",
    value: function protect(password, options) {
      var _this5 = this;

      // TODO: make this function truly async
      // perhaps marshal to worker thread or something
      return new Promise(function (resolve) {
        _this5.sheetProtection = {
          sheet: true
        };

        if (options && 'spinCount' in options) {
          // force spinCount to be integer >= 0
          options.spinCount = Number.isFinite(options.spinCount) ? Math.round(Math.max(0, options.spinCount)) : 100000;
        }

        if (password) {
          _this5.sheetProtection.algorithmName = 'SHA-512';
          _this5.sheetProtection.saltValue = Encryptor.randomBytes(16).toString('base64');
          _this5.sheetProtection.spinCount = options && 'spinCount' in options ? options.spinCount : 100000; // allow user specified spinCount

          _this5.sheetProtection.hashValue = Encryptor.convertPasswordToHash(password, 'SHA512', _this5.sheetProtection.saltValue, _this5.sheetProtection.spinCount);
        }

        if (options) {
          _this5.sheetProtection = Object.assign(_this5.sheetProtection, options);

          if (!password && 'spinCount' in options) {
            delete _this5.sheetProtection.spinCount;
          }
        }

        resolve();
      });
    }
  }, {
    key: "unprotect",
    value: function unprotect() {
      this.sheetProtection = null;
    } // =========================================================================
    // Tables

  }, {
    key: "addTable",
    value: function addTable(model) {
      var table = new Table(this, model);
      this.tables[model.name] = table;
      return table;
    }
  }, {
    key: "getTable",
    value: function getTable(name) {
      return this.tables[name];
    }
  }, {
    key: "removeTable",
    value: function removeTable(name) {
      delete this.tables[name];
    }
  }, {
    key: "getTables",
    value: function getTables() {
      return Object.values(this.tables);
    } // ===========================================================================
    // Conditional Formatting

  }, {
    key: "addConditionalFormatting",
    value: function addConditionalFormatting(cf) {
      this.conditionalFormattings.push(cf);
    }
  }, {
    key: "removeConditionalFormatting",
    value: function removeConditionalFormatting(filter) {
      if (typeof filter === 'number') {
        this.conditionalFormattings.splice(filter, 1);
      } else if (filter instanceof Function) {
        this.conditionalFormattings = this.conditionalFormattings.filter(filter);
      } else {
        this.conditionalFormattings = [];
      }
    } // ===========================================================================
    // Deprecated

  }, {
    key: "_parseRows",
    value: function _parseRows(model) {
      var _this6 = this;

      this._rows = [];
      model.rows.forEach(function (rowModel) {
        var row = new Row(_this6, rowModel.number);
        _this6._rows[row.number - 1] = row;
        row.model = rowModel;
      });
    }
  }, {
    key: "_parseMergeCells",
    value: function _parseMergeCells(model) {
      var _this7 = this;

      _.each(model.mergeCells, function (merge) {
        // Do not merge styles when importing an Excel file
        // since each cell may have different styles intentionally.
        _this7.mergeCellsWithoutStyle(merge);
      });
    }
  }, {
    key: "workbook",
    get: function get() {
      return this._workbook;
    }
  }, {
    key: "dimensions",
    get: function get() {
      var dimensions = new Range();

      this._rows.forEach(function (row) {
        if (row) {
          var rowDims = row.dimensions;

          if (rowDims) {
            dimensions.expand(row.number, rowDims.min, row.number, rowDims.max);
          }
        }
      });

      return dimensions;
    } // =========================================================================
    // Columns
    // get the current columns array.

  }, {
    key: "columns",
    get: function get() {
      return this._columns;
    } // set the columns from an array of column definitions.
    // Note: any headers defined will overwrite existing values.
    ,
    set: function set(value) {
      var _this8 = this;

      // calculate max header row count
      this._headerRowCount = value.reduce(function (pv, cv) {
        var headerCount = cv.header && 1 || cv.headers && cv.headers.length || 0;
        return Math.max(pv, headerCount);
      }, 0); // construct Column objects

      var count = 1;
      var columns = this._columns = [];
      value.forEach(function (defn) {
        var column = new Column(_this8, count++, false);
        columns.push(column);
        column.defn = defn;
      });
    }
  }, {
    key: "lastColumn",
    get: function get() {
      return this.getColumn(this.columnCount);
    }
  }, {
    key: "columnCount",
    get: function get() {
      var maxCount = 0;
      this.eachRow(function (row) {
        maxCount = Math.max(maxCount, row.cellCount);
      });
      return maxCount;
    }
  }, {
    key: "actualColumnCount",
    get: function get() {
      // performance nightmare - for each row, counts all the columns used
      var counts = [];
      var count = 0;
      this.eachRow(function (row) {
        row.eachCell(function (_ref) {
          var col = _ref.col;

          if (!counts[col]) {
            counts[col] = true;
            count++;
          }
        });
      });
      return count;
    }
  }, {
    key: "_lastRowNumber",
    get: function get() {
      // need to cope with results of splice
      var rows = this._rows;
      var n = rows.length;

      while (n > 0 && rows[n - 1] === undefined) {
        n--;
      }

      return n;
    }
  }, {
    key: "_nextRow",
    get: function get() {
      return this._lastRowNumber + 1;
    }
  }, {
    key: "lastRow",
    get: function get() {
      if (this._rows.length) {
        return this._rows[this._rows.length - 1];
      }

      return undefined;
    }
  }, {
    key: "rowCount",
    get: function get() {
      return this._lastRowNumber;
    }
  }, {
    key: "actualRowCount",
    get: function get() {
      // counts actual rows that have actual data
      var count = 0;
      this.eachRow(function () {
        count++;
      });
      return count;
    }
  }, {
    key: "hasMerges",
    get: function get() {
      // return true if this._merges has a merge object
      return _.some(this._merges, Boolean);
    }
  }, {
    key: "tabColor",
    get: function get() {
      // eslint-disable-next-line no-console
      console.trace('worksheet.tabColor property is now deprecated. Please use worksheet.properties.tabColor');
      return this.properties.tabColor;
    },
    set: function set(value) {
      // eslint-disable-next-line no-console
      console.trace('worksheet.tabColor property is now deprecated. Please use worksheet.properties.tabColor');
      this.properties.tabColor = value;
    } // ===========================================================================
    // Model

  }, {
    key: "model",
    get: function get() {
      var model = {
        id: this.id,
        name: this.name,
        dataValidations: this.dataValidations.model,
        properties: this.properties,
        state: this.state,
        pageSetup: this.pageSetup,
        headerFooter: this.headerFooter,
        rowBreaks: this.rowBreaks,
        views: this.views,
        autoFilter: this.autoFilter,
        media: this._media.map(function (medium) {
          return medium.model;
        }),
        sheetProtection: this.sheetProtection,
        tables: Object.values(this.tables).map(function (table) {
          return table.model;
        }),
        conditionalFormattings: this.conditionalFormattings
      }; // =================================================
      // columns

      model.cols = Column.toModel(this.columns); // ==========================================================
      // Rows

      var rows = model.rows = [];
      var dimensions = model.dimensions = new Range();

      this._rows.forEach(function (row) {
        var rowModel = row && row.model;

        if (rowModel) {
          dimensions.expand(rowModel.number, rowModel.min, rowModel.number, rowModel.max);
          rows.push(rowModel);
        }
      }); // ==========================================================
      // Merges


      model.merges = [];

      _.each(this._merges, function (merge) {
        model.merges.push(merge.range);
      });

      return model;
    },
    set: function set(value) {
      var _this9 = this;

      this.name = value.name;
      this._columns = Column.fromModel(this, value.cols);

      this._parseRows(value);

      this._parseMergeCells(value);

      this.dataValidations = new DataValidations(value.dataValidations);
      this.properties = value.properties;
      this.pageSetup = value.pageSetup;
      this.headerFooter = value.headerFooter;
      this.views = value.views;
      this.autoFilter = value.autoFilter;
      this._media = value.media.map(function (medium) {
        return new Image(_this9, medium);
      });
      this.sheetProtection = value.sheetProtection;
      this.tables = value.tables.reduce(function (tables, table) {
        var t = new Table();
        t.model = table;
        tables[table.name] = t;
        return tables;
      }, {});
      this.conditionalFormattings = value.conditionalFormattings;
    }
  }]);

  return Worksheet;
}();

module.exports = Worksheet;

},{"../utils/col-cache":19,"../utils/encryptor":20,"../utils/under-dash":25,"./column":4,"./data-validations":5,"./enums":7,"./image":8,"./range":10,"./row":11,"./table":12}],15:[function(require,module,exports){
"use strict";

// this bundle is built without polyfill leaving apps the freedom to add their own
var ExcelJS = {
  Workbook: require('./doc/workbook')
}; // Object.assign mono-fill

var Enums = require('./doc/enums');

Object.keys(Enums).forEach(function (key) {
  ExcelJS[key] = Enums[key];
});
module.exports = ExcelJS;

},{"./doc/enums":7,"./doc/workbook":13}],16:[function(require,module,exports){
"use strict";

// eslint-disable-next-line node/no-unsupported-features/node-builtins
var textDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf-8');

function bufferToString(chunk) {
  if (typeof chunk === 'string') {
    return chunk;
  }

  if (textDecoder) {
    return textDecoder.decode(chunk);
  }

  return chunk.toString();
}

exports.bufferToString = bufferToString;

},{}],17:[function(require,module,exports){
"use strict";

// eslint-disable-next-line node/no-unsupported-features/node-builtins
var textEncoder = typeof TextEncoder === 'undefined' ? null : new TextEncoder('utf-8');

var _require = require('buffer'),
    Buffer = _require.Buffer;

function stringToBuffer(str) {
  if (typeof str !== 'string') {
    return str;
  }

  if (textEncoder) {
    return Buffer.from(textEncoder.encode(str).buffer);
  }

  return Buffer.from(str);
}

exports.stringToBuffer = stringToBuffer;

},{"buffer":216}],18:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _ = require('./under-dash');

var colCache = require('./col-cache');

var CellMatrix = /*#__PURE__*/function () {
  function CellMatrix(template) {
    _classCallCheck(this, CellMatrix);

    this.template = template;
    this.sheets = {};
  }

  _createClass(CellMatrix, [{
    key: "addCell",
    value: function addCell(addressStr) {
      this.addCellEx(colCache.decodeEx(addressStr));
    }
  }, {
    key: "getCell",
    value: function getCell(addressStr) {
      return this.findCellEx(colCache.decodeEx(addressStr), true);
    }
  }, {
    key: "findCell",
    value: function findCell(addressStr) {
      return this.findCellEx(colCache.decodeEx(addressStr), false);
    }
  }, {
    key: "findCellAt",
    value: function findCellAt(sheetName, rowNumber, colNumber) {
      var sheet = this.sheets[sheetName];
      var row = sheet && sheet[rowNumber];
      return row && row[colNumber];
    }
  }, {
    key: "addCellEx",
    value: function addCellEx(address) {
      if (address.top) {
        for (var row = address.top; row <= address.bottom; row++) {
          for (var col = address.left; col <= address.right; col++) {
            this.getCellAt(address.sheetName, row, col);
          }
        }
      } else {
        this.findCellEx(address, true);
      }
    }
  }, {
    key: "getCellEx",
    value: function getCellEx(address) {
      return this.findCellEx(address, true);
    }
  }, {
    key: "findCellEx",
    value: function findCellEx(address, create) {
      var sheet = this.findSheet(address, create);
      var row = this.findSheetRow(sheet, address, create);
      return this.findRowCell(row, address, create);
    }
  }, {
    key: "getCellAt",
    value: function getCellAt(sheetName, rowNumber, colNumber) {
      var sheet = this.sheets[sheetName] || (this.sheets[sheetName] = []);
      var row = sheet[rowNumber] || (sheet[rowNumber] = []);
      var cell = row[colNumber] || (row[colNumber] = {
        sheetName: sheetName,
        address: colCache.n2l(colNumber) + rowNumber,
        row: rowNumber,
        col: colNumber
      });
      return cell;
    }
  }, {
    key: "removeCellEx",
    value: function removeCellEx(address) {
      var sheet = this.findSheet(address);

      if (!sheet) {
        return;
      }

      var row = this.findSheetRow(sheet, address);

      if (!row) {
        return;
      }

      delete row[address.col];
    }
  }, {
    key: "forEachInSheet",
    value: function forEachInSheet(sheetName, callback) {
      var sheet = this.sheets[sheetName];

      if (sheet) {
        sheet.forEach(function (row, rowNumber) {
          if (row) {
            row.forEach(function (cell, colNumber) {
              if (cell) {
                callback(cell, rowNumber, colNumber);
              }
            });
          }
        });
      }
    }
  }, {
    key: "forEach",
    value: function forEach(callback) {
      var _this = this;

      _.each(this.sheets, function (sheet, sheetName) {
        _this.forEachInSheet(sheetName, callback);
      });
    }
  }, {
    key: "map",
    value: function map(callback) {
      var results = [];
      this.forEach(function (cell) {
        results.push(callback(cell));
      });
      return results;
    }
  }, {
    key: "findSheet",
    value: function findSheet(address, create) {
      var name = address.sheetName;

      if (this.sheets[name]) {
        return this.sheets[name];
      }

      if (create) {
        return this.sheets[name] = [];
      }

      return undefined;
    }
  }, {
    key: "findSheetRow",
    value: function findSheetRow(sheet, address, create) {
      var row = address.row;

      if (sheet && sheet[row]) {
        return sheet[row];
      }

      if (create) {
        return sheet[row] = [];
      }

      return undefined;
    }
  }, {
    key: "findRowCell",
    value: function findRowCell(row, address, create) {
      var col = address.col;

      if (row && row[col]) {
        return row[col];
      }

      if (create) {
        return row[col] = this.template ? Object.assign(address, JSON.parse(JSON.stringify(this.template))) : address;
      }

      return undefined;
    }
  }, {
    key: "spliceRows",
    value: function spliceRows(sheetName, start, numDelete, numInsert) {
      var sheet = this.sheets[sheetName];

      if (sheet) {
        var inserts = [];

        for (var i = 0; i < numInsert; i++) {
          inserts.push([]);
        }

        sheet.splice.apply(sheet, [start, numDelete].concat(inserts));
      }
    }
  }, {
    key: "spliceColumns",
    value: function spliceColumns(sheetName, start, numDelete, numInsert) {
      var sheet = this.sheets[sheetName];

      if (sheet) {
        var inserts = [];

        for (var i = 0; i < numInsert; i++) {
          inserts.push(null);
        }

        _.each(sheet, function (row) {
          row.splice.apply(row, [start, numDelete].concat(inserts));
        });
      }
    }
  }]);

  return CellMatrix;
}();

module.exports = CellMatrix;

},{"./col-cache":19,"./under-dash":25}],19:[function(require,module,exports){
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var addressRegex = /^[A-Z]+\d+$/; // =========================================================================
// Column Letter to Number conversion

var colCache = {
  _dictionary: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],
  _l2nFill: 0,
  _l2n: {},
  _n2l: [],
  _level: function _level(n) {
    if (n <= 26) {
      return 1;
    }

    if (n <= 26 * 26) {
      return 2;
    }

    return 3;
  },
  _fill: function _fill(level) {
    var c;
    var v;
    var l1;
    var l2;
    var l3;
    var n = 1;

    if (level >= 4) {
      throw new Error('Out of bounds. Excel supports columns from 1 to 16384');
    }

    if (this._l2nFill < 1 && level >= 1) {
      while (n <= 26) {
        c = this._dictionary[n - 1];
        this._n2l[n] = c;
        this._l2n[c] = n;
        n++;
      }

      this._l2nFill = 1;
    }

    if (this._l2nFill < 2 && level >= 2) {
      n = 27;

      while (n <= 26 + 26 * 26) {
        v = n - (26 + 1);
        l1 = v % 26;
        l2 = Math.floor(v / 26);
        c = this._dictionary[l2] + this._dictionary[l1];
        this._n2l[n] = c;
        this._l2n[c] = n;
        n++;
      }

      this._l2nFill = 2;
    }

    if (this._l2nFill < 3 && level >= 3) {
      n = 26 + 26 * 26 + 1;

      while (n <= 16384) {
        v = n - (26 * 26 + 26 + 1);
        l1 = v % 26;
        l2 = Math.floor(v / 26) % 26;
        l3 = Math.floor(v / (26 * 26));
        c = this._dictionary[l3] + this._dictionary[l2] + this._dictionary[l1];
        this._n2l[n] = c;
        this._l2n[c] = n;
        n++;
      }

      this._l2nFill = 3;
    }
  },
  l2n: function l2n(l) {
    if (!this._l2n[l]) {
      this._fill(l.length);
    }

    if (!this._l2n[l]) {
      throw new Error("Out of bounds. Invalid column letter: ".concat(l));
    }

    return this._l2n[l];
  },
  n2l: function n2l(n) {
    if (n < 1 || n > 16384) {
      throw new Error("".concat(n, " is out of bounds. Excel supports columns from 1 to 16384"));
    }

    if (!this._n2l[n]) {
      this._fill(this._level(n));
    }

    return this._n2l[n];
  },
  // =========================================================================
  // Address processing
  _hash: {},
  // check if value looks like an address
  validateAddress: function validateAddress(value) {
    if (!addressRegex.test(value)) {
      throw new Error("Invalid Address: ".concat(value));
    }

    return true;
  },
  // convert address string into structure
  decodeAddress: function decodeAddress(value) {
    var addr = value.length < 5 && this._hash[value];

    if (addr) {
      return addr;
    }

    var hasCol = false;
    var col = '';
    var colNumber = 0;
    var hasRow = false;
    var row = '';
    var rowNumber = 0;

    for (var i = 0, char; i < value.length; i++) {
      char = value.charCodeAt(i); // col should before row

      if (!hasRow && char >= 65 && char <= 90) {
        // 65 = 'A'.charCodeAt(0)
        // 90 = 'Z'.charCodeAt(0)
        hasCol = true;
        col += value[i]; // colNumber starts from 1

        colNumber = colNumber * 26 + char - 64;
      } else if (char >= 48 && char <= 57) {
        // 48 = '0'.charCodeAt(0)
        // 57 = '9'.charCodeAt(0)
        hasRow = true;
        row += value[i]; // rowNumber starts from 0

        rowNumber = rowNumber * 10 + char - 48;
      } else if (hasRow && hasCol && char !== 36) {
        // 36 = '$'.charCodeAt(0)
        break;
      }
    }

    if (!hasCol) {
      colNumber = undefined;
    } else if (colNumber > 16384) {
      throw new Error("Out of bounds. Invalid column letter: ".concat(col));
    }

    if (!hasRow) {
      rowNumber = undefined;
    } // in case $row$col


    value = col + row;
    var address = {
      address: value,
      col: colNumber,
      row: rowNumber,
      $col$row: "$".concat(col, "$").concat(row)
    }; // mem fix - cache only the tl 100x100 square

    if (colNumber <= 100 && rowNumber <= 100) {
      this._hash[value] = address;
      this._hash[address.$col$row] = address;
    }

    return address;
  },
  // convert r,c into structure (if only 1 arg, assume r is address string)
  getAddress: function getAddress(r, c) {
    if (c) {
      var address = this.n2l(c) + r;
      return this.decodeAddress(address);
    }

    return this.decodeAddress(r);
  },
  // convert [address], [tl:br] into address structures
  decode: function decode(value) {
    var parts = value.split(':');

    if (parts.length === 2) {
      var tl = this.decodeAddress(parts[0]);
      var br = this.decodeAddress(parts[1]);
      var result = {
        top: Math.min(tl.row, br.row),
        left: Math.min(tl.col, br.col),
        bottom: Math.max(tl.row, br.row),
        right: Math.max(tl.col, br.col)
      }; // reconstruct tl, br and dimensions

      result.tl = this.n2l(result.left) + result.top;
      result.br = this.n2l(result.right) + result.bottom;
      result.dimensions = "".concat(result.tl, ":").concat(result.br);
      return result;
    }

    return this.decodeAddress(value);
  },
  // convert [sheetName!][$]col[$]row[[$]col[$]row] into address or range structures
  decodeEx: function decodeEx(value) {
    var groups = value.match(/(?:(?:(?:'((?:[^']|'')*)')|([^'^ !]*))!)?(.*)/);
    var sheetName = groups[1] || groups[2]; // Qouted and unqouted groups

    var reference = groups[3]; // Remaining address

    var parts = reference.split(':');

    if (parts.length > 1) {
      var tl = this.decodeAddress(parts[0]);
      var br = this.decodeAddress(parts[1]);
      var top = Math.min(tl.row, br.row);
      var left = Math.min(tl.col, br.col);
      var bottom = Math.max(tl.row, br.row);
      var right = Math.max(tl.col, br.col);
      tl = this.n2l(left) + top;
      br = this.n2l(right) + bottom;
      return {
        top: top,
        left: left,
        bottom: bottom,
        right: right,
        sheetName: sheetName,
        tl: {
          address: tl,
          col: left,
          row: top,
          $col$row: "$".concat(this.n2l(left), "$").concat(top),
          sheetName: sheetName
        },
        br: {
          address: br,
          col: right,
          row: bottom,
          $col$row: "$".concat(this.n2l(right), "$").concat(bottom),
          sheetName: sheetName
        },
        dimensions: "".concat(tl, ":").concat(br)
      };
    }

    if (reference.startsWith('#')) {
      return sheetName ? {
        sheetName: sheetName,
        error: reference
      } : {
        error: reference
      };
    }

    var address = this.decodeAddress(reference);
    return sheetName ? _objectSpread({
      sheetName: sheetName
    }, address) : address;
  },
  // convert row,col into address string
  encodeAddress: function encodeAddress(row, col) {
    return colCache.n2l(col) + row;
  },
  // convert row,col into string address or t,l,b,r into range
  encode: function encode() {
    switch (arguments.length) {
      case 2:
        return colCache.encodeAddress(arguments[0], arguments[1]);

      case 4:
        return "".concat(colCache.encodeAddress(arguments[0], arguments[1]), ":").concat(colCache.encodeAddress(arguments[2], arguments[3]));

      default:
        throw new Error('Can only encode with 2 or 4 arguments');
    }
  },
  // return true if address is contained within range
  inRange: function inRange(range, address) {
    var _range = _slicedToArray(range, 5),
        left = _range[0],
        top = _range[1],
        right = _range[3],
        bottom = _range[4];

    var _address = _slicedToArray(address, 2),
        col = _address[0],
        row = _address[1];

    return col >= left && col <= right && row >= top && row <= bottom;
  }
};
module.exports = colCache;

},{}],20:[function(require,module,exports){
(function (Buffer){
'use strict';

var crypto = require('crypto');

var Encryptor = {
  /**
   * Calculate a hash of the concatenated buffers with the given algorithm.
   * @param {string} algorithm - The hash algorithm.
   * @returns {Buffer} The hash
   */
  hash: function hash(algorithm) {
    var hash = crypto.createHash(algorithm);

    for (var _len = arguments.length, buffers = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      buffers[_key - 1] = arguments[_key];
    }

    hash.update(Buffer.concat(buffers));
    return hash.digest();
  },

  /**
   * Convert a password into an encryption key
   * @param {string} password - The password
   * @param {string} hashAlgorithm - The hash algoritm
   * @param {string} saltValue - The salt value
   * @param {number} spinCount - The spin count
   * @param {number} keyBits - The length of the key in bits
   * @param {Buffer} blockKey - The block key
   * @returns {Buffer} The encryption key
   */
  convertPasswordToHash: function convertPasswordToHash(password, hashAlgorithm, saltValue, spinCount) {
    hashAlgorithm = hashAlgorithm.toLowerCase();
    var hashes = crypto.getHashes();

    if (hashes.indexOf(hashAlgorithm) < 0) {
      throw new Error("Hash algorithm '".concat(hashAlgorithm, "' not supported!"));
    } // Password must be in unicode buffer


    var passwordBuffer = Buffer.from(password, 'utf16le'); // Generate the initial hash

    var key = this.hash(hashAlgorithm, Buffer.from(saltValue, 'base64'), passwordBuffer); // Now regenerate until spin count

    for (var i = 0; i < spinCount; i++) {
      var iterator = Buffer.alloc(4); // this is the 'special' element of Excel password hashing
      // that stops us from using crypto.pbkdf2()

      iterator.writeUInt32LE(i, 0);
      key = this.hash(hashAlgorithm, key, iterator);
    }

    return key.toString('base64');
  },

  /**
   * Generates cryptographically strong pseudo-random data.
   * @param size The size argument is a number indicating the number of bytes to generate.
   */
  randomBytes: function randomBytes(size) {
    return crypto.randomBytes(size);
  }
};
module.exports = Encryptor;

}).call(this,require("buffer").Buffer)

},{"buffer":216,"crypto":226}],21:[function(require,module,exports){
"use strict";

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var _require = require('saxes'),
    SaxesParser = _require.SaxesParser;

var _require2 = require('readable-stream'),
    PassThrough = _require2.PassThrough;

var _require3 = require('./browser-buffer-decode'),
    bufferToString = _require3.bufferToString;

module.exports = /*#__PURE__*/function () {
  var _ref = _wrapAsyncGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(iterable) {
    var saxesParser, error, events, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // TODO: Remove once node v8 is deprecated
            // Detect and upgrade old streams
            if (iterable.pipe && !iterable[Symbol.asyncIterator]) {
              iterable = iterable.pipe(new PassThrough());
            }

            saxesParser = new SaxesParser();
            saxesParser.on('error', function (err) {
              error = err;
            });
            events = [];
            saxesParser.on('opentag', function (value) {
              return events.push({
                eventType: 'opentag',
                value: value
              });
            });
            saxesParser.on('text', function (value) {
              return events.push({
                eventType: 'text',
                value: value
              });
            });
            saxesParser.on('closetag', function (value) {
              return events.push({
                eventType: 'closetag',
                value: value
              });
            });
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 9;
            _iterator = _asyncIterator(iterable);

          case 11:
            _context.next = 13;
            return _awaitAsyncGenerator(_iterator.next());

          case 13:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 17;
            return _awaitAsyncGenerator(_step.value);

          case 17:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 29;
              break;
            }

            chunk = _value;
            saxesParser.write(bufferToString(chunk)); // saxesParser.write and saxesParser.on() are synchronous,
            // so we can only reach the below line once all events have been emitted

            if (!error) {
              _context.next = 23;
              break;
            }

            throw error;

          case 23:
            _context.next = 25;
            return events;

          case 25:
            events = [];

          case 26:
            _iteratorNormalCompletion = true;
            _context.next = 11;
            break;

          case 29:
            _context.next = 35;
            break;

          case 31:
            _context.prev = 31;
            _context.t0 = _context["catch"](9);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 35:
            _context.prev = 35;
            _context.prev = 36;

            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {
              _context.next = 40;
              break;
            }

            _context.next = 40;
            return _awaitAsyncGenerator(_iterator.return());

          case 40:
            _context.prev = 40;

            if (!_didIteratorError) {
              _context.next = 43;
              break;
            }

            throw _iteratorError;

          case 43:
            return _context.finish(40);

          case 44:
            return _context.finish(35);

          case 45:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[9, 31, 35, 45], [36,, 40, 44]]);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

},{"./browser-buffer-decode":16,"readable-stream":382,"saxes":386}],22:[function(require,module,exports){
"use strict";

var colCache = require('./col-cache'); // const cellRefRegex = /(([a-z_\-0-9]*)!)?[$]?([a-z]+)[$]?([1-9][0-9]*)/i;


var replacementCandidateRx = /(([a-z_\-0-9]*)!)?([a-z0-9_$]{2,})([(])?/gi;
var CRrx = /^([$])?([a-z]+)([$])?([1-9][0-9]*)$/i;

function slideFormula(formula, fromCell, toCell) {
  var offset = colCache.decode(fromCell);
  var to = colCache.decode(toCell);
  return formula.replace(replacementCandidateRx, function (refMatch, sheet, sheetMaybe, addrPart, trailingParen) {
    if (trailingParen) {
      return refMatch;
    }

    var match = CRrx.exec(addrPart);

    if (match) {
      var colDollar = match[1];
      var colStr = match[2].toUpperCase();
      var rowDollar = match[3];
      var rowStr = match[4];

      if (colStr.length > 3 || colStr.length === 3 && colStr > 'XFD') {
        // > XFD is the highest col number in excel 2007 and beyond, so this is a named range
        return refMatch;
      }

      var col = colCache.l2n(colStr);
      var row = parseInt(rowStr, 10);

      if (!colDollar) {
        col += to.col - offset.col;
      }

      if (!rowDollar) {
        row += to.row - offset.row;
      }

      var res = (sheet || '') + (colDollar || '') + colCache.n2l(col) + (rowDollar || '') + row;
      return res;
    }

    return refMatch;
  });
}

module.exports = {
  slideFormula: slideFormula
};

},{"./col-cache":19}],23:[function(require,module,exports){
(function (process,Buffer){
"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/* eslint-disable max-classes-per-file */
var Stream = require('readable-stream');

var utils = require('./utils');

var StringBuf = require('./string-buf'); // =============================================================================
// data chunks - encapsulating incoming data


var StringChunk = /*#__PURE__*/function () {
  function StringChunk(data, encoding) {
    _classCallCheck(this, StringChunk);

    this._data = data;
    this._encoding = encoding;
  }

  _createClass(StringChunk, [{
    key: "copy",
    // copy to target buffer
    value: function copy(target, targetOffset, offset, length) {
      return this.toBuffer().copy(target, targetOffset, offset, length);
    }
  }, {
    key: "toBuffer",
    value: function toBuffer() {
      if (!this._buffer) {
        this._buffer = Buffer.from(this._data, this._encoding);
      }

      return this._buffer;
    }
  }, {
    key: "length",
    get: function get() {
      return this.toBuffer().length;
    }
  }]);

  return StringChunk;
}();

var StringBufChunk = /*#__PURE__*/function () {
  function StringBufChunk(data) {
    _classCallCheck(this, StringBufChunk);

    this._data = data;
  }

  _createClass(StringBufChunk, [{
    key: "copy",
    // copy to target buffer
    value: function copy(target, targetOffset, offset, length) {
      // eslint-disable-next-line no-underscore-dangle
      return this._data._buf.copy(target, targetOffset, offset, length);
    }
  }, {
    key: "toBuffer",
    value: function toBuffer() {
      return this._data.toBuffer();
    }
  }, {
    key: "length",
    get: function get() {
      return this._data.length;
    }
  }]);

  return StringBufChunk;
}();

var BufferChunk = /*#__PURE__*/function () {
  function BufferChunk(data) {
    _classCallCheck(this, BufferChunk);

    this._data = data;
  }

  _createCl