"use strict";
/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/brace-style */
/* eslint-disable @typescript-eslint/explicit-member-accessibility */
/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/no-shadow */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-use-before-define */
/* eslint-disable max-classes-per-file */
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../projects/angular8-yandex-maps/src/lib/typings/yandex-maps/index.ts"],"names":[],"mappings":";AAAA,iDAAiD;AACjD,mDAAmD;AACnD,qEAAqE;AACrE,oDAAoD;AACpD,iDAAiD;AACjD,sDAAsD;AACtD,4DAA4D;AAC5D,yCAAyC","sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\r\n/* eslint-disable @typescript-eslint/brace-style */\r\n/* eslint-disable @typescript-eslint/explicit-member-accessibility */\r\n/* eslint-disable @typescript-eslint/no-namespace */\r\n/* eslint-disable @typescript-eslint/no-shadow */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/no-use-before-define */\r\n/* eslint-disable max-classes-per-file */\r\n\r\ntype Prefix<Type, P> = {\r\n  [Property in keyof Type as `${string & P}${Capitalize<string & Property>}`]: Type[Property];\r\n};\r\n\r\n/**\r\n * Type definitions for Yandex.Maps.\r\n * Due to inactivity the typings were copied and improved from the DefinitelyTyped repository.\r\n * Definitions by: Delagen <https://github.com/Delagen> / gastwork13 <https://github.com/gastwork13>.\r\n * @link https://www.npmjs.com/package/@types/yandex-maps\r\n * @link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/concepts/About.html\r\n */\r\ndeclare namespace ymaps {\r\n  interface IClassConstructor<T> {\r\n    superclass: any;\r\n\r\n    new (): T;\r\n  }\r\n\r\n  type ControlSingleKey =\r\n    | 'fullscreenControl'\r\n    | 'geolocationControl'\r\n    | 'routeEditor'\r\n    | 'rulerControl'\r\n    | 'searchControl'\r\n    | 'trafficControl'\r\n    | 'typeSelector'\r\n    | 'zoomControl'\r\n    | 'routeButtonControl'\r\n    | 'routePanelControl';\r\n\r\n  type ControlSetKey =\r\n    | 'smallMapDefaultSet'\r\n    | 'mediumMapDefaultSet'\r\n    | 'largeMapDefaultSet'\r\n    | 'default';\r\n\r\n  type ControlKey = ControlSingleKey | ControlSetKey;\r\n\r\n  type OverlayKey =\r\n    | 'default#placemark'\r\n    | 'default#pin'\r\n    | 'default#circle'\r\n    | 'default#rectangle'\r\n    | 'default#polyline'\r\n    | 'default#polygon'\r\n    | 'hotspot#placemark'\r\n    | 'hotspot#circle'\r\n    | 'hotspot#rectangle'\r\n    | 'hotspot#polyline'\r\n    | 'hotspot#polygon'\r\n    | 'html#balloon'\r\n    | 'html#hint'\r\n    | 'html#placemark'\r\n    | 'html#rectangle'\r\n    | string\r\n    | IClassConstructor<IOverlay>\r\n    | ((\r\n        geometry: IPixelLineStringGeometry,\r\n        data: IDataManager | object,\r\n        options: object,\r\n      ) => Promise<string | IClassConstructor<IOverlay>>);\r\n\r\n  type InteractivityModelKey =\r\n    | 'default#opaque'\r\n    | 'default#geoObject'\r\n    | 'default#layer'\r\n    | 'default#transparent'\r\n    | 'default#silent'\r\n    | string;\r\n\r\n  type PresetWithTextKey =\r\n    | 'islands#blueIcon'\r\n    | 'islands#darkGreenIcon'\r\n    | 'islands#redIcon'\r\n    | 'islands#violetIcon'\r\n    | 'islands#darkOrangeIcon'\r\n    | 'islands#blackIcon'\r\n    | 'islands#nightIcon'\r\n    | 'islands#yellowIcon'\r\n    | 'islands#darkBlueIcon'\r\n    | 'islands#greenIcon'\r\n    | 'islands#pinkIcon'\r\n    | 'islands#orangeIcon'\r\n    | 'islands#grayIcon'\r\n    | 'islands#lightBlueIcon'\r\n    | 'islands#brownIcon'\r\n    | 'islands#oliveIcon';\r\n\r\n  type PresetWithTextStretchyKey =\r\n    | 'islands#blueStretchyIcon'\r\n    | 'islands#darkGreenStretchyIcon'\r\n    | 'islands#redStretchyIcon'\r\n    | 'islands#violetStretchyIcon'\r\n    | 'islands#darkOrangeStretchyIcon'\r\n    | 'islands#blackStretchyIcon'\r\n    | 'islands#nightStretchyIcon'\r\n    | 'islands#yellowStretchyIcon'\r\n    | 'islands#darkBlueStretchyIcon'\r\n    | 'islands#greenStretchyIcon'\r\n    | 'islands#pinkStretchyIcon'\r\n    | 'islands#orangeStretchyIcon'\r\n    | 'islands#grayStretchyIcon'\r\n    | 'islands#lightBlueStretchyIcon'\r\n    | 'islands#brownStretchyIcon'\r\n    | 'islands#oliveStretchyIcon';\r\n\r\n  type PresetDotKey =\r\n    | 'islands#blueDotIcon'\r\n    | 'islands#darkGreenDotIcon'\r\n    | 'islands#redDotIcon'\r\n    | 'islands#violetDotIcon'\r\n    | 'islands#darkOrangeDotIcon'\r\n    | 'islands#blackDotIcon'\r\n    | 'islands#nightDotIcon'\r\n    | 'islands#yellowDotIcon'\r\n    | 'islands#darkBlueDotIcon'\r\n    | 'islands#greenDotIcon'\r\n    | 'islands#pinkDotIcon'\r\n    | 'islands#orangeDotIcon'\r\n    | 'islands#grayDotIcon'\r\n    | 'islands#lightBlueDotIcon'\r\n    | 'islands#brownDotIcon'\r\n    | 'islands#oliveDotIcon';\r\n\r\n  type PresetCircleKey =\r\n    | 'islands#blueCircleIcon'\r\n    | 'islands#darkGreenCircleIcon'\r\n    | 'islands#redCircleIcon'\r\n    | 'islands#violetCircleIcon'\r\n    | 'islands#darkOrangeCircleIcon'\r\n    | 'islands#blackCircleIcon'\r\n    | 'islands#nightCircleIcon'\r\n    | 'islands#yellowCircleIcon'\r\n    | 'islands#darkBlueCircleIcon'\r\n    | 'islands#greenCircleIcon'\r\n    | 'islands#pinkCircleIcon'\r\n    | 'islands#orangeCircleIcon'\r\n    | 'islands#grayCircleIcon'\r\n    | 'islands#lightBlueCircleIcon'\r\n    | 'islands#brownCircleIcon'\r\n    | 'islands#oliveCircleIcon';\r\n\r\n  type PresetCircleDotKey =\r\n    | 'islands#blueCircleDotIcon'\r\n    | 'islands#darkGreenCircleDotIcon'\r\n    | 'islands#redCircleDotIcon'\r\n    | 'islands#violetCircleDotIcon'\r\n    | 'islands#darkOrangeCircleDotIcon'\r\n    | 'islands#blackCircleDotIcon'\r\n    | 'islands#nightCircleDotIcon'\r\n    | 'islands#yellowCircleDotIcon'\r\n    | 'islands#darkBlueCircleDotIcon'\r\n    | 'islands#greenCircleDotIcon'\r\n    | 'islands#pinkCircleDotIcon'\r\n    | 'islands#orangeCircleDotIcon'\r\n    | 'islands#grayCircleDotIcon'\r\n    | 'islands#lightBlueCircleDotIcon'\r\n    | 'islands#brownCircleDotIcon'\r\n    | 'islands#oliveCircleDotIcon';\r\n\r\n  type PresetWithIconKey =\r\n    | 'islands#blueAirportIcon'\r\n    | 'islands#blueAttentionIcon'\r\n    | 'islands#blueAutoIcon'\r\n    | 'islands#blueBarIcon'\r\n    | 'islands#blueBarberIcon'\r\n    | 'islands#blueBeachIcon'\r\n    | 'islands#blueBicycleIcon'\r\n    | 'islands#blueBicycle2Icon'\r\n    | 'islands#blueBookIcon'\r\n    | 'islands#blueCarWashIcon'\r\n    | 'islands#blueChristianIcon'\r\n    | 'islands#blueCinemaIcon'\r\n    | 'islands#blueCircusIcon'\r\n    | 'islands#blueCourtIcon'\r\n    | 'islands#blueDeliveryIcon'\r\n    | 'islands#blueDiscountIcon'\r\n    | 'islands#blueDogIcon'\r\n    | 'islands#blueEducationIcon'\r\n    | 'islands#blueEntertainmentCenterIcon'\r\n    | 'islands#blueFactoryIcon'\r\n    | 'islands#blueFamilyIcon'\r\n    | 'islands#blueFashionIcon'\r\n    | 'islands#blueFoodIcon'\r\n    | 'islands#blueFuelStationIcon'\r\n    | 'islands#blueGardenIcon'\r\n    | 'islands#blueGovernmentIcon'\r\n    | 'islands#blueHeartIcon'\r\n    | 'islands#blueHomeIcon'\r\n    | 'islands#blueHotelIcon'\r\n    | 'islands#blueHydroIcon'\r\n    | 'islands#blueInfoIcon'\r\n    | 'islands#blueLaundryIcon'\r\n    | 'islands#blueLeisureIcon'\r\n    | 'islands#blueMassTransitIcon'\r\n    | 'islands#blueMedicalIcon'\r\n    | 'islands#blueMoneyIcon'\r\n    | 'islands#blueMountainIcon'\r\n    | 'islands#blueNightClubIcon'\r\n    | 'islands#blueObservationIcon'\r\n    | 'islands#blueParkIcon'\r\n    | 'islands#blueParkingIcon'\r\n    | 'islands#bluePersonIcon'\r\n    | 'islands#bluePocketIcon'\r\n    | 'islands#bluePoolIcon'\r\n    | 'islands#bluePostIcon'\r\n    | 'islands#blueRailwayIcon'\r\n    | 'islands#blueRapidTransitIcon'\r\n    | 'islands#blueRepairShopIcon'\r\n    | 'islands#blueRunIcon'\r\n    | 'islands#blueScienceIcon'\r\n    | 'islands#blueShoppingIcon'\r\n    | 'islands#blueSouvenirsIcon'\r\n    | 'islands#blueSportIcon'\r\n    | 'islands#blueStarIcon'\r\n    | 'islands#blueTheaterIcon'\r\n    | 'islands#blueToiletIcon'\r\n    | 'islands#blueUnderpassIcon'\r\n    | 'islands#blueVegetationIcon'\r\n    | 'islands#blueVideoIcon'\r\n    | 'islands#blueWasteIcon'\r\n    | 'islands#blueWaterParkIcon'\r\n    | 'islands#blueWaterwayIcon'\r\n    | 'islands#blueWorshipIcon'\r\n    | 'islands#blueZooIcon';\r\n\r\n  type PresetWithIconCircleKey =\r\n    | 'islands#blueHomeCircleIcon'\r\n    | 'islands#blueScienceCircleIcon'\r\n    | 'islands#blueAirportCircleIcon'\r\n    | 'islands#blueAttentionCircleIcon'\r\n    | 'islands#blueAutoCircleIcon'\r\n    | 'islands#blueBarCircleIcon'\r\n    | 'islands#blueBarberCircleIcon'\r\n    | 'islands#blueBeachCircleIcon'\r\n    | 'islands#blueBicycleCircleIcon'\r\n    | 'islands#blueBicycle2CircleIcon'\r\n    | 'islands#blueBookCircleIcon'\r\n    | 'islands#blueCarWashCircleIcon'\r\n    | 'islands#blueChristianCircleIcon'\r\n    | 'islands#blueCinemaCircleIcon'\r\n    | 'islands#blueCircusCircleIcon'\r\n    | 'islands#blueCourtCircleIcon'\r\n    | 'islands#blueDeliveryCircleIcon'\r\n    | 'islands#blueDiscountCircleIcon'\r\n    | 'islands#blueDogCircleIcon'\r\n    | 'islands#blueEducationCircleIcon'\r\n    | 'islands#blueEntertainmentCenterCircleIcon'\r\n    | 'islands#blueFactoryCircleIcon'\r\n    | 'islands#blueFamilyCircleIcon'\r\n    | 'islands#blueFashionCircleIcon'\r\n    | 'islands#blueFoodCircleIcon'\r\n    | 'islands#blueFuelStationCircleIcon'\r\n    | 'islands#blueGardenCircleIcon'\r\n    | 'islands#blueGovernmentCircleIcon'\r\n    | 'islands#blueHeartCircleIcon'\r\n    | 'islands#blueHotelCircleIcon'\r\n    | 'islands#blueHydroCircleIcon'\r\n    | 'islands#blueInfoCircleIcon'\r\n    | 'islands#blueLaundryCircleIcon'\r\n    | 'islands#blueLeisureCircleIcon'\r\n    | 'islands#blueMassTransitCircleIcon'\r\n    | 'islands#blueMedicalCircleIcon'\r\n    | 'islands#blueMoneyCircleIcon'\r\n    | 'islands#blueMountainCircleIcon'\r\n    | 'islands#blueNightClubCircleIcon'\r\n    | 'islands#blueObservationCircleIcon'\r\n    | 'islands#blueParkCircleIcon'\r\n    | 'islands#blueParkingCircleIcon'\r\n    | 'islands#bluePersonCircleIcon'\r\n    | 'islands#bluePocketCircleIcon'\r\n    | 'islands#bluePoolCircleIcon'\r\n    | 'islands#bluePostCircleIcon'\r\n    | 'islands#blueRailwayCircleIcon'\r\n    | 'islands#blueRapidTransitCircleIcon'\r\n    | 'islands#blueRepairShopCircleIcon'\r\n    | 'islands#blueRunCircleIcon'\r\n    | 'islands#blueShoppingCircleIcon'\r\n    | 'islands#blueSouvenirsCircleIcon'\r\n    | 'islands#blueSportCircleIcon'\r\n    | 'islands#blueStarCircleIcon'\r\n    | 'islands#blueTheaterCircleIcon'\r\n    | 'islands#blueToiletCircleIcon'\r\n    | 'islands#blueUnderpassCircleIcon'\r\n    | 'islands#blueVegetationCircleIcon'\r\n    | 'islands#blueVideoCircleIcon'\r\n    | 'islands#blueWasteCircleIcon'\r\n    | 'islands#blueWaterParkCircleIcon'\r\n    | 'islands#blueWaterwayCircleIcon'\r\n    | 'islands#blueWorshipCircleIcon'\r\n    | 'islands#blueZooCircleIcon';\r\n\r\n  type PresetPictogramKey = 'islands#geolocationIcon';\r\n\r\n  type PresetClusterKey =\r\n    | 'islands#blueClusterIcons'\r\n    | 'islands#invertedBlueClusterIcons'\r\n    | 'islands#redClusterIcons'\r\n    | 'islands#invertedRedClusterIcons'\r\n    | 'islands#darkOrangeClusterIcons'\r\n    | 'islands#invertedDarkOrangeClusterIcons'\r\n    | 'islands#nightClusterIcons'\r\n    | 'islands#invertedNightClusterIcons'\r\n    | 'islands#darkBlueClusterIcons'\r\n    | 'islands#invertedDarkBlueClusterIcons'\r\n    | 'islands#pinkClusterIcons'\r\n    | 'islands#invertedPinkClusterIcons'\r\n    | 'islands#grayClusterIcons'\r\n    | 'islands#invertedGrayClusterIcons'\r\n    | 'islands#brownClusterIcons'\r\n    | 'islands#invertedBrownClusterIcons'\r\n    | 'islands#darkGreenClusterIcons'\r\n    | 'islands#invertedDarkGreenClusterIcons'\r\n    | 'islands#violetClusterIcons'\r\n    | 'islands#invertedVioletClusterIcons'\r\n    | 'islands#blackClusterIcons'\r\n    | 'islands#invertedBlackClusterIcons'\r\n    | 'islands#yellowClusterIcons'\r\n    | 'islands#invertedYellowClusterIcons'\r\n    | 'islands#greenClusterIcons'\r\n    | 'islands#invertedGreenClusterIcons'\r\n    | 'islands#orangeClusterIcons'\r\n    | 'islands#invertedOrangeClusterIcons'\r\n    | 'islands#lightBlueClusterIcons'\r\n    | 'islands#invertedLightBlueClusterIcons'\r\n    | 'islands#oliveClusterIcons'\r\n    | 'islands#invertedOliveClusterIcons';\r\n\r\n  type PresetKey =\r\n    | PresetWithTextKey\r\n    | PresetWithTextStretchyKey\r\n    | PresetDotKey\r\n    | PresetCircleKey\r\n    | PresetCircleDotKey\r\n    | PresetWithIconKey\r\n    | PresetWithIconCircleKey\r\n    | PresetPictogramKey\r\n    | PresetClusterKey\r\n    | string;\r\n\r\n  type IconLayoutKey = 'default#image' | 'default#imageWithContent' | string;\r\n\r\n  type ClusterLayoutKey =\r\n    | 'cluster#balloonTwoColumns'\r\n    | 'cluster#balloonCarousel'\r\n    | 'cluster#balloonAccordion'\r\n    | string;\r\n\r\n  type ClusterContentLayoutKey =\r\n    | 'cluster#balloonTwoColumnsItemContent'\r\n    | 'cluster#balloonCarouselItemContent'\r\n    | 'cluster#balloonAccordionItemContent'\r\n    | string;\r\n\r\n  type EventMap = GlobalEventHandlersEventMap;\r\n\r\n  namespace behavior {\r\n    class DblClickZoom implements IBehavior {\r\n      constructor(options?: IDblClickZoomOptions);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      getParent(): IControlParent | null;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IDblClickZoomOptions extends IMapMarginOptions {\r\n      centering?: boolean;\r\n      duration?: number;\r\n    }\r\n\r\n    class Drag implements IBehavior {\r\n      constructor(options?: IDragOptions);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IDragOptions {\r\n      actionCursor?: string;\r\n      cursor?: string;\r\n      inertia?: boolean;\r\n      inertiaDuration?: number;\r\n      tremor?: number;\r\n    }\r\n\r\n    class LeftMouseButtonMagnifier implements IBehavior {\r\n      constructor(options?: ILeftMouseButtonMagnifierOptions);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface ILeftMouseButtonMagnifierOptions {\r\n      actionCursor?: string;\r\n      cursor?: string;\r\n      duration?: number;\r\n    }\r\n\r\n    class MultiTouch implements IBehavior {\r\n      constructor(options?: IMultiTouchOptions);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IMultiTouchOptions {\r\n      tremor?: number;\r\n    }\r\n\r\n    class RightMouseButtonMagnifier implements IBehavior {\r\n      constructor(options?: IRightMouseButtonMagnifierOptions);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IRightMouseButtonMagnifierOptions {\r\n      actionCursor?: string;\r\n      duration?: number;\r\n    }\r\n\r\n    class RouteEditor implements IBehavior {\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n\r\n      getRoute(): router.Route;\r\n\r\n      getState(): string;\r\n\r\n      setState(state: string | null): void;\r\n    }\r\n\r\n    class Ruler implements IBehavior {\r\n      constructor(options?: IRulerOptions);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n\r\n      close(): boolean;\r\n\r\n      getState(): string;\r\n\r\n      setState(state: string | null): void;\r\n    }\r\n\r\n    interface IRulerOptions {\r\n      balloonAutoPan?: boolean;\r\n    }\r\n\r\n    class ScrollZoom implements IBehavior {\r\n      constructor(options?: IScrollZoomOptions);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IScrollZoomOptions {\r\n      maximumDelta?: number;\r\n      speed?: number;\r\n    }\r\n\r\n    const storage: util.Storage;\r\n  }\r\n\r\n  namespace clusterer {\r\n    class Balloon implements IBalloonManager<Clusterer> {\r\n      constructor(clusterer: Clusterer);\r\n\r\n      events: IEventManager;\r\n\r\n      autoPan(): Promise<Clusterer>;\r\n\r\n      close(force?: boolean): Promise<Clusterer>;\r\n\r\n      destroy(): void;\r\n\r\n      getData(): object | null;\r\n\r\n      getOptions(): IOptionManager | null;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getPosition(): number[] | null;\r\n\r\n      isOpen(): boolean;\r\n\r\n      open(\r\n        position?: number[],\r\n        data?: object | string | HTMLElement,\r\n        options?: object,\r\n      ): Promise<Clusterer>;\r\n\r\n      setData(data: object | string | HTMLElement): Promise<Clusterer>;\r\n\r\n      setOptions(options: object): Promise<Clusterer>;\r\n\r\n      setPosition(position: number[]): Promise<Clusterer>;\r\n    }\r\n\r\n    class Hint implements IHintManager<Clusterer> {\r\n      constructor(clusterer: Clusterer);\r\n\r\n      events: IEventManager;\r\n\r\n      close(force?: boolean): Promise<Clusterer>;\r\n\r\n      destroy(): void;\r\n\r\n      getData(): object | null;\r\n\r\n      getOptions(): IOptionManager | null;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getPosition(): number[] | null;\r\n\r\n      isOpen(): boolean;\r\n\r\n      open(\r\n        position?: number[],\r\n        data?: object | string | HTMLElement,\r\n        options?: object,\r\n      ): Promise<Clusterer>;\r\n\r\n      setData(data: object | string | HTMLElement): Promise<Clusterer>;\r\n\r\n      setOptions(options: object): Promise<Clusterer>;\r\n\r\n      setPosition(position: number[]): Promise<Clusterer>;\r\n    }\r\n  }\r\n\r\n  namespace collection {\r\n    class Item implements IChildOnMap, ICustomizable, IEventEmitter, IParentOnMap {\r\n      constructor(options?: object);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n\r\n      getMap(): Map;\r\n\r\n      onAddToMap(map: Map): void;\r\n\r\n      onRemoveFromMap(oldMap: Map): void;\r\n    }\r\n  }\r\n\r\n  namespace control {\r\n    class Button implements ICustomizable, ISelectableControl {\r\n      constructor(parameters?: IButtonParameters | string);\r\n\r\n      data: data.Manager;\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      press: Event;\r\n\r\n      state: data.Manager;\r\n\r\n      deselect(): void;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      getMap(): Map;\r\n\r\n      getParent(): IControlParent | null;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      isSelected(): boolean;\r\n\r\n      select(): void;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IButtonParameters {\r\n      data?: {\r\n        content?: string;\r\n        image?: string;\r\n        title?: string;\r\n      };\r\n      options?: {\r\n        adjustMapMargin?: boolean;\r\n        float?: 'none' | 'left' | 'right';\r\n        floatIndex?: number;\r\n        layout?: IClassConstructor<ISelectableControlLayout> | string;\r\n        maxWidth?: number[][] | number[] | number;\r\n        position?: {\r\n          bottom?: number | string;\r\n          left?: number | string;\r\n          right?: number | string;\r\n          top?: number | string;\r\n        };\r\n        selectOnClick?: boolean;\r\n        size?: 'auto' | 'small' | 'medium' | 'large';\r\n        visible?: boolean;\r\n      };\r\n      state?: {\r\n        enabled?: boolean;\r\n        selected?: boolean;\r\n      };\r\n    }\r\n\r\n    class FullscreenControl extends Button {\r\n      constructor(parameters?: IFullscreenControlParameters);\r\n\r\n      enterFullscreen(): void;\r\n\r\n      exitFullscreen(): void;\r\n    }\r\n\r\n    interface IFullscreenControlParameters {\r\n      data?: {\r\n        title?: string;\r\n      };\r\n      options?: {\r\n        adjustMapMargin?: boolean;\r\n        float?: 'none' | 'left' | 'right';\r\n        floatIndex?: number;\r\n        layout?: IClassConstructor<ISelectableControlLayout> | string;\r\n        maxWidth?: number[][] | number[] | number;\r\n        position?: {\r\n          bottom?: number | string;\r\n          left?: number | string;\r\n          right?: number | string;\r\n          top?: number | string;\r\n        };\r\n        visible?: boolean;\r\n      };\r\n      state?: {\r\n        enabled?: boolean;\r\n        selected?: boolean;\r\n      };\r\n    }\r\n\r\n    class GeolocationControl extends Button {\r\n      constructor(parameters?: IGeolocationControlParameters);\r\n    }\r\n\r\n    interface IGeolocationControlParameters extends IButtonParameters {\r\n      data?: {\r\n        image?: string;\r\n        title?: string;\r\n      };\r\n      options?: {\r\n        adjustMapMargin?: boolean;\r\n        float?: 'none' | 'left' | 'right';\r\n        floatIndex?: number;\r\n        maxWidth?: number[][] | number[] | number;\r\n        noPlacemark?: boolean;\r\n        position?: {\r\n          bottom?: number | string;\r\n          left?: number | string;\r\n          right?: number | string;\r\n          top?: number | string;\r\n        };\r\n        visible?: boolean;\r\n        useMapMargin?: boolean;\r\n      };\r\n      state?: Record<string, any>;\r\n    }\r\n\r\n    class ListBox implements ICollection, IControl, ICustomizable {\r\n      constructor(parameters?: IListBoxParameters);\r\n\r\n      data: data.Manager;\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      state: data.Manager;\r\n\r\n      add(object: Record<string, any>): this;\r\n\r\n      collapse(): this;\r\n\r\n      expand(): this;\r\n\r\n      get(value: any): this;\r\n\r\n      getIterator(): IIterator;\r\n\r\n      getMap(): Map;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      isExpanded(): boolean;\r\n\r\n      remove(object: Record<string, any>): this;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IListBoxParameters {\r\n      data?: {\r\n        content?: string;\r\n        image?: string;\r\n        title?: string;\r\n      };\r\n      items?: IControl[];\r\n      options?: {\r\n        adjustMapMargin?: boolean;\r\n        collapseOnBlur?: boolean;\r\n        expandOnClick?: boolean;\r\n        float?: 'none' | 'left' | 'right';\r\n        floatIndex?: number;\r\n        layout?: IClassConstructor<ISelectableControlLayout> | string;\r\n        maxWidth?: number[][] | number[] | number;\r\n        popupFloat?: string;\r\n        position?: {\r\n          bottom?: number | string;\r\n          left?: number | string;\r\n          right?: number | string;\r\n          top?: number | string;\r\n        };\r\n        visible?: boolean;\r\n      };\r\n      state?: {\r\n        expanded?: boolean;\r\n        filters?: any;\r\n      };\r\n    }\r\n\r\n    class ListBoxItem implements ICustomizable, ISelectableControl {\r\n      constructor(parameters?: IListBoxItemParameters | string);\r\n\r\n      data: data.Manager;\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      state: data.Manager;\r\n\r\n      deselect(): void;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      getMap(): Map;\r\n\r\n      getParent(): IControlParent | null;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      isSelected(): boolean;\r\n\r\n      select(): void;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IListBoxItemParameters {\r\n      data?: {\r\n        content?: string;\r\n      };\r\n      options?: {\r\n        layout?: string | IClassConstructor<ISelectableControlLayout>;\r\n        selectableLayout?: string | IClassConstructor<ISelectableControlLayout>;\r\n        selectOnClick?: boolean;\r\n        separatorLayout?: string | IClassConstructor<ISelectableControlLayout>;\r\n        type?: 'selectable' | 'separator';\r\n        visible?: boolean;\r\n      };\r\n      state?: {\r\n        selected?: boolean;\r\n      };\r\n    }\r\n\r\n    class Manager {\r\n      constructor(map: Map, controls?: string[] | IControl[], options?: IManagerOptions);\r\n\r\n      events: event.Manager;\r\n\r\n      options: option.Manager;\r\n\r\n      state: data.Manager;\r\n\r\n      add(control: IControl | ControlKey, options?: Record<string, unknown>): this;\r\n\r\n      each(callback: (control: IControl) => void, context?: Record<string, any>): this;\r\n\r\n      get(index: number | string): any;\r\n\r\n      getChildElement(control: IControl): Promise<HTMLElement>;\r\n\r\n      getContainer(): HTMLElement;\r\n\r\n      getMap(): Map;\r\n\r\n      indexOf(childToFind: IControl | string): number;\r\n\r\n      remove(control: IControl | string): this;\r\n    }\r\n\r\n    interface IManagerOptions {\r\n      margin?: number;\r\n      pane?: IPane;\r\n      states?: string[];\r\n    }\r\n\r\n    class RouteButton implements IControl, ICustomizable {\r\n      constructor(parameters?: IRouteButtonParameters);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      routePanel: IRoutePanel;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IRouteButtonParameters {\r\n      lazy?: boolean;\r\n      options?: {\r\n        adjustMapMargin?: boolean;\r\n        autofocus?: boolean;\r\n        collapseOnBlur?: boolean;\r\n        float?: 'none' | 'left' | 'right';\r\n        floatIndex?: number;\r\n        popupAnimate?: boolean;\r\n        popupFloat?: 'auto' | 'left' | 'right';\r\n        popupWidth?: string;\r\n        position?: {\r\n          bottom?: number | string;\r\n          left?: number | string;\r\n          right?: number | string;\r\n          top?: number | string;\r\n        };\r\n        size?: 'auto' | 'small' | 'medium' | 'large';\r\n        visible?: boolean;\r\n      };\r\n      state?: {\r\n        expanded?: boolean;\r\n      };\r\n    }\r\n\r\n    class RouteEditor extends Button {\r\n      constructor(parameters?: IRouteEditorParameters);\r\n\r\n      getRoute(): router.Route;\r\n    }\r\n\r\n    interface IRouteEditorParameters {\r\n      data?: {\r\n        image?: string;\r\n        title?: string;\r\n      };\r\n      options?: {\r\n        adjustMapMargin?: boolean;\r\n        float?: 'none' | 'left' | 'right';\r\n        floatIndex?: number;\r\n        layout?: IClassConstructor<ISelectableControlLayout> | string;\r\n        maxWidth?: number[][] | number[] | number;\r\n        position?: {\r\n          bottom?: number | string;\r\n          left?: number | string;\r\n          right?: number | string;\r\n          top?: number | string;\r\n        };\r\n        visible?: boolean;\r\n      };\r\n      state?: Record<string, any>;\r\n    }\r\n\r\n    class RoutePanel implements IControl, ICustomizable {\r\n      constructor(parameters?: IRoutePanelParameters);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      routePanel: IRoutePanel;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IRoutePanelParameters {\r\n      options?: {\r\n        autofocus?: boolean;\r\n        float?: 'none' | 'left' | 'right';\r\n        floatIndex?: number;\r\n        maxWidth?: string;\r\n        position?: {\r\n          bottom?: number | string;\r\n          left?: number | string;\r\n          right?: number | string;\r\n          top?: number | string;\r\n        };\r\n        showHeader?: boolean;\r\n        title?: string;\r\n        visible?: boolean;\r\n        [key: string]: any;\r\n      };\r\n      state?: Record<string, any>;\r\n    }\r\n\r\n    class RulerControl extends Button {\r\n      constructor(parameters?: IRulerControlParameters);\r\n    }\r\n\r\n    interface IRulerControlParameters {\r\n      data?: Record<string, any>;\r\n      options?: {\r\n        adjustMapMargin?: boolean;\r\n        position?: {\r\n          bottom?: number | string;\r\n          left?: number | string;\r\n          right?: number | string;\r\n          top?: number | string;\r\n        };\r\n        scaleLine?: boolean;\r\n        visible?: boolean;\r\n      };\r\n      state?: Record<string, any>;\r\n    }\r\n\r\n    class SearchControl implements IControl, ICustomizable {\r\n      constructor(parameters?: ISearchControlParameters);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      state: data.Manager;\r\n\r\n      clear(): void;\r\n\r\n      getMap(): Map;\r\n\r\n      getParent(): IControlParent | null;\r\n\r\n      getRequestString(): string;\r\n\r\n      getResponseMetaData(): Record<string, any>;\r\n\r\n      getResult(index: number): vow.Promise;\r\n\r\n      getResultsArray(): Record<string, any>[];\r\n\r\n      getResultsCount(): number;\r\n\r\n      getSelectedIndex(): number;\r\n\r\n      hideResult(): void;\r\n\r\n      search(request: string): vow.Promise;\r\n\r\n      setParent(parent: IControlParent): this;\r\n\r\n      showResult(index: number): this;\r\n    }\r\n\r\n    interface ISearchControlParameters {\r\n      data?: Record<string, any>;\r\n      options?: {\r\n        adjustMapMargin?: boolean;\r\n        boundedBy?: number[][];\r\n        fitMaxWidth?: boolean;\r\n        float?: 'none' | 'left' | 'right';\r\n        floatIndex?: number;\r\n        formLayout?: string | IClassConstructor<ILayout>;\r\n        kind?: 'house' | 'street' | 'metro' | 'district' | 'locality';\r\n        layout?: string | IClassConstructor<ISearchControlLayout>;\r\n        maxWidth?: number[][] | number[] | number;\r\n        noCentering?: boolean;\r\n        noPlacemark?: boolean;\r\n        noPopup?: boolean;\r\n        noSelect?: boolean;\r\n        noSuggestPanel?: boolean;\r\n        placeholderContent?: string;\r\n        popupItemLayout?: string | IClassConstructor<ILayout>;\r\n        popupLayout?: string | IClassConstructor<ILayout>;\r\n        position?: {\r\n          bottom?: number | string;\r\n          left?: number | string;\r\n          right?: number | string;\r\n          top?: number | string;\r\n        };\r\n        provider?: IGeocodeProvider | 'yandex#map' | 'yandex#search';\r\n        searchCoordOrder?: 'latlong' | 'longlat';\r\n        size?: 'auto' | 'small' | 'medium' | 'large';\r\n        strictBounds?: boolean;\r\n        suppressYandexSearch?: boolean;\r\n        useMapBounds?: boolean;\r\n        zoomMargin?: number;\r\n        visible?: boolean;\r\n        useMapMargin?: boolean;\r\n      };\r\n      state?: Record<string, any>;\r\n    }\r\n\r\n    const storage: util.Storage;\r\n\r\n    class TrafficControl implements IControl, ICustomizable {\r\n      constructor(parameters?: ITrafficControlParameters);\r\n\r\n      data: data.Manager;\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      state: data.Manager;\r\n\r\n      collapse(): void;\r\n\r\n      expand(): void;\r\n\r\n      getMap(): Map;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      getProvider(key: TrafficControlProviderKey): ITrafficProvider;\r\n\r\n      hideTraffic(): void;\r\n\r\n      isExpanded(): boolean;\r\n\r\n      isTrafficShown(): boolean;\r\n\r\n      setParent(parent: IControlParent): this;\r\n\r\n      showTraffic(): void;\r\n    }\r\n\r\n    type TrafficControlProviderKey = 'traffic#actual' | 'traffic#archive';\r\n\r\n    interface ITrafficProvider extends ICustomizable, IEventEmitter {\r\n      getMap(): Map | null;\r\n\r\n      setMap(map: Map): void;\r\n    }\r\n\r\n    interface ITrafficControlParameters {\r\n      options?: {\r\n        adjustMapMargin?: boolean;\r\n        collapseOnBlur?: boolean;\r\n        float?: 'none' | 'left' | 'right';\r\n        floatIndex: number;\r\n        layout?: string | IClassConstructor<ITrafficControlLayout>;\r\n        maxWidth?: number | number[];\r\n        position?: {\r\n          bottom?: number | string;\r\n          left?: number | string;\r\n          right?: number | string;\r\n          top?: number | string;\r\n        };\r\n        size?: string;\r\n        visible?: boolean;\r\n      };\r\n      state?: {\r\n        providerKey?: TrafficControlProviderKey;\r\n        trafficShown?: boolean;\r\n      };\r\n    }\r\n\r\n    class TypeSelector extends ListBox {\r\n      constructor(parameters?: string[] | MapType[] | ITypeSelectorParameters);\r\n\r\n      addMapType(mapType: string | MapType, positionIndex?: number): this;\r\n\r\n      removeAllMapTypes(): this;\r\n\r\n      removeMapType(mapType: string | MapType): this;\r\n    }\r\n\r\n    interface ITypeSelectorParameters {\r\n      mapTypes?: string[] | MapType[];\r\n      options?: {\r\n        adjustMapMargin?: boolean;\r\n        collapseOnBlur?: boolean;\r\n        collapseTimeout?: number;\r\n        expandOnClick?: boolean;\r\n        float?: 'none' | 'left' | 'right';\r\n        floatIndex: number;\r\n        layout?: string | IClassConstructor<ISelectableControlLayout>;\r\n        maxWidth?: number | number[];\r\n        panoramasItemMode?: 'on' | 'ifMercator' | 'off';\r\n        position?: {\r\n          bottom?: number | string;\r\n          left?: number | string;\r\n          right?: number | string;\r\n          top?: number | string;\r\n        };\r\n        visible?: boolean;\r\n      };\r\n      state?: {\r\n        expanded: boolean;\r\n      };\r\n    }\r\n\r\n    class ZoomControl implements IControl, ICustomizable {\r\n      constructor(parameters?: IZoomControlParameters);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      getMap(): Map;\r\n\r\n      getParent(): IControlParent | null;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IZoomControlParameters {\r\n      data?: Record<string, any>;\r\n      options?: {\r\n        adjustMapMargin?: boolean;\r\n        layout?: string | IClassConstructor<IZoomControlLayout>;\r\n        position?: {\r\n          bottom?: number | string;\r\n          left?: number | string;\r\n          right?: number | string;\r\n          top?: number | string;\r\n        };\r\n        size?: string;\r\n        visible?: boolean;\r\n        zoomDuration?: number;\r\n        zoomStep?: number;\r\n      };\r\n      state?: Record<string, any>;\r\n    }\r\n  }\r\n\r\n  namespace data {\r\n    class Manager implements IDataManager, IFreezable {\r\n      constructor(data?: Record<string, any>);\r\n\r\n      events: IEventManager;\r\n\r\n      get(path: string, defaultValue?: any): any;\r\n\r\n      getAll(): Record<string, any>;\r\n\r\n      set(path: Record<string, any> | string, value?: any): this;\r\n\r\n      setAll(): this;\r\n\r\n      unset(path: string | string[]): this;\r\n\r\n      unsetAll(): this;\r\n\r\n      freeze(): IFreezable;\r\n\r\n      isFrozen(): boolean;\r\n\r\n      unfreeze(): IFreezable;\r\n\r\n      add(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: object | IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      getParent(): IEventManager | null;\r\n\r\n      group(): IEventGroup;\r\n\r\n      remove(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: object | IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      setParent(parent: IEventManager | null): this;\r\n\r\n      fire(type: string, eventObject: object | IEvent): this;\r\n    }\r\n  }\r\n\r\n  namespace domEvent {\r\n    interface Manager {\r\n      add<K extends keyof EventMap>(\r\n        htmlElement: HTMLElement | Document,\r\n        types: K,\r\n        callback: (event: EventMap[K]) => void,\r\n        context?: object,\r\n        capture?: boolean,\r\n      ): this;\r\n\r\n      add(\r\n        htmlElement: HTMLElement | Document,\r\n        types: string[] | string,\r\n        callback: (event: any) => void,\r\n        context?: object,\r\n        capture?: boolean,\r\n      ): this;\r\n\r\n      group(htmlElement: HTMLElement | Document, capture?: boolean): event.Group;\r\n\r\n      remove(\r\n        htmlElement: HTMLElement | Document,\r\n        types: string[] | string,\r\n        callback: ((event: any) => void) | string,\r\n        context?: object,\r\n        capture?: boolean,\r\n      ): this;\r\n    }\r\n\r\n    const manager: Manager;\r\n  }\r\n\r\n  namespace event {\r\n    class Group implements IEventGroup {\r\n      events: IEventManager;\r\n\r\n      add<K extends keyof EventMap>(\r\n        types: K,\r\n        callback: (event: EventMap[K] | IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n      add(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: object | IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      remove(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: object | IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      removeAll(): this;\r\n\r\n      getLength(): number;\r\n    }\r\n\r\n    class Manager<TargetGeometry = {}> implements IEventManager<TargetGeometry> {\r\n      constructor(params?: {\r\n        context?: object | undefined;\r\n        controllers?: IEventWorkflowController[] | undefined;\r\n        parent?: IEventManager | undefined;\r\n      });\r\n\r\n      add(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      getParent(): IEventManager | null;\r\n\r\n      group(): IEventGroup;\r\n\r\n      remove(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: object | IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      setParent(parent: IEventManager | null): this;\r\n\r\n      fire(type: string, eventObject: object | IEvent): this;\r\n\r\n      createEventObject(type: string, event: object, target: object): Event;\r\n\r\n      once(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: IEvent) => any,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n    }\r\n\r\n    class Mapper implements IEventTrigger {\r\n      constructor(\r\n        targetEventManager: IEventManager,\r\n        mappingTable: Record<string, ((event: IEvent) => IEvent | null) | boolean>,\r\n      );\r\n\r\n      fire(type: string, eventObject?: object | IEvent): this;\r\n    }\r\n  }\r\n\r\n  namespace geometry {\r\n    namespace base {\r\n      class LineString implements IBaseLineStringGeometry {\r\n        events: IEventManager;\r\n\r\n        static fromEncodedCoordinates(encodedCoordinates: string): geometry.LineString;\r\n\r\n        static toEncodedCoordinates(geometry: geometry.LineString): string;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getType(): string;\r\n\r\n        get(index: number): number[];\r\n\r\n        getChildGeometry(index: number): IPointGeometryAccess;\r\n\r\n        getClosest(anchorPosition: number[]): object;\r\n\r\n        getCoordinates(): number[][];\r\n\r\n        getLength(): number;\r\n\r\n        insert(index: number, coordinates: number[][]): ILineStringGeometryAccess;\r\n\r\n        remove(index: number): number[];\r\n\r\n        remove(\r\n          types: string[][] | string[] | string,\r\n          callback: (event: object | IEvent) => void,\r\n          context?: object,\r\n          priority?: number,\r\n        ): this;\r\n\r\n        set(index: number, coordinates: number[]): ILineStringGeometryAccess;\r\n\r\n        setCoordinates(coordinates: number[][]): ILineStringGeometryAccess;\r\n\r\n        splice(index: number, length: number): number[][];\r\n\r\n        freeze(): IFreezable;\r\n\r\n        isFrozen(): boolean;\r\n\r\n        unfreeze(): IFreezable;\r\n\r\n        add(\r\n          types: string[][] | string[] | string,\r\n          callback: (event: object | IEvent) => void,\r\n          context?: object,\r\n          priority?: number,\r\n        ): this;\r\n\r\n        getParent(): object | null;\r\n\r\n        group(): IEventGroup;\r\n\r\n        setParent(parent: IEventManager | null): this;\r\n\r\n        fire(type: string, eventObject: object | IEvent): this;\r\n      }\r\n\r\n      class Point implements IBasePointGeometry {\r\n        events: IEventManager;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getType(): string;\r\n\r\n        getCoordinates(): number[] | null;\r\n\r\n        setCoordinates(coordinates: number[] | null): this;\r\n      }\r\n\r\n      class Polygon implements IBasePointGeometry {\r\n        constructor(coordinates?: number[][][], fillRule?: 'evenOdd' | 'nonZero');\r\n\r\n        events: IEventManager;\r\n\r\n        static fromEncodedCoordinates(encodedCoordinates: string): Polygon;\r\n\r\n        static toEncodedCoordinates(geometry: Polygon): string;\r\n\r\n        contains(position: number[]): boolean;\r\n\r\n        freeze(): IFreezable;\r\n\r\n        get(index: number): number[][];\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getChildGeometry(index: number): ILinearRingGeometryAccess;\r\n\r\n        getClosest(anchorPosition: number[]): object;\r\n\r\n        getCoordinates(): number[] | null;\r\n\r\n        getFillRule(): 'evenOdd' | 'nonZero';\r\n\r\n        getLength(): number;\r\n\r\n        getType(): string;\r\n\r\n        insert(index: number, path: number[][]): IPolygonGeometryAccess;\r\n\r\n        isFrozen(): boolean;\r\n\r\n        remove(index: number): ILinearRingGeometryAccess;\r\n\r\n        set(index: number, path: number[][]): IPolygonGeometryAccess;\r\n\r\n        setCoordinates(coordinates: number[] | null): this;\r\n\r\n        setFillRule(fillRule: 'evenOdd' | 'nonZero'): IPolygonGeometryAccess;\r\n\r\n        splice(index: number, number: number): ILinearRingGeometryAccess[];\r\n\r\n        unfreeze(): IFreezable;\r\n      }\r\n    }\r\n\r\n    class Circle implements ICircleGeometry {\r\n      constructor(\r\n        coordinates?: number[] | null,\r\n        radius?: number,\r\n        options?: {\r\n          geodesic?: boolean;\r\n          pixelRendering?: string;\r\n          projection?: IProjection;\r\n        },\r\n      );\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      contains(position: number[]): boolean;\r\n\r\n      freeze(): IFreezable;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getClosest(anchorPosition: number[]): object;\r\n\r\n      getCoordinates(): number[] | null;\r\n\r\n      getMap(): Map | null;\r\n\r\n      getPixelGeometry(options?: object): IPixelGeometry;\r\n\r\n      getRadius(): number;\r\n\r\n      getType(): string;\r\n\r\n      isFrozen(): boolean;\r\n\r\n      setCoordinates(coordinates: number[] | null): ICircleGeometryAccess;\r\n\r\n      setMap(map: Map): void;\r\n\r\n      setRadius(radius: number): ICircleGeometryAccess;\r\n\r\n      unfreeze(): IFreezable;\r\n    }\r\n\r\n    class LineString implements ILineStringGeometry {\r\n      constructor(\r\n        coordinates?: number[][],\r\n        options?: {\r\n          coordRendering?: 'shortestPath' | 'straightPath';\r\n          geodesic?: boolean;\r\n          pixelRendering?: 'jumpy' | 'static';\r\n          projection?: IProjection;\r\n          simplification?: boolean;\r\n        },\r\n      );\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      static fromEncodedCoordinates(encodedCoordinates: string): LineString;\r\n\r\n      static toEncodedCoordinates(geometry: LineString): string;\r\n\r\n      getMap(): Map | null;\r\n\r\n      getPixelGeometry(options?: object): IPixelGeometry;\r\n\r\n      setMap(map: Map): void;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getType(): string;\r\n\r\n      get(index: number): number[];\r\n\r\n      getChildGeometry(index: number): IPointGeometryAccess;\r\n\r\n      getClosest(anchorPosition: number[]): object;\r\n\r\n      getCoordinates(): number[][];\r\n\r\n      getLength(): number;\r\n\r\n      insert(index: number, coordinates: number[][]): ILineStringGeometryAccess;\r\n\r\n      remove(index: number): number[];\r\n\r\n      remove(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: object | IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      set(index: number, coordinates: number[]): ILineStringGeometryAccess;\r\n\r\n      setCoordinates(coordinates: number[][]): ILineStringGeometryAccess;\r\n\r\n      splice(index: number, length: number): number[][];\r\n\r\n      freeze(): IFreezable;\r\n\r\n      isFrozen(): boolean;\r\n\r\n      unfreeze(): IFreezable;\r\n\r\n      add(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: object | IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      getParent(): object | null;\r\n\r\n      group(): IEventGroup;\r\n\r\n      setParent(parent: IEventManager | null): this;\r\n\r\n      fire(type: string, eventObject: object | IEvent): this;\r\n    }\r\n\r\n    namespace pixel {\r\n      class Circle implements IPixelCircleGeometry {\r\n        constructor(coordinates: number[] | null, radius: number, metaData?: object);\r\n\r\n        events: IEventManager;\r\n\r\n        equals(geometry: IPixelGeometry): boolean;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getCoordinates(): number[];\r\n\r\n        getMetaData(): object;\r\n\r\n        getRadius(): number;\r\n\r\n        getType(): string;\r\n\r\n        scale(factor: number): IPixelGeometry;\r\n\r\n        shift(offset: number[]): IPixelGeometry;\r\n      }\r\n\r\n      class LineString implements IPixelLineStringGeometry {\r\n        constructor(coordinates: number[][], metaData?: object);\r\n\r\n        events: IEventManager;\r\n\r\n        equals(geometry: IPixelGeometry): boolean;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getClosest(anchorPosition: number[]): object;\r\n\r\n        getCoordinates(): number[][];\r\n\r\n        getLength(): number;\r\n\r\n        getMetaData(): object;\r\n\r\n        getType(): string;\r\n\r\n        scale(factor: number): IPixelGeometry;\r\n\r\n        shift(offset: number[]): IPixelGeometry;\r\n      }\r\n\r\n      class MultiLineString implements IPixelMultiLineGeometry {\r\n        constructor(coordinates: number[][][], metaData?: object);\r\n\r\n        events: IEventManager;\r\n\r\n        equals(geometry: IPixelGeometry): boolean;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getClosest(anchorPosition: number[]): object;\r\n\r\n        getCoordinates(): number[][][];\r\n\r\n        getLength(): number;\r\n\r\n        getMetaData(): object;\r\n\r\n        getType(): string;\r\n\r\n        scale(factor: number): IPixelGeometry;\r\n\r\n        shift(offset: number[]): IPixelGeometry;\r\n      }\r\n\r\n      class MultiPolygon implements IPixelMultiPolygonGeometry {\r\n        constructor(\r\n          coordinates: number[][][][],\r\n          fillRule: 'evenOdd' | 'nonZero',\r\n          metaData?: object,\r\n        );\r\n\r\n        events: IEventManager;\r\n\r\n        contains(position: number[]): boolean;\r\n\r\n        equals(geometry: IPixelGeometry): boolean;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getClosest(anchorPosition: number[]): object;\r\n\r\n        getCoordinates(): number[][][][];\r\n\r\n        getFillRule(): 'evenOdd' | 'nonZero';\r\n\r\n        getLength(): number;\r\n\r\n        getMetaData(): object;\r\n\r\n        getType(): string;\r\n\r\n        scale(factor: number): IPixelGeometry;\r\n\r\n        shift(offset: number[]): IPixelGeometry;\r\n      }\r\n\r\n      class Point implements IPixelPointGeometry {\r\n        constructor(position: number[] | null, metaData?: object);\r\n\r\n        events: IEventManager;\r\n\r\n        equals(geometry: IPixelGeometry): boolean;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getCoordinates(): number[];\r\n\r\n        getMetaData(): object;\r\n\r\n        getType(): string;\r\n\r\n        scale(factor: number): IPixelGeometry;\r\n\r\n        shift(offset: number[]): IPixelGeometry;\r\n      }\r\n\r\n      class Polygon implements IPixelPolygonGeometry {\r\n        constructor(coordinates: number[][][], fillRule: 'evenOdd' | 'nonZero', metaData?: object);\r\n\r\n        events: IEventManager;\r\n\r\n        contains(position: number[]): boolean;\r\n\r\n        equals(geometry: IPixelGeometry): boolean;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getClosest(anchorPosition: number[]): object;\r\n\r\n        getCoordinates(): number[][][];\r\n\r\n        getFillRule(): 'evenOdd' | 'nonZero';\r\n\r\n        getLength(): number;\r\n\r\n        getMetaData(): object;\r\n\r\n        getType(): string;\r\n\r\n        scale(factor: number): IPixelGeometry;\r\n\r\n        shift(offset: number[]): IPixelGeometry;\r\n      }\r\n\r\n      class Rectangle implements IPixelRectangleGeometry {\r\n        constructor(coordinates: number[][] | null, metaData?: object);\r\n\r\n        events: IEventManager;\r\n\r\n        equals(geometry: IPixelGeometry): boolean;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getClosest(anchorPosition: number[]): object;\r\n\r\n        getCoordinates(): number[][];\r\n\r\n        getMetaData(): object;\r\n\r\n        getType(): string;\r\n\r\n        scale(factor: number): IPixelGeometry;\r\n\r\n        shift(offset: number[]): IPixelGeometry;\r\n      }\r\n    }\r\n\r\n    class Point implements IPointGeometry {\r\n      constructor(coordinates?: number[] | null);\r\n\r\n      options: IOptionManager;\r\n\r\n      events: IEventManager;\r\n\r\n      getMap(): Map | null;\r\n\r\n      getPixelGeometry(options?: object): IPixelGeometry;\r\n\r\n      setMap(map: Map): void;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getType(): string;\r\n\r\n      getCoordinates(): number[] | null;\r\n\r\n      setCoordinates(coordinates: number[] | null): this;\r\n    }\r\n\r\n    class Polygon implements IPolygonGeometry {\r\n      constructor(coordinates?: number[][][], fillRule?: 'evenOdd' | 'nonZero', options?: object);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      static fromEncodedCoordinates(encodedCoordinates: string): Polygon;\r\n\r\n      static toEncodedCoordinates(geometry: Polygon): string;\r\n\r\n      add(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: object | IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      contains(position: number[]): boolean;\r\n\r\n      fire(type: string, eventObject: object | IEvent): this;\r\n\r\n      freeze(): IFreezable;\r\n\r\n      get(index: number): number[][];\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getChildGeometry(index: number): ILinearRingGeometryAccess;\r\n\r\n      getClosest(anchorPosition: number[]): object;\r\n\r\n      getCoordinates(): number[][][];\r\n\r\n      getFillRule(): 'evenOdd' | 'nonZero';\r\n\r\n      getLength(): number;\r\n\r\n      getMap(): Map | null;\r\n\r\n      getParent(): object | null;\r\n\r\n      getPixelGeometry(options?: object): IPixelGeometry;\r\n\r\n      getType(): string;\r\n\r\n      group(): IEventGroup;\r\n\r\n      insert(index: number, path: number[][]): IPolygonGeometryAccess;\r\n\r\n      isFrozen(): boolean;\r\n\r\n      remove(index: number): ILinearRingGeometryAccess;\r\n\r\n      set(index: number, path: number[][]): IPolygonGeometryAccess;\r\n\r\n      setCoordinates(coordinates: number[][][]): IPolygonGeometryAccess;\r\n\r\n      setFillRule(fillRule: 'evenOdd' | 'nonZero'): IPolygonGeometryAccess;\r\n\r\n      setMap(map: Map): void;\r\n\r\n      setParent(parent: object | null): this;\r\n\r\n      splice(index: number, number: number): ILinearRingGeometryAccess[];\r\n\r\n      unfreeze(): IFreezable;\r\n    }\r\n\r\n    class Rectangle implements IRectangleGeometry {\r\n      constructor(\r\n        coordinates?: number[][] | null,\r\n        options?: {\r\n          coordRendering?: string;\r\n          geodesic?: boolean;\r\n          pixelRendering?: string;\r\n          projection?: IProjection;\r\n        },\r\n      );\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      contains(position: number[]): boolean;\r\n\r\n      freeze(): IFreezable;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getClosest(anchorPosition: number[]): object;\r\n\r\n      getCoordinates(): number[][];\r\n\r\n      getMap(): Map | null;\r\n\r\n      getPixelGeometry(options?: object): IPixelGeometry;\r\n\r\n      getType(): string;\r\n\r\n      isFrozen(): boolean;\r\n\r\n      setCoordinates(coordinates: number[][]): IRectangleGeometryAccess;\r\n\r\n      setMap(map: Map): void;\r\n\r\n      unfreeze(): IFreezable;\r\n    }\r\n  }\r\n\r\n  namespace geometryEditor {\r\n    class Circle implements IGeometryEditor {\r\n      constructor(geometry: ICircleGeometry, options?: object);\r\n\r\n      events: IEventManager;\r\n\r\n      geometry: IGeometry;\r\n\r\n      options: IOptionManager;\r\n\r\n      state: IDataManager;\r\n\r\n      startDrawing(): vow.Promise;\r\n\r\n      startEditing(): void;\r\n\r\n      stopDrawing(): vow.Promise;\r\n\r\n      stopEditing(): void;\r\n    }\r\n\r\n    class LineString implements IGeometryEditor {\r\n      constructor(geometry: ILineStringGeometry, options?: object);\r\n\r\n      events: IEventManager;\r\n\r\n      geometry: IGeometry;\r\n\r\n      options: IOptionManager;\r\n\r\n      state: IDataManager;\r\n\r\n      getModel(): vow.Promise;\r\n\r\n      getModelSync(): model.RootLineString | null;\r\n\r\n      getView(): vow.Promise;\r\n\r\n      getViewSync(): view.Path | null;\r\n\r\n      startDrawing(): vow.Promise;\r\n\r\n      startEditing(): vow.Promise;\r\n\r\n      startFraming(): vow.Promise;\r\n\r\n      stopDrawing(): void;\r\n\r\n      stopEditing(): void;\r\n\r\n      stopFraming(): void;\r\n    }\r\n\r\n    namespace model {\r\n      class ChildLinearRing extends ChildLineString {}\r\n\r\n      class ChildLineString implements IGeometryEditorChildModel {\r\n        editor: IGeometryEditor;\r\n\r\n        events: IEventManager;\r\n\r\n        geometry: IBaseGeometry;\r\n\r\n        destroy(): void;\r\n\r\n        getAllVerticesNumber(): number;\r\n\r\n        getEdgeModels(): Edge[];\r\n\r\n        getIndex(): number;\r\n\r\n        getParent(): IGeometryEditorModel;\r\n\r\n        getPixels(): number[];\r\n\r\n        getVertexModels(): ChildVertex[];\r\n\r\n        setIndex(index: number): void;\r\n\r\n        setPixels(pixels: number[]): void;\r\n\r\n        spliceVertices(start: number, deleteCount: number): number[][];\r\n      }\r\n\r\n      class ChildVertex implements IGeometryEditorChildModel {\r\n        editor: IGeometryEditor;\r\n\r\n        events: IEventManager;\r\n\r\n        geometry: IBaseGeometry;\r\n\r\n        destroy(): void;\r\n\r\n        getAllVerticesNumber(): number;\r\n\r\n        getIndex(): number;\r\n\r\n        getNextVertex(): ChildVertex | null;\r\n\r\n        getParent(): IGeometryEditorModel;\r\n\r\n        getPixels(): number[];\r\n\r\n        getPrevVertex(): ChildVertex | null;\r\n\r\n        setGlobalPixels(pixels: number[]): void;\r\n\r\n        setIndex(index: number): void;\r\n\r\n        setNextVertex(nextVertex: ChildVertex): void;\r\n\r\n        setPixels(pixels: number[]): void;\r\n\r\n        setPrevVertex(prevVertex: ChildVertex): void;\r\n      }\r\n\r\n      class Edge implements IGeometryEditorRootModel {\r\n        events: IEventManager;\r\n\r\n        destroy(): void;\r\n\r\n        getNextVertex(): ChildVertex | null;\r\n\r\n        getPixels(): number[];\r\n\r\n        getPrevVertex(): ChildVertex | null;\r\n\r\n        setNextVertex(nextVertex: ChildVertex): void;\r\n\r\n        setPrevVertex(prevVertex: ChildVertex): void;\r\n      }\r\n\r\n      class EdgeGeometry implements IGeometry {\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getMap(): Map | null;\r\n\r\n        getPixelGeometry(options?: object): IPixelGeometry;\r\n\r\n        getType(): string;\r\n\r\n        setMap(map: Map): void;\r\n      }\r\n\r\n      class RootLineString implements IGeometryEditorRootModel {\r\n        events: IEventManager;\r\n\r\n        destroy(): void;\r\n\r\n        getAllVerticesNumber(): number;\r\n\r\n        getPixels(): number[];\r\n\r\n        getVertexModels(): ChildVertex[];\r\n\r\n        spliceVertices(start: number, deleteCount: number): number[][];\r\n      }\r\n\r\n      class RootPolygon implements IGeometryEditorRootModel {\r\n        events: IEventManager;\r\n\r\n        destroy(): void;\r\n\r\n        getAllVerticesNumber(): number;\r\n\r\n        getPathModels(): ChildLinearRing[];\r\n\r\n        getPixels(): number[];\r\n\r\n        splicePaths(start: number, deleteCount: number): number[][];\r\n      }\r\n    }\r\n\r\n    class Point implements IGeometryEditor {\r\n      constructor(\r\n        geometry: IPointGeometry,\r\n        options?: {\r\n          dblClickHandler?: (ref: any) => void;\r\n          drawingCursor?: string;\r\n          drawOver?: boolean;\r\n        },\r\n      );\r\n\r\n      events: IEventManager;\r\n\r\n      geometry: IGeometry;\r\n\r\n      options: IOptionManager;\r\n\r\n      state: IDataManager;\r\n\r\n      startDrawing(): vow.Promise;\r\n\r\n      startEditing(): void;\r\n\r\n      stopDrawing(): vow.Promise;\r\n\r\n      stopEditing(): void;\r\n    }\r\n\r\n    class Polygon implements IGeometryEditor {\r\n      constructor(geometry: IPolygonGeometry, options: object);\r\n\r\n      events: IEventManager;\r\n\r\n      geometry: IGeometry;\r\n\r\n      options: IOptionManager;\r\n\r\n      state: IDataManager;\r\n\r\n      getModel(): vow.Promise;\r\n\r\n      getModelSync(): model.RootPolygon | null;\r\n\r\n      getView(): vow.Promise;\r\n\r\n      getViewSync(): view.MultiPath | null;\r\n\r\n      startDrawing(): vow.Promise;\r\n\r\n      startEditing(): vow.Promise;\r\n\r\n      startFraming(): vow.Promise;\r\n\r\n      stopDrawing(): void;\r\n\r\n      stopEditing(): void;\r\n\r\n      stopFraming(): void;\r\n    }\r\n\r\n    namespace view {\r\n      class Edge {\r\n        getPlacemark(): GeoObject;\r\n      }\r\n\r\n      class MultiPath {\r\n        getEdgePlacemarks(): GeoObjectCollection;\r\n\r\n        getPathViews(): Path[];\r\n\r\n        getVertexPlacemarks(): GeoObjectCollection;\r\n      }\r\n\r\n      class Path {\r\n        getEdgePlacemarks(): GeoObjectCollection;\r\n\r\n        getEdgeViews(): Edge[];\r\n\r\n        getVertexPlacemarks(): GeoObjectCollection;\r\n\r\n        getVertexViews(): Vertex[];\r\n      }\r\n\r\n      class Vertex {\r\n        getPlacemark(): GeoObject;\r\n      }\r\n    }\r\n  }\r\n\r\n  namespace geoObject {\r\n    class Balloon implements IBalloonManager<GeoObject> {\r\n      constructor(geoObject: GeoObject);\r\n\r\n      events: IEventManager;\r\n\r\n      autoPan(): Promise<GeoObject>;\r\n\r\n      close(force?: boolean): Promise<GeoObject>;\r\n\r\n      destroy(): void;\r\n\r\n      getData(): object | null;\r\n\r\n      getOptions(): IOptionManager | null;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getPosition(): number[] | null;\r\n\r\n      isOpen(): boolean;\r\n\r\n      open(\r\n        position?: number[],\r\n        data?: object | string | HTMLElement,\r\n        options?: object,\r\n      ): Promise<GeoObject>;\r\n\r\n      setData(data: object | string | HTMLElement): Promise<GeoObject>;\r\n\r\n      setOptions(options: object): Promise<GeoObject>;\r\n\r\n      setPosition(position: number[]): Promise<GeoObject>;\r\n    }\r\n\r\n    class Hint implements IHintManager<GeoObject> {\r\n      constructor(geoObject: GeoObject);\r\n\r\n      events: IEventManager;\r\n\r\n      close(force?: boolean): Promise<GeoObject>;\r\n\r\n      destroy(): void;\r\n\r\n      getData(): object | null;\r\n\r\n      getOptions(): IOptionManager | null;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getPosition(): number[] | null;\r\n\r\n      isOpen(): boolean;\r\n\r\n      open(\r\n        position?: number[],\r\n        data?: object | string | HTMLElement,\r\n        options?: object,\r\n      ): Promise<GeoObject>;\r\n\r\n      setData(data: object | string | HTMLElement): Promise<GeoObject>;\r\n\r\n      setOptions(options: object): Promise<GeoObject>;\r\n\r\n      setPosition(position: number[]): Promise<GeoObject>;\r\n    }\r\n\r\n    class Sequence implements IGeoObject, IGeoObjectSequence {\r\n      constructor(geoObject: GeoObject);\r\n\r\n      geometry: IGeometry | null;\r\n\r\n      properties: IDataManager;\r\n\r\n      state: IDataManager;\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n\r\n      getMap(): Map;\r\n\r\n      each(callback: (geoObject: IGeoObject) => void, context?: object): void;\r\n\r\n      get(index: number): IGeoObject;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getIterator(): IIterator;\r\n\r\n      getLength(): number;\r\n\r\n      getPixelBounds(): number[][] | null;\r\n\r\n      indexOf(geoObject: IGeoObject): number;\r\n    }\r\n  }\r\n\r\n  namespace layout {\r\n    namespace templateBased {\r\n      class Base implements ILayout {\r\n        constructor(data: object);\r\n\r\n        events: IEventManager;\r\n\r\n        destroy(): void;\r\n\r\n        getData(): object;\r\n\r\n        getParentElement(): HTMLElement;\r\n\r\n        getShape(): IShape | null;\r\n\r\n        isEmpty(): boolean;\r\n\r\n        setData(data: object): void;\r\n\r\n        setParentElement(parent: HTMLElement | null): this;\r\n\r\n        build(): void;\r\n\r\n        clear(): void;\r\n\r\n        onSublayoutSizeChange(sublayoutInfo: object, nodeSizeByContent: object): void;\r\n\r\n        rebuild(): void;\r\n      }\r\n    }\r\n\r\n    interface IImageOptions {\r\n      imageClipRect?: number[][] | undefined;\r\n      imageHref?: string | undefined;\r\n      imageOffset?: number[] | undefined;\r\n      imageSize?: number[] | undefined;\r\n      shape?: IShape | object | null | undefined;\r\n    }\r\n\r\n    type IImageOptionsWithIconPrefix = Prefix<IImageOptions, 'icon'>;\r\n\r\n    class Image implements ILayout {\r\n      constructor(data: { options?: IImageOptions });\r\n\r\n      events: IEventManager;\r\n\r\n      destroy(): void;\r\n\r\n      getData(): object;\r\n\r\n      getParentElement(): HTMLElement;\r\n\r\n      getShape(): IShape | null;\r\n\r\n      isEmpty(): boolean;\r\n\r\n      setData(data: object): void;\r\n\r\n      setParentElement(parent: HTMLElement | null): void;\r\n    }\r\n\r\n    class ImageWithContent extends Image {}\r\n\r\n    type IImageWithContentOptionsWithIconPrefix = Prefix<\r\n      IImageOptions & {\r\n        contentLayout?: IClassConstructor<ILayout> | string | undefined;\r\n        contentOffset?: number[] | undefined;\r\n        contentSize?: number[] | undefined;\r\n      },\r\n      'icon'\r\n    >;\r\n\r\n    class PieChart extends templateBased.Base {}\r\n\r\n    interface PieChartOptions {\r\n      pieChartCaptionMaxWidth?: number | undefined;\r\n      pieChartCoreFillStyle?: string | undefined;\r\n      pieChartCoreRadius?: number | (() => number) | undefined;\r\n      pieChartStrokeStyle?: string | undefined;\r\n      pieChartStrokeWidth?: number | undefined;\r\n    }\r\n\r\n    type IPieChartOptionsWithIconPrefix = Prefix<PieChartOptions, 'icon'>;\r\n\r\n    const storage: util.Storage;\r\n  }\r\n\r\n  namespace map {\r\n    namespace action {\r\n      class Manager implements IEventEmitter {\r\n        constructor(map: Map);\r\n\r\n        events: IEventManager;\r\n\r\n        breakTick(): void;\r\n\r\n        execute(action: IMapAction): void;\r\n\r\n        getCurrentState(): object;\r\n\r\n        getMap(): Map;\r\n\r\n        setCorrection(userFunction: () => void): void;\r\n\r\n        stop(): void;\r\n      }\r\n    }\r\n\r\n    namespace behavior {\r\n      class Manager implements ICustomizable, IEventEmitter, IParentOnMap {\r\n        constructor(map: Map, behaviors?: string[][] | string[], options?: object);\r\n\r\n        options: IOptionManager;\r\n\r\n        events: IEventManager;\r\n\r\n        getMap(): Map;\r\n\r\n        disable(behaviors: string[][] | string[] | string): this;\r\n\r\n        enable(behaviors: string[][] | string[] | string): this;\r\n\r\n        get(behaviorName: string): IBehavior;\r\n\r\n        isEnabled(behaviorName: string): boolean;\r\n      }\r\n    }\r\n\r\n    namespace layer {\r\n      class Manager implements ILayer, IMapObjectCollection {\r\n        constructor(\r\n          map: Map,\r\n          options?: {\r\n            trafficImageZIndex?: number;\r\n            trafficInfoZIndex?: number;\r\n            trafficJamZIndex?: number;\r\n          },\r\n        );\r\n\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        getParent(): null | IControlParent;\r\n\r\n        setParent(parent: IControlParent): this;\r\n\r\n        add(object: object): this;\r\n\r\n        each(callback: (layer: ILayer) => void, context?: object): void;\r\n\r\n        getIterator(): IIterator;\r\n\r\n        remove(object: object): this;\r\n\r\n        getMap(): Map;\r\n\r\n        getAll(): Array<Collection<Layer>>;\r\n      }\r\n    }\r\n\r\n    namespace margin {\r\n      class Accessor {\r\n        constructor(screenArea: object);\r\n\r\n        getArea(): object;\r\n\r\n        remove(): this;\r\n\r\n        setArea(screenArea: object): this;\r\n      }\r\n\r\n      class Manager {\r\n        constructor(map: Map);\r\n\r\n        addArea(screenArea: object): Accessor;\r\n\r\n        destroy(): this;\r\n\r\n        getMargin(): number[];\r\n\r\n        getOffset(): number[];\r\n\r\n        setDefaultMargin(margin: number[][] | number[] | number): void;\r\n      }\r\n    }\r\n\r\n    namespace pane {\r\n      class Manager {\r\n        constructor(map: Map);\r\n\r\n        append(key: string, pane: IPane): void;\r\n\r\n        destroy(): void;\r\n\r\n        get(key: string): IPane | null;\r\n\r\n        getLower(): string;\r\n\r\n        getUpper(): string;\r\n\r\n        insertBefore(key: string, pane: IPane, referenceKey: string): void;\r\n\r\n        remove(pane: IPane): void;\r\n      }\r\n    }\r\n\r\n    class Balloon implements IBalloonManager<Balloon> /* , IBalloonSharingManager */ {\r\n      constructor(map: Map);\r\n\r\n      events: IEventManager;\r\n\r\n      autoPan(): Promise<Balloon>;\r\n\r\n      close(force?: boolean): Promise<Balloon>;\r\n\r\n      destroy(): void;\r\n\r\n      getData(): object | null;\r\n\r\n      getOptions(): IOptionManager | null;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getPosition(): number[] | null;\r\n\r\n      isOpen(): boolean;\r\n\r\n      open(\r\n        position?: number[],\r\n        data?: object | string | HTMLElement,\r\n        options?: object,\r\n      ): Promise<Balloon>;\r\n\r\n      setData(data: object | string | HTMLElement): Promise<Balloon>;\r\n\r\n      setOptions(options: object): Promise<Balloon>;\r\n\r\n      setPosition(position: number[]): Promise<Balloon>;\r\n    }\r\n\r\n    class Container implements IDomEventEmitter {\r\n      constructor(parentElement: string | HTMLElement);\r\n\r\n      events: IEventManager;\r\n\r\n      enterFullscreen(): void;\r\n\r\n      exitFullscreen(): void;\r\n\r\n      fitToViewport(preservePixelPosition?: boolean): void;\r\n\r\n      getElement(): HTMLElement;\r\n\r\n      getOffset(): number[];\r\n\r\n      getParentElement(): HTMLElement;\r\n\r\n      getSize(): number[];\r\n\r\n      isFullscreen(): boolean;\r\n    }\r\n\r\n    class Converter {\r\n      constructor(map: Map);\r\n\r\n      globalToPage(globalPixelPoint: number[]): number[];\r\n\r\n      pageToGlobal(pagePixelPoint: number[]): number[];\r\n    }\r\n\r\n    class Copyrights {\r\n      constructor(map: Map);\r\n\r\n      add(\r\n        customCopyrights: string | HTMLElement | Array<string | HTMLElement>,\r\n      ): ICopyrightsAccessor;\r\n\r\n      addProvider(provider: ICopyrightsProvider): this;\r\n\r\n      get(point?: number[], zoom?: number): Promise<Array<string | HTMLElement>>;\r\n\r\n      getPromoLink(): string;\r\n\r\n      removeProvider(provider: ICopyrightsProvider): this;\r\n    }\r\n\r\n    class GeoObjects implements IGeoObjectCollection {\r\n      constructor(map: Map, options?: object);\r\n\r\n      options: IOptionManager;\r\n\r\n      events: IEventManager;\r\n\r\n      add(child: IGeoObject | ObjectManager | Clusterer, index?: number): this;\r\n\r\n      each(callback: (object: IGeoObject) => void, context?: object): void;\r\n\r\n      get(index: number): IGeoObject;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getIterator(): IIterator;\r\n\r\n      getLength(): number;\r\n\r\n      getPixelBounds(): number[][] | null;\r\n\r\n      indexOf(object: IGeoObject): number;\r\n\r\n      remove(child: IGeoObject | ObjectManager): this;\r\n\r\n      removeAll(): this;\r\n\r\n      set(index: number, child: IGeoObject): this;\r\n\r\n      splice(index: number, length: number): this;\r\n\r\n      getMap(): Map;\r\n    }\r\n\r\n    class Hint implements IHintManager<Hint> /* , IHintSharingManager */ {\r\n      constructor(map: Map);\r\n\r\n      events: IEventManager;\r\n\r\n      close(force?: boolean): Promise<Hint>;\r\n\r\n      destroy(): void;\r\n\r\n      getData(): object | null;\r\n\r\n      getOptions(): IOptionManager | null;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getPosition(): number[] | null;\r\n\r\n      isOpen(): boolean;\r\n\r\n      open(\r\n        position?: number[],\r\n        data?: object | string | HTMLElement,\r\n        options?: object,\r\n      ): Promise<Hint>;\r\n\r\n      setData(data: object | string | HTMLElement): Promise<Hint>;\r\n\r\n      setOptions(options: object): Promise<Hint>;\r\n\r\n      setPosition(position: number[]): Promise<Hint>;\r\n    }\r\n\r\n    class ZoomRange implements IEventEmitter {\r\n      constructor(map: Map, constraints: number[]);\r\n\r\n      events: IEventManager;\r\n\r\n      get(coords?: number[]): Promise<number[]>;\r\n\r\n      getCurrent(): number[];\r\n    }\r\n  }\r\n\r\n  namespace multiRouter {\r\n    namespace driving {\r\n      class Path implements IGeoObject {\r\n        geometry: IGeometry | null;\r\n\r\n        properties: data.Manager;\r\n\r\n        state: IDataManager;\r\n\r\n        model: PathModel;\r\n\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        getOverlay(): Promise<IOverlay | null>;\r\n\r\n        getOverlaySync(): IOverlay | null;\r\n\r\n        getParent(): object | null;\r\n\r\n        setParent(parent: object): this;\r\n\r\n        getMap(): Map;\r\n\r\n        getSegments(): GeoObjectCollection;\r\n      }\r\n\r\n      class PathModel implements IEventEmitter {\r\n        events: IEventManager;\r\n\r\n        properties: data.Manager;\r\n\r\n        route: RouteModel;\r\n\r\n        destroy(): void;\r\n\r\n        getSegments(): SegmentModel[];\r\n\r\n        getType(): string;\r\n\r\n        update(pathJson: object): void;\r\n      }\r\n\r\n      class Route implements IGeoObject {\r\n        geometry: IGeometry | null;\r\n\r\n        properties: IDataManager;\r\n\r\n        state: IDataManager;\r\n\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        balloon: geoObject.Balloon;\r\n\r\n        getOverlay(): Promise<IOverlay | null>;\r\n\r\n        getOverlaySync(): IOverlay | null;\r\n\r\n        getParent(): object | null;\r\n\r\n        setParent(parent: object): this;\r\n\r\n        getMap(): Map;\r\n\r\n        getPaths(): GeoObjectCollection;\r\n      }\r\n\r\n      class RouteModel implements IEventEmitter {\r\n        events: IEventManager;\r\n\r\n        multiRoute: MultiRouteModel;\r\n\r\n        properties: data.Manager;\r\n\r\n        destroy(): void;\r\n\r\n        getPaths(): PathModel[];\r\n\r\n        update(routeJson: object): void;\r\n\r\n        getType(): string;\r\n      }\r\n\r\n      class Segment implements IGeoObject {\r\n        geometry: IGeometry | null;\r\n\r\n        properties: data.Manager;\r\n\r\n        state: IDataManager;\r\n\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        getOverlay(): Promise<IOverlay | null>;\r\n\r\n        getOverlaySync(): IOverlay | null;\r\n\r\n        getParent(): object | null;\r\n\r\n        setParent(parent: object): this;\r\n\r\n        getMap(): Map;\r\n      }\r\n\r\n      class SegmentModel implements IEventEmitter {\r\n        events: IEventManager;\r\n\r\n        geometry: geometry.base.LineString;\r\n\r\n        path: PathModel;\r\n\r\n        destroy(): void;\r\n\r\n        getType(): string;\r\n\r\n        getViaPoints(): ViaPointModel[];\r\n\r\n        update(segmentJson: object): void;\r\n      }\r\n    }\r\n\r\n    namespace masstransit {\r\n      class Path implements IGeoObject {\r\n        geometry: IGeometry | null;\r\n\r\n        properties: data.Manager;\r\n\r\n        state: IDataManager;\r\n\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        model: PathModel;\r\n\r\n        getOverlay(): Promise<IOverlay | null>;\r\n\r\n        getOverlaySync(): IOverlay | null;\r\n\r\n        getParent(): object | null;\r\n\r\n        setParent(parent: object): this;\r\n\r\n        getMap(): Map;\r\n\r\n        getSegmentMarkers(): GeoObjectCollection;\r\n\r\n        getSegments(): GeoObjectCollection;\r\n      }\r\n\r\n      class PathModel implements IEventEmitter {\r\n        events: IEventManager;\r\n\r\n        properties: data.Manager;\r\n\r\n        route: RouteModel;\r\n\r\n        destroy(): void;\r\n\r\n        getSegments(): Array<TransferSegmentModel | TransportSegmentModel | WalkSegmentModel>;\r\n\r\n        getType(): string;\r\n\r\n        update(pathJson: object): void;\r\n      }\r\n\r\n      class Route implements IGeoObject {\r\n        geometry: IGeometry | null;\r\n\r\n        properties: data.Manager;\r\n\r\n        model: RouteModel;\r\n\r\n        state: IDataManager;\r\n\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        balloon: geoObject.Balloon;\r\n\r\n        getOverlay(): Promise<IOverlay | null>;\r\n\r\n        getOverlaySync(): IOverlay | null;\r\n\r\n        getParent(): object | null;\r\n\r\n        setParent(parent: object): this;\r\n\r\n        getMap(): Map;\r\n\r\n        getPaths(): GeoObjectCollection;\r\n      }\r\n\r\n      class RouteModel implements IEventEmitter {\r\n        events: IEventManager;\r\n\r\n        multiRoute: MultiRouteModel;\r\n\r\n        properties: data.Manager;\r\n\r\n        destroy(): void;\r\n\r\n        getPaths(): PathModel[];\r\n\r\n        getType(): string;\r\n\r\n        update(routeJson: object): void;\r\n      }\r\n\r\n      class StopModel implements IEventEmitter {\r\n        events: IEventManager;\r\n\r\n        geometry: geometry.base.Point;\r\n\r\n        properties: data.Manager;\r\n\r\n        segment: TransportSegmentModel;\r\n\r\n        update(stopJson: object): void;\r\n      }\r\n\r\n      class TransferSegment implements IGeoObject {\r\n        geometry: IGeometry | null;\r\n\r\n        properties: data.Manager;\r\n\r\n        state: IDataManager;\r\n\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        model: TransferSegmentModel;\r\n\r\n        getOverlay(): Promise<IOverlay | null>;\r\n\r\n        getOverlaySync(): IOverlay | null;\r\n\r\n        getParent(): object | null;\r\n\r\n        setParent(parent: object): this;\r\n\r\n        getMap(): Map;\r\n      }\r\n\r\n      class TransferSegmentModel implements IEventEmitter {\r\n        events: IEventManager;\r\n\r\n        geometry: geometry.base.LineString;\r\n\r\n        path: PathModel;\r\n\r\n        properties: data.Manager;\r\n\r\n        destroy(segmentJson: object): void;\r\n\r\n        getType(): string;\r\n      }\r\n\r\n      class TransportSegment implements IGeoObject {\r\n        geometry: IGeometry | null;\r\n\r\n        properties: data.Manager;\r\n\r\n        state: IDataManager;\r\n\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        model: TransportSegmentModel;\r\n\r\n        getOverlay(): Promise<IOverlay | null>;\r\n\r\n        getOverlaySync(): IOverlay | null;\r\n\r\n        getParent(): object | null;\r\n\r\n        setParent(parent: object): this;\r\n\r\n        getMap(): Map;\r\n      }\r\n\r\n      class TransportSegmentModel implements IEventEmitter {\r\n        events: IEventManager;\r\n\r\n        geometry: geometry.base.LineString;\r\n\r\n        path: PathModel;\r\n\r\n        properties: data.Manager;\r\n\r\n        destroy(): void;\r\n\r\n        getStops(): StopModel[];\r\n\r\n        getType(): string;\r\n\r\n        update(segmentJson: object): void;\r\n      }\r\n\r\n      class WalkSegment implements IGeoObject {\r\n        geometry: IGeometry | null;\r\n\r\n        properties: data.Manager;\r\n\r\n        state: IDataManager;\r\n\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        model: WalkSegmentModel;\r\n\r\n        getOverlay(): Promise<IOverlay | null>;\r\n\r\n        getOverlaySync(): IOverlay | null;\r\n\r\n        getParent(): object | null;\r\n\r\n        setParent(parent: object): this;\r\n\r\n        getMap(): Map;\r\n      }\r\n\r\n      class WalkSegmentModel implements IEventEmitter {\r\n        events: IEventManager;\r\n\r\n        geometry: geometry.base.LineString;\r\n\r\n        path: PathModel;\r\n\r\n        properties: data.Manager;\r\n\r\n        destroy(): void;\r\n\r\n        getType(): string;\r\n      }\r\n    }\r\n\r\n    class EditorAddon implements ICustomizable, IEventEmitter {\r\n      options: IOptionManager;\r\n\r\n      events: IEventManager;\r\n\r\n      state: data.Manager;\r\n\r\n      isActive(): boolean;\r\n\r\n      start(state: object): void;\r\n\r\n      stop(): void;\r\n    }\r\n\r\n    class MultiRoute implements IGeoObject {\r\n      constructor(model: MultiRouteModel | IMultiRouteModelJson, options?: IMultiRouteOptions);\r\n\r\n      editor: EditorAddon;\r\n\r\n      events: IEventManager;\r\n\r\n      geometry: IGeometry | null;\r\n\r\n      model: MultiRouteModel;\r\n\r\n      options: IOptionManager;\r\n\r\n      properties: IDataManager;\r\n\r\n      state: IDataManager;\r\n\r\n      getActiveRoute(): multiRouter.driving.Route | multiRouter.masstransit.Route | null;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getMap(): Map;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getParent(): object | null;\r\n\r\n      getPixelBounds(): number[][] | null;\r\n\r\n      getRoutes(): GeoObjectCollection;\r\n\r\n      getViaPoints(): GeoObjectCollection;\r\n\r\n      getWayPoints(): GeoObjectCollection;\r\n\r\n      setActiveRoute(route: driving.Route | masstransit.Route | null): void;\r\n\r\n      setParent(parent: object): this;\r\n    }\r\n\r\n    interface IMultiRouteOptions {\r\n      activeRouteAutoSelection?: boolean;\r\n      boundsAutoApply?: boolean;\r\n      dragUpdateInterval?: string | number;\r\n      preventDragUpdate?: boolean;\r\n      useMapMargin?: boolean;\r\n      zoomMargin?: number[][] | number[] | number;\r\n\r\n      [index: string]: any;\r\n    }\r\n\r\n    class MultiRouteModel implements IEventEmitter {\r\n      constructor(referencePoints: IMultiRouteReferencePoint[], params?: IMultiRouteParams);\r\n\r\n      events: IEventManager;\r\n\r\n      properties: data.Manager;\r\n\r\n      destroy(): void;\r\n\r\n      getAllPoints(): Array<WayPointModel | ViaPointModel>;\r\n\r\n      getJson(): object;\r\n\r\n      getParams(): IMultiRouteParams;\r\n\r\n      getPoints(): Array<WayPointModel | ViaPointModel>;\r\n\r\n      getReferencePointIndexes(): object;\r\n\r\n      getReferencePoints(): IMultiRouteReferencePoint[];\r\n\r\n      getRoutes(): driving.RouteModel[] | masstransit.RouteModel[];\r\n\r\n      getViaPoints(): ViaPointModel[];\r\n\r\n      getWayPoints(): WayPointModel[];\r\n\r\n      setParams(params: IMultiRouteParams, extend?: boolean, clearRequests?: boolean): void;\r\n\r\n      setReferencePoints(\r\n        referencePoints: IMultiRouteReferencePoint[],\r\n        viaIndexes?: number[],\r\n        clearRequests?: boolean,\r\n      ): void;\r\n    }\r\n\r\n    class ViaPoint implements IGeoObject {\r\n      geometry: IGeometry | null;\r\n\r\n      properties: data.Manager;\r\n\r\n      state: IDataManager;\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getParent(): object | null;\r\n\r\n      setParent(parent: object): this;\r\n\r\n      getMap(): Map;\r\n    }\r\n\r\n    class ViaPointModel implements IEventEmitter {\r\n      events: IEventManager;\r\n\r\n      geometry: geometry.base.Point;\r\n\r\n      multiRoute: MultiRouteModel;\r\n\r\n      properties: data.Manager;\r\n\r\n      destroy(): void;\r\n\r\n      getReferencePoint(): object;\r\n\r\n      getReferencePointIndex(): number;\r\n\r\n      setReferencePoint(referencePoint: object): void;\r\n\r\n      update(viaPointJson: object): void;\r\n    }\r\n\r\n    class WayPoint implements IGeoObject {\r\n      geometry: IGeometry | null;\r\n\r\n      properties: data.Manager;\r\n\r\n      state: IDataManager;\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      model: WayPointModel;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getParent(): object | null;\r\n\r\n      setParent(parent: object): this;\r\n\r\n      getMap(): Map;\r\n    }\r\n\r\n    class WayPointModel implements IEventEmitter {\r\n      events: IEventManager;\r\n\r\n      geometry: geometry.base.Point;\r\n\r\n      multiRoute: MultiRouteModel;\r\n\r\n      properties: data.Manager;\r\n\r\n      destroy(): void;\r\n\r\n      getReferencePoint(): object;\r\n\r\n      getReferencePointIndex(): number;\r\n\r\n      setReferencePoint(referencePoint: object): void;\r\n\r\n      update(wayPointJson: object): void;\r\n    }\r\n  }\r\n\r\n  namespace option {\r\n    class Manager implements IOptionManager {\r\n      constructor(options?: Record<string, any>, parent?: IOptionManager, name?: string);\r\n\r\n      events: IEventManager;\r\n\r\n      get(key: string, defaultValue?: any): any;\r\n\r\n      getAll(): Record<string, any>;\r\n\r\n      getName(): string;\r\n\r\n      getNative(key: string): object;\r\n\r\n      resolve(key: string, name?: string): object;\r\n\r\n      set(key: Record<string, any> | string, value?: any): this;\r\n\r\n      unset(keys: string[][] | string[] | string): this;\r\n\r\n      unsetAll(): this;\r\n\r\n      setName(name: string): void;\r\n\r\n      getParent(): null | IOptionManager;\r\n\r\n      setParent(parent: IOptionManager): this;\r\n\r\n      freeze(): IFreezable;\r\n\r\n      isFrozen(): boolean;\r\n\r\n      unfreeze(): IFreezable;\r\n\r\n      add(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: object | IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      group(): IEventGroup;\r\n\r\n      remove(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: object | IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      fire(type: string, eventObject: object | IEvent): this;\r\n    }\r\n\r\n    const presetStorage: util.Storage;\r\n  }\r\n\r\n  namespace pane {\r\n    class EventsPane implements IEventPane {\r\n      constructor(\r\n        map: Map,\r\n        params: {\r\n          className?: string;\r\n          css?: CSSStyleDeclaration;\r\n          patch?: {\r\n            selectable?: boolean;\r\n          };\r\n          transparent?: boolean;\r\n          checkContextMenu?: boolean;\r\n          zIndex?: number;\r\n        },\r\n      );\r\n\r\n      events: IEventManager;\r\n\r\n      destroy(): void;\r\n\r\n      getElement(): HTMLElement;\r\n\r\n      getMap(): Map;\r\n\r\n      getOverflow(): 'visible' | 'hidden';\r\n\r\n      getZIndex(): number;\r\n    }\r\n\r\n    class MovablePane implements IContainerPane {\r\n      constructor(\r\n        map: Map,\r\n        params: {\r\n          css?: CSSStyleDeclaration;\r\n          margin?: number;\r\n          overflow?: 'hidden' | 'visible';\r\n          zIndex?: number;\r\n        },\r\n      );\r\n\r\n      events: IEventManager;\r\n\r\n      destroy(): void;\r\n\r\n      fromClientPixels(clientPixelPoint: number[]): number[];\r\n\r\n      getElement(): HTMLElement;\r\n\r\n      getMap(): Map;\r\n\r\n      getOverflow(): 'visible' | 'hidden';\r\n\r\n      getZIndex(): number;\r\n\r\n      getZoom(): number;\r\n\r\n      toClientPixels(globalPixelPoint: number[]): number[];\r\n    }\r\n\r\n    class StaticPane implements IContainerPane {\r\n      constructor(\r\n        map: Map,\r\n        params: {\r\n          css?: CSSStyleDeclaration;\r\n          margin?: number;\r\n          overflow?: 'visible' | 'hidden';\r\n          zIndex?: number;\r\n        },\r\n      );\r\n\r\n      events: IEventManager;\r\n\r\n      destroy(): void;\r\n\r\n      fromClientPixels(clientPixelPoint: number[]): number[];\r\n\r\n      getElement(): HTMLElement;\r\n\r\n      getMap(): Map;\r\n\r\n      getOverflow(): 'visible' | 'hidden';\r\n\r\n      getZIndex(): number;\r\n\r\n      getZoom(): number;\r\n\r\n      toClientPixels(globalPixelPoint: number[]): number[];\r\n    }\r\n  }\r\n\r\n  namespace panorama {\r\n    type Layer = 'yandex#panorama' | 'yandex#airPanorama';\r\n\r\n    class Base implements IPanorama {\r\n      static createPanorama(params: {\r\n        angularBBox: number[];\r\n        coordSystem?: ICoordSystem;\r\n        name?: string;\r\n        position: number[];\r\n        tilesLevels: IPanoramaTileLevel[];\r\n        tileSize: number[];\r\n      }): IPanorama;\r\n\r\n      static getMarkerPositionFromDirection(\r\n        panorama: IPanorama,\r\n        direction: number[],\r\n        distance: number,\r\n      ): number[];\r\n\r\n      getAngularBBox(): number[];\r\n\r\n      getConnectionArrows(): IPanoramaConnectionArrow[];\r\n\r\n      getConnectionMarkers(): IPanoramaConnectionMarker[];\r\n\r\n      getConnections(): IPanoramaConnectionMarker[];\r\n\r\n      getCoordSystem(): ICoordSystem;\r\n\r\n      getDefaultDirection(): number[];\r\n\r\n      getDefaultSpan(): number[];\r\n\r\n      getGraph(): IPanoramaGraph | null;\r\n\r\n      getMarkers(): IPanoramaMarker[];\r\n\r\n      getName(): string;\r\n\r\n      getPosition(): number[];\r\n\r\n      getThoroughfares(): IPanoramaConnectionArrow[];\r\n\r\n      getTileLevels(): IPanoramaTileLevel[];\r\n\r\n      getTileSize(): number[];\r\n\r\n      validate(): void;\r\n    }\r\n\r\n    function createPlayer(\r\n      element: HTMLElement | string,\r\n      point: number[],\r\n      options?: {\r\n        direction?: number[] | string;\r\n        layer?: Layer;\r\n        span?: number[] | string;\r\n      },\r\n    ): Promise<Player>;\r\n\r\n    function isSupported(): boolean;\r\n\r\n    function locate(point: number[], options?: { layer?: Layer }): Promise<IPanorama[]>;\r\n\r\n    class Manager implements IEventEmitter {\r\n      events: IEventManager;\r\n\r\n      closePlayer(): void;\r\n\r\n      disableLookup(): void;\r\n\r\n      enableLookup(): void;\r\n\r\n      getPlayer(): Player;\r\n\r\n      isLookupEnabled(): boolean;\r\n\r\n      openPlayer(panorama: IPanorama[] | number): Promise<void>;\r\n    }\r\n\r\n    interface IPlayerOptions {\r\n      autoFitToViewport?: 'none' | 'ifNull' | 'always';\r\n      controls?: string[];\r\n      direction?: number[] | string;\r\n      hotkeysEnabled?: boolean;\r\n      scrollZoomBehavior?: boolean;\r\n      span?: number[] | string;\r\n      suppressMapOpenBlock?: boolean;\r\n    }\r\n\r\n    class Player implements IEventEmitter {\r\n      constructor(element: HTMLElement | string, panorama: IPanorama, options?: IPlayerOptions);\r\n\r\n      events: IEventManager;\r\n\r\n      destroy(): void;\r\n\r\n      fitToViewport(): void;\r\n\r\n      getDirection(): number[];\r\n\r\n      getPanorama(): IPanorama;\r\n\r\n      getSpan(): number[];\r\n\r\n      lookAt(point: number[]): this;\r\n\r\n      moveTo(\r\n        point: number[],\r\n        options?: {\r\n          direction?: number[] | string;\r\n          layer?: Layer;\r\n          span?: number[] | string;\r\n        },\r\n      ): Promise<void>;\r\n\r\n      setDirection(direction: number[] | string): this;\r\n\r\n      setPanorama(panorama: IPanorama): this;\r\n\r\n      setSpan(span: number[] | string): this;\r\n    }\r\n  }\r\n\r\n  namespace router {\r\n    class Editor implements ICustomizable, IEventEmitter {\r\n      options: IOptionManager;\r\n\r\n      events: IEventManager;\r\n\r\n      start(options?: {\r\n        addViaPoints?: boolean;\r\n        addWayPoints?: boolean;\r\n        editViaPoints?: boolean;\r\n        editWayPoints?: boolean;\r\n        removeViaPoints?: boolean;\r\n        removeWayPoints?: boolean;\r\n      }): void;\r\n\r\n      stop(): void;\r\n    }\r\n\r\n    abstract class Route implements IGeoObject {\r\n      geometry: IGeometry | null;\r\n\r\n      properties: IDataManager;\r\n\r\n      state: IDataManager;\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      editor: Editor;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n\r\n      getMap(): Map;\r\n\r\n      getHumanJamsTime(): string;\r\n\r\n      getHumanLength(): string;\r\n\r\n      getHumanTime(): string;\r\n\r\n      getJamsTime(): number;\r\n\r\n      getLength(): number;\r\n\r\n      getPaths(): GeoObjectCollection;\r\n\r\n      getTime(): number;\r\n\r\n      getViaPoints(): GeoObjectCollection;\r\n\r\n      getWayPoints(): GeoObjectCollection;\r\n    }\r\n  }\r\n\r\n  namespace shape {\r\n    class Circle implements IShape {\r\n      constructor(\r\n        pixelGeometry: IPixelCircleGeometry,\r\n        params?: {\r\n          fill?: boolean;\r\n          outline?: boolean;\r\n          strokeWidth?: number;\r\n        },\r\n      );\r\n\r\n      contains(position: number[]): boolean;\r\n\r\n      equals(shape: IShape): boolean;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getGeometry(): IPixelGeometry;\r\n\r\n      getType(): string;\r\n\r\n      scale(factor: number): IShape;\r\n\r\n      shift(offset: number[]): IShape;\r\n    }\r\n\r\n    class LineString implements IShape {\r\n      constructor(\r\n        pixelGeometry: IPixelLineStringGeometry,\r\n        params?: {\r\n          strokeWidth?: number;\r\n        },\r\n      );\r\n\r\n      contains(position: number[]): boolean;\r\n\r\n      equals(shape: IShape): boolean;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getGeometry(): IPixelGeometry;\r\n\r\n      getType(): string;\r\n\r\n      scale(factor: number): IShape;\r\n\r\n      shift(offset: number[]): IShape;\r\n    }\r\n\r\n    class MultiPolygon implements IShape {\r\n      constructor(\r\n        pixelGeometry: IPixelMultiPolygonGeometry,\r\n        params?: {\r\n          fill?: boolean;\r\n          outline?: boolean;\r\n          strokeWidth?: number;\r\n        },\r\n      );\r\n\r\n      contains(position: number[]): boolean;\r\n\r\n      equals(shape: IShape): boolean;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getGeometry(): IPixelGeometry;\r\n\r\n      getType(): string;\r\n\r\n      scale(factor: number): IShape;\r\n\r\n      shift(offset: number[]): IShape;\r\n    }\r\n\r\n    class Polygon implements IShape {\r\n      constructor(\r\n        pixelGeometry: IPixelPolygonGeometry,\r\n        params?: {\r\n          fill?: boolean;\r\n          outline?: boolean;\r\n          strokeWidth?: number;\r\n        },\r\n      );\r\n\r\n      contains(position: number[]): boolean;\r\n\r\n      equals(shape: IShape): boolean;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getGeometry(): IPixelGeometry;\r\n\r\n      getType(): string;\r\n\r\n      scale(factor: number): IShape;\r\n\r\n      shift(offset: number[]): IShape;\r\n    }\r\n\r\n    class Rectangle implements IShape {\r\n      constructor(\r\n        geometry: IPixelRectangleGeometry,\r\n        params?: {\r\n          fill?: boolean;\r\n          outline?: boolean;\r\n          strokeWidth?: number;\r\n        },\r\n      );\r\n\r\n      contains(position: number[]): boolean;\r\n\r\n      equals(shape: IShape): boolean;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getGeometry(): IPixelGeometry;\r\n\r\n      getType(): string;\r\n\r\n      scale(factor: number): IShape;\r\n\r\n      shift(offset: number[]): IShape;\r\n    }\r\n  }\r\n\r\n  interface Meta {\r\n    coordinatesOrder: 'latlong' | 'longlat';\r\n    countryCode: string;\r\n    languageCode: string;\r\n    mode: 'release' | 'debug';\r\n    ns: typeof ymaps;\r\n    version: string;\r\n  }\r\n\r\n  const meta: Meta;\r\n\r\n  class Balloon extends Popup<Balloon> implements IBaloon<Balloon>, IBalloonManager<Balloon> {\r\n    constructor(map: Map, options?: IBalloonOptions);\r\n\r\n    getData(): object;\r\n\r\n    close(force?: boolean): Promise<Balloon>;\r\n\r\n    getParent(): Balloon | null;\r\n\r\n    setParent(parent: Balloon): this;\r\n\r\n    autoPan(): Promise<Balloon>;\r\n\r\n    freeze(): IFreezable;\r\n\r\n    isFrozen(): boolean;\r\n\r\n    unfreeze(): IFreezable;\r\n\r\n    add(\r\n      types: string[][] | string[] | string,\r\n      callback: (event: object | IEvent) => void,\r\n      context?: object,\r\n      priority?: number,\r\n    ): this;\r\n\r\n    group(): IEventGroup;\r\n\r\n    remove(\r\n      types: string[][] | string[] | string,\r\n      callback: (event: object | IEvent) => void,\r\n      context?: object,\r\n      priority?: number,\r\n    ): this;\r\n\r\n    fire(type: string, eventObject: object | IEvent): this;\r\n\r\n    destroy(): void;\r\n\r\n    getOptions(): IOptionManager | null;\r\n\r\n    setOptions(options: object): Promise<Balloon>;\r\n  }\r\n\r\n  interface IBalloonOptions {\r\n    autoPan?: boolean;\r\n    autoPanCheckZoomRange?: boolean;\r\n    autoPanDuration?: number;\r\n    autoPanMargin?: number | number[] | undefined;\r\n    autoPanUseMapMargin?: boolean;\r\n    closeButton?: boolean;\r\n    closeTimeout?: number | undefined;\r\n    contentLayout?: IClassConstructor<ILayout> | string;\r\n    interactivityModel?: InteractivityModelKey | undefined;\r\n    layout?: IClassConstructor<ILayout> | string;\r\n    maxHeight?: number;\r\n    maxWidth?: number;\r\n    minHeight?: number;\r\n    minWidth?: number;\r\n    offset?: number[];\r\n    openTimeout?: number | undefined;\r\n    pane?: string;\r\n    panelContentLayout?: IClassConstructor<ILayout> | string;\r\n    panelMaxHeightRatio?: number;\r\n    panelMaxMapArea?: number;\r\n    shadow?: boolean;\r\n    shadowLayout?: IClassConstructor<ILayout> | string;\r\n    shadowOffset?: number[];\r\n    zIndex?: string | undefined;\r\n  }\r\n\r\n  type IBalloonOptionsWithBalloonPrefix = Prefix<IBalloonOptions, 'balloon'>;\r\n\r\n  class Circle implements GeoObject<ICircleGeometry> {\r\n    constructor(\r\n      geometry: ICircleGeometry[][][][] | number[][] | object,\r\n      properties?: object | IDataManager,\r\n      options?: ICircleOptions,\r\n    );\r\n\r\n    balloon: geoObject.Balloon;\r\n\r\n    editor: IGeometryEditor;\r\n\r\n    hint: geoObject.Hint;\r\n\r\n    events: event.Manager;\r\n\r\n    options: option.Manager;\r\n\r\n    properties: data.Manager;\r\n\r\n    state: data.Manager;\r\n\r\n    geometry: ICircleGeometry | null;\r\n\r\n    indices: ArrayBuffer;\r\n\r\n    vertices: ArrayBuffer;\r\n\r\n    getOverlay(): Promise<IOverlay | null>;\r\n\r\n    getOverlaySync(): IOverlay | null;\r\n\r\n    getParent(): null | IControlParent;\r\n\r\n    setParent(parent: IControlParent): this;\r\n\r\n    getMap(): Map;\r\n  }\r\n\r\n  interface ICircleOptions {\r\n    circleOverlay?:\r\n      | string\r\n      | ((geometry: IPixelCircleGeometry, data: object, options: object) => Promise<IOverlay>);\r\n    cursor?: string;\r\n    draggable?: boolean;\r\n    fill?: boolean;\r\n    fillColor?: string;\r\n    fillImageHref?: string;\r\n    fillMethod?: 'stretch' | 'tile';\r\n    fillOpacity?: number;\r\n    hasBalloon?: boolean;\r\n    hasHint?: boolean;\r\n    hideIconOnBalloonOpen?: boolean;\r\n    interactiveZIndex?: boolean;\r\n    interactivityModel?: InteractivityModelKey;\r\n    opacity?: number;\r\n    openBalloonOnClick?: boolean;\r\n    openEmptyBalloon?: boolean;\r\n    openEmptyHint?: boolean;\r\n    openHintOnHover?: boolean;\r\n    outline?: boolean;\r\n    pane?: string;\r\n    strokeColor?: string[][] | string[] | string;\r\n    strokeOpacity?: number[][] | number[] | number;\r\n    strokeStyle?: string[][][] | object[][] | string[] | object[] | string | object;\r\n    strokeWidth?: number[][] | number[] | number;\r\n    syncOverlayInit?: boolean;\r\n    useMapMarginInDragging?: boolean;\r\n    visible?: boolean;\r\n    zIndex?: number;\r\n    zIndexActive?: number;\r\n    zIndexDrag?: number;\r\n    zIndexHover?: number;\r\n  }\r\n\r\n  class Clusterer implements IChildOnMap, ICustomizable, IEventEmitter, IParentOnMap {\r\n    constructor(options?: IClustererOptions);\r\n\r\n    events: IEventManager;\r\n\r\n    options: option.Manager;\r\n\r\n    balloon: clusterer.Balloon;\r\n\r\n    hint: clusterer.Hint;\r\n\r\n    add(objects: IGeoObject | IGeoObject[]): this;\r\n\r\n    createCluster(center: number[], geoObjects: IGeoObject[]): IGeoObject;\r\n\r\n    getBounds(): number[][] | null;\r\n\r\n    getClusters(): IGeoObject[];\r\n\r\n    getGeoObjects(): IGeoObject[];\r\n\r\n    getMap(): Map;\r\n\r\n    getObjectState(geoObject: IGeoObject): { isShown: boolean; cluster: any; isClustered: boolean };\r\n\r\n    getParent(): IParentOnMap | null;\r\n\r\n    remove(objects: IGeoObject | IGeoObject[]): this;\r\n\r\n    removeAll(): this;\r\n\r\n    setParent(parent: IControlParent): this;\r\n  }\r\n\r\n  interface IClustererOptionsInject {\r\n    gridSize?: number;\r\n    groupByCoordinates?: boolean;\r\n    hasBalloon?: boolean;\r\n    hasHint?: boolean;\r\n    margin?: number[] | number | undefined;\r\n    maxZoom?: number[] | number;\r\n    minClusterSize?: number;\r\n    preset?: PresetKey;\r\n    showInAlphabeticalOrder?: boolean;\r\n    useMapMargin?: boolean;\r\n    viewportMargin?: number[] | number | undefined;\r\n    zoomMargin?: number[] | number | undefined;\r\n  }\r\n\r\n  interface IClustererOptions\r\n    extends IClustererOptionsInject,\r\n      IClusterPlacemarkOptionsWithClusterPrefix {\r\n    hasBalloon?: boolean | undefined;\r\n    hasHint?: boolean | undefined;\r\n\r\n    [key: string]: any;\r\n  }\r\n\r\n  class ClusterPlacemark implements IGeoObject, collection.Item {\r\n    constructor(\r\n      geometry: number[] | object | IPointGeometry,\r\n      properties: IClusterPlacemarkProperties,\r\n      options?: IClusterPlacemarkOptions,\r\n    );\r\n\r\n    geometry: IGeometry | null;\r\n\r\n    properties: IDataManager;\r\n\r\n    events: IEventManager;\r\n\r\n    options: IOptionManager;\r\n\r\n    state: data.Manager;\r\n\r\n    getOverlay(): Promise<IOverlay | null>;\r\n\r\n    getOverlaySync(): IOverlay | null;\r\n\r\n    getParent(): null | IControlParent;\r\n\r\n    setParent(parent: IControlParent): this;\r\n\r\n    getMap(): Map;\r\n\r\n    onAddToMap(map: Map): void;\r\n\r\n    onRemoveFromMap(oldMap: Map): void;\r\n\r\n    getBounds(): number[][] | null;\r\n\r\n    getGeoObjects(): IGeoObject[];\r\n  }\r\n\r\n  interface IClusterPlacemarkProperties extends IDataManager {\r\n    geoObjects: IGeoObject[];\r\n  }\r\n\r\n  interface IClusterPlacemarkOptions extends IBalloonOptionsWithBalloonPrefix {\r\n    balloonContentLayout?: IClassConstructor<ILayout> | ClusterLayoutKey | undefined;\r\n    balloonContentLayoutHeight?: number;\r\n    balloonContentLayoutWidth?: number;\r\n    balloonItemContentLayout?: ILayout | ClusterContentLayoutKey | undefined;\r\n    balloonPanelContentLayout?: IClassConstructor<ILayout> | ClusterLayoutKey | undefined;\r\n    hasBalloon?: boolean;\r\n    cursor?: string;\r\n    disableClickZoom?: boolean;\r\n    hideIconOnBalloonOpen?: boolean;\r\n    iconColor?: string;\r\n    iconContentLayout?: string | IClassConstructor<ILayout>;\r\n    iconLayout?: string | IClassConstructor<ILayout>;\r\n    icons?: {\r\n      href: string;\r\n      size: number[];\r\n      offset: number[];\r\n      shape?: IShape | IGeometryJson;\r\n    }[];\r\n    iconShape?: IGeometryJson;\r\n    interactivityModel?: InteractivityModelKey;\r\n    numbers?: number[];\r\n    openBalloonOnClick?: boolean;\r\n    openEmptyHint?: boolean;\r\n    openHintOnHover?: boolean;\r\n    zIndexHover?: number;\r\n  }\r\n\r\n  type IClusterPlacemarkOptionsWithClusterPrefix = Prefix<IClusterPlacemarkOptions, 'cluster'>;\r\n\r\n  class Collection<T = {}> implements ICollection, collection.Item {\r\n    constructor(options?: object);\r\n\r\n    events: IEventManager;\r\n\r\n    options: IOptionManager;\r\n\r\n    add(object: object): this;\r\n\r\n    getIterator(): IIterator;\r\n\r\n    remove(object: object): this;\r\n\r\n    getParent(): null | IControlParent;\r\n\r\n    setParent(parent: IControlParent): this;\r\n\r\n    getMap(): Map;\r\n\r\n    onAddToMap(map: Map): void;\r\n\r\n    onRemoveFromMap(oldMap: Map): void;\r\n\r\n    filter(filterFunction: (object: object) => boolean): object[];\r\n\r\n    get(index: number): any;\r\n\r\n    getAll(): T[];\r\n\r\n    getLength(): number;\r\n\r\n    indexOf(childToFind: object): number;\r\n\r\n    removeAll(): this;\r\n  }\r\n\r\n  class Event<OriginalEvent = {}, TargetGeometry = {}>\r\n    implements IEvent<OriginalEvent, TargetGeometry>\r\n  {\r\n    constructor(originalEvent: object, sourceEvent: IEvent);\r\n\r\n    originalEvent: {\r\n      domEvent: {\r\n        originalEvent: OriginalEvent;\r\n      };\r\n      target: {\r\n        geometry?: TargetGeometry;\r\n      };\r\n    };\r\n\r\n    allowMapEvent(): void;\r\n\r\n    callMethod(name: string): void;\r\n\r\n    get<T extends OriginalEvent, K extends keyof T = keyof T>(name: K): T[K];\r\n\r\n    get(name: string): any;\r\n\r\n    getSourceEvent(): IEvent<OriginalEvent, TargetGeometry> | null;\r\n\r\n    isDefaultPrevented(): boolean;\r\n\r\n    isImmediatePropagationStopped(): boolean;\r\n\r\n    isMapEventAllowed(): boolean;\r\n\r\n    isPropagationStopped(): boolean;\r\n\r\n    preventDefault(): boolean;\r\n\r\n    stopImmediatePropagation(): boolean;\r\n\r\n    stopPropagation(): boolean;\r\n  }\r\n\r\n  class DomEvent<OriginalEvent = {}, TargetGeometry = {}>\r\n    implements IDomEvent<OriginalEvent, TargetGeometry>\r\n  {\r\n    constructor(originalEvent: DomEvent, type?: object);\r\n\r\n    originalEvent: {\r\n      domEvent: {\r\n        originalEvent: OriginalEvent;\r\n      };\r\n      target: {\r\n        geometry?: TargetGeometry | undefined;\r\n      };\r\n    };\r\n\r\n    allowMapEvent(): void;\r\n\r\n    callMethod(name: string): void;\r\n\r\n    get<T extends OriginalEvent, K extends keyof T = keyof T>(name: K): T[K];\r\n\r\n    get(name: string): any;\r\n\r\n    getSourceEvent(): IDomEvent<OriginalEvent, TargetGeometry>;\r\n\r\n    isDefaultPrevented(): boolean;\r\n\r\n    isImmediatePropagationStopped(): boolean;\r\n\r\n    isMapEventAllowed(): boolean;\r\n\r\n    isPropagationStopped(): boolean;\r\n\r\n    preventDefault(): boolean;\r\n\r\n    stopImmediatePropagation(): boolean;\r\n\r\n    stopPropagation(): boolean;\r\n  }\r\n\r\n  class GeoObject<T = IGeometry, TargetGeometry = {}> implements IGeoObject<T> {\r\n    constructor(feature?: IGeoObjectFeature, options?: IGeoObjectOptions);\r\n\r\n    geometry: T | null;\r\n\r\n    balloon: geoObject.Balloon;\r\n\r\n    editor: IGeometryEditor;\r\n\r\n    hint: geoObject.Hint;\r\n\r\n    events: event.Manager<TargetGeometry>;\r\n\r\n    options: option.Manager;\r\n\r\n    properties: data.Manager;\r\n\r\n    state: data.Manager;\r\n\r\n    getOverlay(): Promise<IOverlay | null>;\r\n\r\n    getOverlaySync(): IOverlay | null;\r\n\r\n    getParent(): null | IControlParent;\r\n\r\n    setParent(parent: IControlParent): this;\r\n\r\n    getMap(): Map;\r\n  }\r\n\r\n  interface IGeoObjectFeature {\r\n    geometry?: IGeometry | IGeometryJson;\r\n    properties?: IDataManager | object;\r\n  }\r\n\r\n  interface IGeoObjectOptions extends IBalloonOptionsWithBalloonPrefix, IHintOptionsWithHintPrefix {\r\n    circleOverlay?:\r\n      | string\r\n      | ((geometry: IPixelCircleGeometry, data: object, options: object) => Promise<IOverlay>);\r\n    cursor?: string;\r\n    draggable?: boolean;\r\n    fill?: boolean;\r\n    fillColor?: string;\r\n    fillImageHref?: string;\r\n    fillMethod?: 'stretch' | 'tile';\r\n    fillOpacity?: number;\r\n    hasBalloon?: boolean;\r\n    hasHint?: boolean;\r\n    hideIconOnBalloonOpen?: boolean;\r\n    iconCaptionMaxWidth?: number;\r\n    iconColor?: string;\r\n    iconContentLayout?: string | IClassConstructor<ILayout>;\r\n    iconContentOffset?: number[];\r\n    iconContentPadding?: number[];\r\n    iconContentSize?: number[];\r\n    iconImageClipRect?: number[][];\r\n    iconImageHref?: string;\r\n    iconImageOffset?: number[];\r\n    iconImageShape?: IShape | null;\r\n    iconImageSize?: number[];\r\n    iconLayout?: string | IClassConstructor<ILayout>;\r\n    iconMaxHeight?: number;\r\n    iconMaxWidth?: number;\r\n    iconOffset?: number[];\r\n    iconShadow?: boolean;\r\n    iconShadowImageClipRect?: number[][];\r\n    iconShadowImageHref?: string;\r\n    iconShadowImageOffset?: number[];\r\n    iconShadowImageSize?: number[];\r\n    iconShadowLayout?: string | IClassConstructor<ILayout>;\r\n    iconShadowOffset?: number[];\r\n    interactiveZIndex?: boolean;\r\n    interactivityModel?: InteractivityModelKey;\r\n    lineStringOverlay?: OverlayKey;\r\n    opacity?: number;\r\n    openBalloonOnClick?: boolean;\r\n    openEmptyBalloon?: boolean;\r\n    openEmptyHint?: boolean;\r\n    openHintOnHover?: boolean;\r\n    outline?: boolean;\r\n    pane?: string;\r\n    pointOverlay?: OverlayKey;\r\n    polygonOverlay?: OverlayKey;\r\n    preset?: PresetKey | undefined;\r\n    rectangleOverlay?: OverlayKey;\r\n    setMapCursorInDragging?: boolean;\r\n    strokeColor?: string[][] | string[] | string;\r\n    strokeOpacity?: number[][] | number[] | number;\r\n    strokeStyle?: string[][][] | object[][] | string[] | object[] | string | object;\r\n    strokeWidth?: number[][] | number[] | number;\r\n    syncOverlayInit?: boolean;\r\n    useMapMarginInDragging?: boolean;\r\n    visible?: boolean;\r\n    zIndex?: number;\r\n    zIndexActive?: number;\r\n    zIndexDrag?: number;\r\n    zIndexHover?: number;\r\n\r\n    [key: string]: any;\r\n  }\r\n\r\n  type IGeoObjectOptionsWithGeoObjectPrefix = Prefix<IGeoObjectOptions, 'geoObject'>;\r\n\r\n  class GeoObjectCollection implements IGeoObject, IGeoObjectCollection {\r\n    constructor(\r\n      feature?: {\r\n        children?: IGeoObject[];\r\n        geometry?: IGeometry | object;\r\n        properties?: IDataManager | object;\r\n      },\r\n      options?: object,\r\n    );\r\n\r\n    geometry: IGeometry | null;\r\n\r\n    properties: IDataManager;\r\n\r\n    state: IDataManager;\r\n\r\n    events: IEventManager;\r\n\r\n    options: IOptionManager;\r\n\r\n    getOverlay(): Promise<IOverlay | null>;\r\n\r\n    getOverlaySync(): IOverlay | null;\r\n\r\n    getParent(): null | IControlParent;\r\n\r\n    setParent(parent: IControlParent): this;\r\n\r\n    getMap(): Map;\r\n\r\n    add(child: IGeoObject, index?: number): this;\r\n\r\n    each(callback: (object: IGeoObject) => void, context?: object): void;\r\n\r\n    get(index: number): IGeoObject;\r\n\r\n    getBounds(): number[][] | null;\r\n\r\n    getIterator(): IIterator;\r\n\r\n    getLength(): number;\r\n\r\n    getPixelBounds(): number[][] | null;\r\n\r\n    indexOf(object: IGeoObject): number;\r\n\r\n    remove(child: IGeoObject): this;\r\n\r\n    removeAll(): this;\r\n\r\n    set(index: number, child: IGeoObject): this;\r\n\r\n    splice(index: number, length: number): this;\r\n\r\n    toArray(): IGeoObject[];\r\n  }\r\n\r\n  interface ILayerOptions {\r\n    brightness?: number;\r\n    notFoundTile?: string | null;\r\n    pane?: IPane | string;\r\n    projection?: any;\r\n    tileSize?: number[][];\r\n    tileTransparent?: boolean;\r\n    zIndex?: number;\r\n  }\r\n\r\n  class Layer implements ILayer, IParentOnMap, IPositioningContext {\r\n    constructor(\r\n      tileUrlTemplate: string | ((tileNumber: number[], tileZoom: number) => string),\r\n      options?: ILayerOptions,\r\n    );\r\n\r\n    events: IEventManager;\r\n\r\n    options: IOptionManager;\r\n\r\n    clientPixelsToNumber(clientPixelPoint: number, tileZoom: number): number[];\r\n\r\n    fromClientPixels(clientPixelPoint: number[]): number[];\r\n\r\n    getBrightness?(): number;\r\n\r\n    getCopyrights?(coords: number[], zoom: number): Promise<Array<string | HTMLElement>>;\r\n\r\n    getMap(): Map;\r\n\r\n    getPane(): IPane;\r\n\r\n    getParent(): null | IControlParent;\r\n\r\n    getTileSize(zoom: number): number[];\r\n\r\n    getTileStatus(): { readyTileNumber: number; totalTileNumber: number };\r\n\r\n    getTileUrl(tileNumber: number[], tileZoom: number): string | null;\r\n\r\n    getTileUrlTemplate(): string | any;\r\n\r\n    getZoom(): number;\r\n\r\n    getZoomRange?(point: number[]): Promise<number[]>;\r\n\r\n    numberToClientBounds(tileNumber: number[], tileZoom: number): number[][];\r\n\r\n    restrict(num: number[], tileZoom: number): number[] | null;\r\n\r\n    setParent(parent: IControlParent): this;\r\n\r\n    setTileUrlTemplate(tileUrlTemplate: string | any): void;\r\n\r\n    toClientPixels(globalPixelPoint: number[]): number[];\r\n\r\n    update(updateBounds: any): void;\r\n\r\n    getAlias(): string;\r\n\r\n    getElement(): HTMLElement;\r\n  }\r\n\r\n  type IHint = IPopup<IHint>;\r\n\r\n  interface IHintOptions {\r\n    closeTimeout?: number;\r\n    contentLayout?: IClassConstructor<ILayout> | string;\r\n    fitPane?: boolean;\r\n    holdByMouse?: boolean;\r\n    interactivityModel?: InteractivityModelKey;\r\n    layout?: IClassConstructor<ILayout> | string;\r\n    offset?: number[];\r\n    openTimeout?: number;\r\n    pane?: string;\r\n    zIndex?: number;\r\n  }\r\n\r\n  type IHintOptionsWithHintPrefix = Prefix<IHintOptions, 'hint'>;\r\n\r\n  class Hint extends Popup<Hint> implements IHint {\r\n    constructor(map: Map, options?: IHintOptions);\r\n  }\r\n\r\n  class Map implements IDomEventEmitter {\r\n    constructor(parentElement: HTMLElement | string, state: IMapState, options?: IMapOptions);\r\n\r\n    action: map.action.Manager;\r\n\r\n    balloon: map.Balloon;\r\n\r\n    behaviors: map.behavior.Manager;\r\n\r\n    container: map.Container;\r\n\r\n    controls: control.Manager;\r\n\r\n    converter: map.Converter;\r\n\r\n    copyrights: map.Copyrights;\r\n\r\n    cursors: util.cursor.Manager;\r\n\r\n    events: event.Manager;\r\n\r\n    geoObjects: map.GeoObjects;\r\n\r\n    hint: map.Hint;\r\n\r\n    layers: map.layer.Manager;\r\n\r\n    margin: map.margin.Manager;\r\n\r\n    options: option.Manager;\r\n\r\n    panes: map.pane.Manager;\r\n\r\n    zoomRange: map.ZoomRange;\r\n\r\n    destroy(): void;\r\n\r\n    getBounds(options?: IMapMarginOptions): number[][];\r\n\r\n    getCenter(options?: IMapMarginOptions): number[];\r\n\r\n    getGlobalPixelCenter(options?: IMapMarginOptions): number[];\r\n\r\n    getPanoramaManager(): Promise<panorama.Manager>;\r\n\r\n    getType(): string | MapType;\r\n\r\n    getZoom(): number;\r\n\r\n    panTo(center: number[] | object[], options?: IMapPanOptions): this;\r\n\r\n    setBounds(bounds: number[][], options?: IMapBoundsOptions): this;\r\n\r\n    setCenter(center: number[], zoom?: number, options?: IMapPositionOptions): this;\r\n\r\n    setGlobalPixelCenter(\r\n      globalPixelCenter: number[],\r\n      zoom?: number,\r\n      options?: IMapPositionOptions,\r\n    ): this;\r\n\r\n    setType(type: string | MapType, options?: IMapCheckZoomRangeOptions): this;\r\n\r\n    setZoom(zoom: number, options?: IMapZoomOptions): this;\r\n  }\r\n\r\n  class MapEvent<OriginalEvent = {}, TargetGeometry = {}> extends Event<\r\n    OriginalEvent,\r\n    TargetGeometry\r\n  > {\r\n    get(name: string): any;\r\n\r\n    get(name: 'coords' | 'globalPixels' | 'pagePixels' | 'clientPixels'): [number, number];\r\n\r\n    get(name: 'domEvent'): DomEvent<OriginalEvent, TargetGeometry> | undefined;\r\n  }\r\n\r\n  interface IMapMarginOptions {\r\n    useMapMargin?: boolean;\r\n  }\r\n\r\n  interface IMapCheckZoomRangeOptions {\r\n    checkZoomRange?: boolean;\r\n  }\r\n\r\n  interface IMapZoomOptions extends IMapMarginOptions, IMapCheckZoomRangeOptions {\r\n    duration?: number;\r\n  }\r\n\r\n  interface IMapPositionOptions extends IMapZoomOptions {\r\n    timingFunction?: string;\r\n  }\r\n\r\n  interface IMapBoundsOptions extends IMapPositionOptions {\r\n    preciseZoom?: boolean;\r\n    zoomMargin?: number[][] | number[];\r\n  }\r\n\r\n  interface IMapPanOptions extends IMapPositionOptions {\r\n    delay?: number;\r\n    flying?: boolean;\r\n    safe?: boolean;\r\n  }\r\n\r\n  class MapType {\r\n    constructor(name: string, layers: Array<IClassConstructor<Layer> | string>);\r\n  }\r\n\r\n  interface IMapState {\r\n    behaviors?: string[];\r\n    bounds?: number[][];\r\n    center?: number[];\r\n    controls?: ControlKey[];\r\n    margin?: number | number[];\r\n    type?: 'yandex#map' | 'yandex#satellite' | 'yandex#hybrid' | MapType;\r\n    zoom?: number;\r\n  }\r\n\r\n  interface IMapOptions {\r\n    autoFitToViewport?: 'none' | 'ifNull' | 'always';\r\n    avoidFractionalZoom?: boolean;\r\n    exitFullscreenByEsc?: boolean;\r\n    fullscreenZIndex?: number;\r\n    mapAutoFocus?: boolean;\r\n    maxAnimationZoomDifference?: number;\r\n    maxZoom?: number;\r\n    minZoom?: number;\r\n    nativeFullscreen?: boolean;\r\n    projection?: IProjection;\r\n    restrictMapArea?: boolean | number[][] | undefined;\r\n    suppressMapOpenBlock?: boolean;\r\n    suppressObsoleteBrowserNotifier?: boolean;\r\n    yandexMapAutoSwitch?: boolean;\r\n    yandexMapDisablePoiInteractivity?: boolean;\r\n\r\n    copyrightLogoVisible?: boolean;\r\n    copyrightProvidersVisible?: boolean;\r\n    copyrightUaVisible?: boolean;\r\n  }\r\n\r\n  class Placemark extends GeoObject<IPointGeometry, geometry.Point> {\r\n    constructor(\r\n      geometry: number[] | object | IPointGeometry,\r\n      properties?: IPlacemarkProperties | IDataManager,\r\n      options?: IPlacemarkOptions,\r\n    );\r\n  }\r\n\r\n  interface IPlacemarkProperties {\r\n    iconContent?: string;\r\n    iconCaption?: string;\r\n    hintContent?: string;\r\n    balloonContent?: string;\r\n    balloonContentHeader?: string;\r\n    balloonContentBody?: string;\r\n    balloonContentFooter?: string;\r\n    [key: string]: any;\r\n  }\r\n\r\n  interface IPlacemarkOptions\r\n    extends layout.IImageOptionsWithIconPrefix,\r\n      layout.IImageWithContentOptionsWithIconPrefix,\r\n      layout.IPieChartOptionsWithIconPrefix,\r\n      IBalloonOptionsWithBalloonPrefix,\r\n      IHintOptionsWithHintPrefix {\r\n    cursor?: string;\r\n    draggable?: boolean;\r\n    hasBalloon?: boolean;\r\n    hasHint?: boolean;\r\n    hideIconOnBalloonOpen?: boolean;\r\n    iconColor?: string | undefined;\r\n    iconLayout?: IClassConstructor<ILayout> | IconLayoutKey | undefined;\r\n    iconOffset?: number[];\r\n    iconShape?: IGeometryJson | null;\r\n    interactiveZIndex?: boolean;\r\n    interactivityModel?: InteractivityModelKey | undefined;\r\n    openBalloonOnClick?: boolean;\r\n    openEmptyBalloon?: boolean;\r\n    openEmptyHint?: boolean;\r\n    openHintOnHover?: boolean;\r\n    pane?: string;\r\n    pointOverlay?: string;\r\n    preset?: PresetKey | undefined;\r\n    syncOverlayInit?: boolean;\r\n    useMapMarginInDragging?: boolean;\r\n    visible?: boolean;\r\n    zIndex?: number;\r\n    zIndexActive?: number;\r\n    zIndexDrag?: number;\r\n    zIndexHover?: number;\r\n\r\n    [key: string]: any;\r\n  }\r\n\r\n  class Polygon extends GeoObject<IPolygonGeometry> {\r\n    constructor(\r\n      geometry: number[][][] | object | IPolygonGeometry,\r\n      properties?: object | IDataManager,\r\n      options?: IPolygonOptions,\r\n    );\r\n  }\r\n\r\n  interface IPolygonOptions {\r\n    cursor?: string;\r\n    draggable?: boolean;\r\n    fill?: boolean;\r\n    fillColor?: string;\r\n    fillImageHref?: string;\r\n    fillMethod?: 'stretch' | 'tile';\r\n    fillOpacity?: number;\r\n    hasBalloon?: boolean;\r\n    hasHint?: boolean;\r\n    interactiveZIndex?: boolean;\r\n    interactivityModel?: InteractivityModelKey | undefined;\r\n    opacity?: number;\r\n    openBalloonOnClick?: boolean;\r\n    openEmptyBalloon?: boolean;\r\n    openEmptyHint?: boolean;\r\n    openHintOnHover?: boolean;\r\n    outline?: boolean;\r\n    pane?: string;\r\n    polygonOverlay?: string;\r\n    strokeColor?: string | string[];\r\n    strokeOpacity?: number | number[];\r\n    strokeStyle?: string | string[] | object | object[];\r\n    strokeWidth?: number | number[];\r\n    syncOverlayInit?: boolean;\r\n    useMapMarginInDragging?: boolean;\r\n    visible?: boolean;\r\n    zIndex?: number;\r\n    zIndexActive?: number;\r\n    zIndexDrag?: number;\r\n    zIndexHover?: number;\r\n  }\r\n\r\n  class Polyline extends GeoObject<ILineStringGeometry> {\r\n    constructor(\r\n      geometry: number[][] | object | ILineStringGeometry,\r\n      properties?: object | IDataManager,\r\n      options?: IPolylineOptions,\r\n    );\r\n  }\r\n\r\n  interface IPolylineOptions {\r\n    cursor?: string;\r\n    draggable?: boolean;\r\n    hasBalloon?: boolean;\r\n    hasHint?: boolean;\r\n    interactiveZIndex?: boolean;\r\n    interactivityModel?: InteractivityModelKey | undefined;\r\n    lineStringOverlay?: () => object | string;\r\n    opacity?: number;\r\n    openBalloonOnClick?: boolean;\r\n    openEmptyBalloon?: boolean;\r\n    openEmptyHint?: boolean;\r\n    openHintOnHover?: boolean;\r\n    pane?: string;\r\n    strokeColor?: string | string[];\r\n    strokeOpacity?: number | number[];\r\n    strokeStyle?: string | string[] | object | object[];\r\n    strokeWidth?: number | number[];\r\n    syncOverlayInit?: boolean;\r\n    useMapMarginInDragging?: boolean;\r\n    visible?: boolean;\r\n    zIndex?: number;\r\n    zIndexActive?: number;\r\n    zIndexDrag?: number;\r\n    zIndexHover?: number;\r\n  }\r\n\r\n  class Popup<T> implements IPopup<T> {\r\n    constructor(map: Map, options?: IPopupOptions);\r\n\r\n    options: IOptionManager;\r\n\r\n    events: IEventManager;\r\n\r\n    close(force?: boolean): Promise<T>;\r\n\r\n    getData(): object;\r\n\r\n    getOverlay(): Promise<IOverlay>;\r\n\r\n    getOverlaySync(): IOverlay;\r\n\r\n    getPosition(): number[];\r\n\r\n    isOpen(): boolean;\r\n\r\n    open(position: number[], data: object | string | HTMLElement): Promise<T>;\r\n\r\n    setData(data: object | string | HTMLElement): Promise<T>;\r\n\r\n    setPosition(position: number[]): Promise<T>;\r\n  }\r\n\r\n  interface IPopupOptions {\r\n    closeTimeout?: number;\r\n    interactivityModel?: InteractivityModelKey;\r\n    openTimeout?: number;\r\n    pane?: IPane | string;\r\n    projection?: IProjection;\r\n    zIndex?: number;\r\n  }\r\n\r\n  function ready(\r\n    successCallback?: () => any | IReadyObject,\r\n    errorCallback?: () => any,\r\n    context?: object,\r\n  ): Promise<void>;\r\n\r\n  interface IReadyObject {\r\n    require?: string[];\r\n    context?: object;\r\n\r\n    successCallback?(): void;\r\n\r\n    errorCallback?(): void;\r\n  }\r\n\r\n  interface IRectangleProperties {\r\n    hintContent?: string;\r\n    balloonContent?: string;\r\n    balloonContentHeader?: string;\r\n    balloonContentBody?: string;\r\n    balloonContentFooter?: string;\r\n  }\r\n\r\n  interface IRectangleOptions extends IBalloonOptionsWithBalloonPrefix, IHintOptionsWithHintPrefix {\r\n    cursor?: string;\r\n    draggable?: boolean;\r\n    fill?: boolean;\r\n    fillColor?: string;\r\n    fillImageHref?: string;\r\n    fillMethod?: string;\r\n    fillOpacity?: number;\r\n    hasBalloon?: boolean;\r\n    hasHint?: boolean;\r\n    interactiveZIndex?: boolean;\r\n    interactivityModel?: InteractivityModelKey;\r\n    opacity?: number;\r\n    openBalloonOnClick?: boolean;\r\n    openEmptyBalloon?: boolean;\r\n    openEmptyHint?: boolean;\r\n    openHintOnHover?: boolean;\r\n    outline?: boolean;\r\n    pane?: string;\r\n    rectangleOverlay?:\r\n      | OverlayKey\r\n      | ((\r\n          geometry: IPixelCircleGeometry,\r\n          data: IDataManager | object,\r\n          options: object,\r\n        ) => vow.Promise);\r\n    strokeColor?: string | string[];\r\n    strokeOpacity?: number | number[];\r\n    strokeStyle?: string | string[] | object | object[];\r\n    strokeWidth?: number | number[];\r\n    syncOverlayInit?: boolean;\r\n    useMapMarginInDragging?: boolean;\r\n    visible?: boolean;\r\n    zIndex?: number;\r\n    zIndexActive?: number;\r\n    zIndexDrag?: number;\r\n    zIndexHover?: number;\r\n\r\n    [key: string]: any;\r\n  }\r\n\r\n  interface IRectangleGeometryAccess extends IFreezable {\r\n    contains(position: number[]): boolean;\r\n\r\n    getClosest(anchorPosition: number[]): object;\r\n\r\n    getCoordinates(): number[][];\r\n\r\n    setCoordinates(coordinates: number[][]): IRectangleGeometryAccess;\r\n  }\r\n\r\n  interface IRectangleGeometry extends IGeometry, IRectangleGeometryAccess {\r\n    getType(): string;\r\n  }\r\n\r\n  class Rectangle extends GeoObject<ILineStringGeometry> {\r\n    constructor(\r\n      geometry: number[][] | object | IRectangleGeometry,\r\n      properties?: IRectangleProperties | IDataManager,\r\n      options?: IRectangleOptions,\r\n    );\r\n  }\r\n\r\n  namespace regions {\r\n    function load(\r\n      region: string,\r\n      options?: {\r\n        disputedBorders?: string;\r\n        lang?: string;\r\n        quality?: number;\r\n      },\r\n    ): vow.Promise;\r\n  }\r\n\r\n  namespace templateLayoutFactory {\r\n    function createClass<O extends {} = {}, S extends {} = {}>(\r\n      template: string,\r\n      overrides?: O,\r\n      staticMethods?: S,\r\n    ): IClassConstructor<layout.templateBased.Base & O & S>;\r\n  }\r\n\r\n  type ResolveCallbackFunction = (\r\n    provide: (module: any, error?: any) => void,\r\n    ...depends: any[]\r\n  ) => void;\r\n\r\n  interface IRatioMap {\r\n    [key: string]: string;\r\n  }\r\n\r\n  namespace util {\r\n    class AsyncStorage extends Storage {\r\n      define(\r\n        key: string,\r\n        depends: string[],\r\n        resolveCallback: ResolveCallbackFunction,\r\n        context?: object,\r\n      ): this;\r\n\r\n      define(key: string, resolveCallback: ResolveCallbackFunction, context?: object): this;\r\n\r\n      isDefined(key: string): boolean;\r\n\r\n      require(\r\n        keys: string | string[],\r\n        successCallback?: (...args: any[]) => void,\r\n        errorCallback?: (error: any) => void,\r\n        context?: object,\r\n      ): vow.Promise;\r\n    }\r\n\r\n    function augment(ChildClass: any, ParentClass: any, override: object): any;\r\n\r\n    function bind(callback: any, context: object): any;\r\n\r\n    const bounds: {\r\n      areIntersecting(\r\n        bounds1: number[][],\r\n        bounds2: number[][],\r\n        projection?: typeof ymaps.projection.wgs84Mercator,\r\n      ): boolean;\r\n\r\n      containsBounds(\r\n        outer: number[][],\r\n        inner: number[][],\r\n        projection?: typeof ymaps.projection.wgs84Mercator,\r\n      ): boolean;\r\n\r\n      containsPoint(\r\n        bounds: number[][],\r\n        point: number[],\r\n        projection?: typeof ymaps.projection.wgs84Mercator,\r\n      ): boolean;\r\n\r\n      fromBounds(\r\n        sourceBounds: number[][],\r\n        projection?: typeof ymaps.projection.wgs84Mercator,\r\n      ): number[][];\r\n\r\n      fromGlobalPixelBounds(\r\n        pixelBounds: number[][],\r\n        zoom: number,\r\n        projection?: typeof ymaps.projection.wgs84Mercator,\r\n      ): number[][];\r\n\r\n      fromPoints(\r\n        points: number[][],\r\n        projection?: typeof ymaps.projection.wgs84Mercator,\r\n      ): number[][];\r\n\r\n      getCenter(bounds: number[][], projection?: typeof ymaps.projection.wgs84Mercator): number[];\r\n\r\n      getCenterAndZoom(\r\n        bounds: number[][],\r\n        containerSize: number[],\r\n        projection?: typeof ymaps.projection.wgs84Mercator,\r\n        params?: {\r\n          inscribe?: boolean;\r\n          margin?: number | number[];\r\n          preciseZoom?: boolean;\r\n        },\r\n      ): object;\r\n\r\n      getIntersections(\r\n        bounds1: number[][],\r\n        bounds2: number[][],\r\n        projection?: typeof ymaps.projection.wgs84Mercator,\r\n      ): number[][][];\r\n\r\n      getSize(bounds: number[][], projection?: typeof ymaps.projection.wgs84Mercator): number[];\r\n\r\n      toGlobalPixelBounds(\r\n        geoBounds: number[][],\r\n        zoom: number[],\r\n        projection?: typeof ymaps.projection.wgs84Mercator,\r\n      ): number[][];\r\n    };\r\n\r\n    namespace cursor {\r\n      class Accessor {\r\n        constructor(key: string);\r\n\r\n        getKey(): string;\r\n\r\n        remove(): void;\r\n\r\n        setKey(key: string): void;\r\n      }\r\n\r\n      class Manager {\r\n        constructor(element: HTMLElement);\r\n\r\n        events: event.Manager;\r\n\r\n        push(key: string): Accessor;\r\n      }\r\n    }\r\n\r\n    function defineClass(constructor: any, parentClass?: any, override?: object): any;\r\n\r\n    function defineClass(constructor: any, override?: object): any;\r\n\r\n    class Dragger implements IEventEmitter {\r\n      constructor(params?: {\r\n        autoStartElement?: HTMLElement | IDomEventEmitter;\r\n        byRightButton?: boolean;\r\n        tremor?: number;\r\n      });\r\n\r\n      events: IEventManager;\r\n\r\n      destroy(): void;\r\n\r\n      isDragging(): boolean;\r\n\r\n      start(event: IDomEvent): void;\r\n\r\n      stop(): void;\r\n    }\r\n\r\n    function extend(target: object, ...source: object[]): object;\r\n\r\n    const hd: {\r\n      getPixelRatio(): number;\r\n\r\n      selectRatio(hash: IRatioMap): number;\r\n\r\n      selectValue(hash: object | IRatioMap): object;\r\n    };\r\n\r\n    namespace math {\r\n      function areEqual(first: number[], second: number[], diff?: number): boolean;\r\n\r\n      function cycleRestrict(value: number, min: number, max: number): number;\r\n\r\n      function restrict(value: number, min: number, max: number): number;\r\n    }\r\n\r\n    const pixelBounds: {\r\n      areIntersecting(bounds1: number[][], bounds2: number[][]): boolean;\r\n\r\n      containsBounds(outer: number[][], inner: number[][]): boolean;\r\n\r\n      containsPoint(bounds: number[][], point: number[][]): boolean;\r\n\r\n      fromBounds(sourceBounds: number[][]): number[][];\r\n\r\n      fromPoints(points: number[][]): number[][];\r\n\r\n      getCenter(bounds: number[][]): number[];\r\n\r\n      getIntersection(bounds1: number[][], bounds2: number[][]): number[][] | null;\r\n\r\n      getSize(bounds: number[][]): number[];\r\n    };\r\n\r\n    function requireCenterAndZoom(\r\n      mapType: string | MapType | map.ZoomRange,\r\n      bounds: number[][],\r\n      containerSize: number[],\r\n      params?: {\r\n        inscribe?: boolean;\r\n        margin?: number | number[];\r\n        preciseZoom?: boolean;\r\n      },\r\n    ): vow.Promise;\r\n\r\n    class Storage {\r\n      add(key: string, object: Record<string, any>): this;\r\n\r\n      get(key: string | Record<string, any>): Record<string, any> | string;\r\n\r\n      remove(key: string): this;\r\n    }\r\n  }\r\n\r\n  namespace vow {\r\n    class Deferred {\r\n      promise(): vow.Promise;\r\n\r\n      reject(reason: any): void;\r\n\r\n      resolve(value: any): void;\r\n    }\r\n\r\n    class Promise {\r\n      constructor(resolver?: (resolve?: any, reject?: any) => void);\r\n\r\n      done(\r\n        onFulfilled?: (...args: any[]) => void,\r\n        onRejected?: (err?: Error | any) => void,\r\n        onProgress?: (...args: any[]) => void,\r\n        ctx?: object,\r\n      ): void;\r\n\r\n      spread(\r\n        onFulfilled?: (...args: any[]) => void,\r\n        onRejected?: (err?: Error | any) => void,\r\n        ctx?: object,\r\n      ): vow.Promise;\r\n\r\n      then(\r\n        onFulfilled?: (...args: any[]) => void,\r\n        onRejected?: (err?: Error | any) => void,\r\n        onProgress?: (...args: any[]) => void,\r\n        ctx?: object,\r\n      ): vow.Promise;\r\n\r\n      valueOf(): object;\r\n    }\r\n\r\n    function all(iterable: any): vow.Promise;\r\n\r\n    function defer(): vow.Deferred;\r\n\r\n    function reject(reason: any): vow.Promise;\r\n\r\n    function resolve(value: any): vow.Promise;\r\n  }\r\n\r\n  /* Interfaces */\r\n\r\n  interface IBaloon<T> extends IPopup<T>, ICustomizable, IChild<T>, IFreezable {\r\n    autoPan(): Promise<T>;\r\n  }\r\n\r\n  interface IBalloonManager<T> extends IPopupManager<T> {\r\n    autoPan(): Promise<T>;\r\n  }\r\n\r\n  interface IBaseGeometry extends IEventEmitter {\r\n    getBounds(): number[][] | null;\r\n\r\n    getType(): string;\r\n  }\r\n\r\n  interface IBaseLineStringGeometry extends IBaseGeometry, ILineStringGeometryAccess {}\r\n\r\n  interface IBasePointGeometry extends IBaseGeometry, IPointGeometryAccess {}\r\n\r\n  interface IBasePolygonGeometry extends IBaseGeometry, IPolygonGeometryAccess {}\r\n\r\n  interface IBehavior extends IChildOnMap, ICustomizable {\r\n    disable(): void;\r\n\r\n    enable(): void;\r\n\r\n    isEnabled(): boolean;\r\n  }\r\n\r\n  interface IChild<T> extends IEventEmitter {\r\n    getParent(): object | null;\r\n\r\n    setParent(parent: object | null): this;\r\n  }\r\n\r\n  type IChildOnMap = IChild<IControlParent>;\r\n\r\n  interface ICircleGeometry extends ICircleGeometryAccess, IGeometry {}\r\n\r\n  interface ICircleGeometryAccess extends IFreezable {\r\n    contains(position: number[]): boolean;\r\n\r\n    getClosest(anchorPosition: number[]): object;\r\n\r\n    getCoordinates(): number[] | null;\r\n\r\n    getRadius(): number;\r\n\r\n    setCoordinates(coordinates: number[] | null): ICircleGeometryAccess;\r\n\r\n    setRadius(radius: number): ICircleGeometryAccess;\r\n  }\r\n\r\n  interface ICollection extends IEventEmitter {\r\n    add(object: object): this;\r\n\r\n    getIterator(): IIterator;\r\n\r\n    remove(object: object): this;\r\n  }\r\n\r\n  interface IContainerPane extends IPane, IPositioningContext {}\r\n\r\n  type IControl = IChildOnMap;\r\n\r\n  interface IControlParent extends IParentOnMap {\r\n    getChildElement(child: IControl): Promise<HTMLElement>;\r\n  }\r\n\r\n  interface ICoordSystem {\r\n    getDistance(point1: number[], point2: number[]): number;\r\n\r\n    solveDirectProblem(startPoint: number[], direction: number[], distance: number): object;\r\n\r\n    solveInverseProblem(\r\n      startPoint: number[],\r\n      endPoint: number[],\r\n      reverseDirection?: boolean,\r\n    ): object;\r\n  }\r\n\r\n  type ICopyrightsAccessor = ICopyrightsProvider;\r\n\r\n  interface ICopyrightsProvider extends IEventEmitter {\r\n    getCopyrights(coords: number[], zoom: number): Promise<Array<string | HTMLElement>>;\r\n\r\n    remove(): void;\r\n\r\n    setCopyrights(copyrights: string | HTMLElement | Array<string | HTMLElement>): void;\r\n  }\r\n\r\n  interface ICustomizable extends IEventEmitter {\r\n    options: IOptionManager;\r\n  }\r\n\r\n  interface IDataManager extends IEventEmitter {\r\n    set(key: Record<string, any> | string, value?: any): this;\r\n\r\n    get(path: string, defaultValue?: any): any;\r\n  }\r\n\r\n  type IDomEventEmitter = IEventEmitter;\r\n\r\n  interface IEvent<OriginalEvent = {}, TargetGeometry = {}> {\r\n    originalEvent: {\r\n      domEvent: {\r\n        originalEvent: OriginalEvent;\r\n      };\r\n      target: {\r\n        geometry?: TargetGeometry | undefined;\r\n      };\r\n    };\r\n\r\n    allowMapEvent(): void;\r\n\r\n    callMethod(name: string): void;\r\n\r\n    get<T extends OriginalEvent, K extends keyof T = keyof T>(name: K): T[K];\r\n\r\n    get(name: 'type'): string;\r\n\r\n    get(name: 'objectId'): string | undefined;\r\n\r\n    get(name: 'newZoom' | 'oldZoom'): number | undefined;\r\n\r\n    get(name: string): any;\r\n\r\n    getSourceEvent(): IEvent<OriginalEvent, TargetGeometry> | null;\r\n\r\n    isDefaultPrevented(): boolean;\r\n\r\n    isImmediatePropagationStopped(): boolean;\r\n\r\n    isMapEventAllowed(): boolean;\r\n\r\n    isPropagationStopped(): boolean;\r\n\r\n    preventDefault(): boolean;\r\n\r\n    stopImmediatePropagation(): boolean;\r\n\r\n    stopPropagation(): boolean;\r\n  }\r\n\r\n  interface IDomEvent<OriginalEvent = {}, TargetGeometry = {}>\r\n    extends IEvent<OriginalEvent, TargetGeometry> {\r\n    getSourceEvent(): IDomEvent<OriginalEvent, TargetGeometry>;\r\n  }\r\n\r\n  interface IEventController {\r\n    onStartListening?(events: IEventManager, type: string): void;\r\n\r\n    onStopListening?(events: IEventManager, type: string): void;\r\n  }\r\n\r\n  interface IEventEmitter {\r\n    events: IEventManager;\r\n  }\r\n\r\n  interface IEventGroup {\r\n    add<K extends keyof EventMap>(\r\n      types: K,\r\n      callback: (event: EventMap[K] | IEvent) => void,\r\n      context?: object,\r\n      priority?: number,\r\n    ): this;\r\n\r\n    add(\r\n      types: string[][] | string[] | string,\r\n      callback: (event: object | IEvent) => void,\r\n      context?: object,\r\n      priority?: number,\r\n    ): this;\r\n\r\n    remove(\r\n      types: string[][] | string[] | string,\r\n      callback: (event: object | IEvent) => void,\r\n      context?: object,\r\n      priority?: number,\r\n    ): this;\r\n\r\n    removeAll(): this;\r\n  }\r\n\r\n  interface IEventManager<TargetGeometry = {}> extends IEventTrigger {\r\n    add(\r\n      types: string[][] | string[] | string,\r\n      callback: (event: IEvent) => void,\r\n      context?: object,\r\n      priority?: number,\r\n    ): this;\r\n\r\n    getParent(): object | null;\r\n\r\n    group(): IEventGroup;\r\n\r\n    remove(\r\n      types: string[][] | string[] | string,\r\n      callback: (event: object | IEvent) => void,\r\n      context?: object,\r\n      priority?: number,\r\n    ): this;\r\n\r\n    setParent(parent: object | null): this;\r\n  }\r\n\r\n  interface IEventPane extends IDomEventEmitter, IPane {}\r\n\r\n  interface IEventTrigger {\r\n    fire(type: string, eventObject?: object | IEvent): this;\r\n  }\r\n\r\n  interface IEventWorkflowController extends IEventController {\r\n    onAfterEventFiring?(events: IEventManager, type: string, event?: IEvent): void;\r\n\r\n    onBeforeEventFiring?(events: IEventManager, type: string, event?: IEvent): void;\r\n  }\r\n\r\n  type IExpandableControlLayout = ILayout;\r\n\r\n  interface IFreezable {\r\n    events: IEventManager;\r\n\r\n    freeze(): IFreezable;\r\n\r\n    isFrozen(): boolean;\r\n\r\n    unfreeze(): IFreezable;\r\n  }\r\n\r\n  interface IGeocodeProvider {\r\n    geocode(\r\n      request: string,\r\n      options?: {\r\n        boundedBy?: number[][];\r\n        results?: number;\r\n        skip?: number;\r\n        strictBounds?: boolean;\r\n      },\r\n    ): Promise<object>;\r\n\r\n    suggest(\r\n      request: string,\r\n      options?: {\r\n        boundedBy?: number[][];\r\n        results?: number;\r\n        strictBounds?: boolean;\r\n      },\r\n    ): Promise<object>;\r\n  }\r\n\r\n  function geocode(request: string | number[], options?: IGeocodeOptions): Promise<object>;\r\n\r\n  interface IGeocodeOptions {\r\n    boundedBy?: number[][];\r\n    json?: boolean;\r\n    kind?: string;\r\n    provider?: IGeocodeProvider | string;\r\n    results?: number;\r\n    searchCoordOrder?: string;\r\n    skip?: number;\r\n    strictBounds?: boolean;\r\n  }\r\n\r\n  interface IGeometry extends IBaseGeometry, ICustomizable {\r\n    getMap(): Map | null;\r\n\r\n    getPixelGeometry(options?: object): IPixelGeometry;\r\n\r\n    setMap(map: Map): void;\r\n  }\r\n\r\n  interface IGeometryEditor extends ICustomizable, IEventEmitter {\r\n    geometry: IGeometry;\r\n    state: IDataManager;\r\n\r\n    startEditing(): void;\r\n\r\n    stopEditing(): void;\r\n  }\r\n\r\n  interface IGeometryEditorChildModel extends IGeometryEditorModel {\r\n    editor: IGeometryEditor;\r\n    geometry: IBaseGeometry;\r\n\r\n    getParent(): IGeometryEditorModel;\r\n\r\n    setPixels(pixels: number[]): void;\r\n  }\r\n\r\n  interface IGeometryEditorModel extends IEventEmitter {\r\n    destroy(): void;\r\n\r\n    getPixels(): number[];\r\n  }\r\n\r\n  type IGeometryEditorRootModel = IGeometryEditorModel;\r\n\r\n  interface IGeometryJson {\r\n    type: string;\r\n    coordinates: number[] | number[][] | number[][][];\r\n    fillRule?: 'evenOdd' | 'nonZero';\r\n    radius?: number;\r\n    [key: string]: any;\r\n  }\r\n\r\n  interface IGeoObject<T = IGeometry>\r\n    extends IChildOnMap,\r\n      ICustomizable,\r\n      IDomEventEmitter,\r\n      IParentOnMap {\r\n    geometry: T | null;\r\n\r\n    properties: IDataManager;\r\n\r\n    state: IDataManager;\r\n\r\n    balloon?: geoObject.Balloon;\r\n\r\n    getOverlay(): Promise<IOverlay | null>;\r\n\r\n    getOverlaySync(): IOverlay | null;\r\n  }\r\n\r\n  interface IGeoObjectCollection extends ICustomizable, IEventEmitter, IParentOnMap {\r\n    add(child: IGeoObject, index?: number): this;\r\n\r\n    each(callback: (object: IGeoObject) => void, context?: object): void;\r\n\r\n    get(index: number): IGeoObject;\r\n\r\n    getBounds(): number[][] | null;\r\n\r\n    getIterator(): IIterator;\r\n\r\n    getLength(): number;\r\n\r\n    getPixelBounds(): number[][] | null;\r\n\r\n    indexOf(object: IGeoObject): number;\r\n\r\n    remove(child: IGeoObject): this;\r\n\r\n    removeAll(): this;\r\n\r\n    set(index: number, child: IGeoObject): this;\r\n\r\n    splice(index: number, length: number): this;\r\n  }\r\n\r\n  interface IGeoObjectSequence extends ICustomizable, IEventEmitter, IParentOnMap {\r\n    each(callback: (geoObject: IGeoObject) => void, context?: object): void;\r\n\r\n    get(index: number): IGeoObject;\r\n\r\n    getBounds(): number[][] | null;\r\n\r\n    getIterator(): IIterator;\r\n\r\n    getLength(): number;\r\n\r\n    getPixelBounds(): number[][] | null;\r\n\r\n    indexOf(geoObject: IGeoObject): number;\r\n  }\r\n\r\n  interface IPromiseProvider {\r\n    then(onResolve: () => void, onReject: (err?: Error | any) => void): this;\r\n  }\r\n\r\n  type IGeoQuerySource =\r\n    | IGeoObject\r\n    | IGeoObject[]\r\n    | ICollection\r\n    | ICollection[]\r\n    | IPromiseProvider\r\n    | vow.Promise\r\n    | GeoQueryResult\r\n    | string\r\n    | object\r\n    | object[];\r\n\r\n  class GeoQueryResult implements IPromiseProvider {\r\n    constructor(source: IGeoQuerySource);\r\n\r\n    then(onResolve: () => void, onReject?: (err?: Error | any) => void, context?: object): this;\r\n\r\n    add(source: IGeoQuerySource): this;\r\n\r\n    addEvents(events: string | string[], callback: () => void, context?: object): this;\r\n\r\n    addTo(collection: ICollection): this;\r\n\r\n    addToMap(map: Map): this;\r\n\r\n    applyBoundsToMap(\r\n      map: Map,\r\n      options?: {\r\n        checkZoomRange?: boolean;\r\n        duration?: number;\r\n        preciseZoom?: boolean;\r\n        timingFUnction?: string;\r\n        useMapMargin?: boolean;\r\n        zoomMargin?: number | number[];\r\n      },\r\n    ): this;\r\n\r\n    clusterize(options?: IClustererOptions): Clusterer;\r\n\r\n    each(callback: (e: any) => void, context?: object): this;\r\n\r\n    get(index: number): IGeoObject;\r\n\r\n    getBounds(): number[][] | null;\r\n\r\n    getCenter(map?: Map): number[];\r\n\r\n    getCentralObject(map: Map): IGeoObject | null;\r\n\r\n    getClosestTo(object: IGeoObject | IGeometry | Map | number[] | object | any): IGeoObject | null;\r\n\r\n    getExtreme(key: 'top' | 'right' | 'bottom' | 'left'): number;\r\n\r\n    getExtremeObject(key: 'top' | 'right' | 'bottom' | 'left'): IGeoObject;\r\n\r\n    getGlobalPixelBounds(map: Map): Number[][] | null;\r\n\r\n    getGlobalPixelCenter(map: Map): number[];\r\n\r\n    getIterator(): IIterator;\r\n\r\n    getLength(): number;\r\n\r\n    getMaxZoom(map?: Map, options?: { useMapMargin?: boolean }): number;\r\n\r\n    getParent(): this | null;\r\n\r\n    indexOf(item: IGeoObject | any): number;\r\n\r\n    intersect(result: this): this;\r\n\r\n    isReady(): boolean;\r\n\r\n    map(callback: (e: any) => void, context?: object): this;\r\n\r\n    remove(\r\n      objects: IGeoObject | IGeoObject[] | ICollection | ICollection[] | this | vow.Promise | any,\r\n    ): this;\r\n\r\n    removeEvents(events: string | string[], callback: () => void, context?: object): void;\r\n\r\n    removeFrom(collection: ICollection): this;\r\n\r\n    removeFromMap(map: Map): this;\r\n\r\n    reverse(): this;\r\n\r\n    search(condition: string | ((o: object) => boolean)): this;\r\n\r\n    searchContaining(\r\n      object: IGeoObject | IGeometry | Map | number[] | number[][] | object | any,\r\n    ): this;\r\n\r\n    searchInside(object: IGeoObject | IGeometry | Map | any): this;\r\n\r\n    searchIntersect(\r\n      object: IGeoObject | IGeometry | Map | any,\r\n      options?: { considerOccurance?: boolean },\r\n    ): this;\r\n\r\n    setOptions(key: string | object, value?: any): this;\r\n\r\n    setProperties(path: string, value?: any): this;\r\n\r\n    slice(begin: number, end?: number): this;\r\n\r\n    sort(comparator: string | ((a: any, b: any) => number)): any;\r\n\r\n    sortByDistance(\r\n      object: IGeoObject | IGeometry | Map | number[] | number[][] | object | any,\r\n    ): this;\r\n\r\n    unsetOptions(keys: string | string[]): this;\r\n\r\n    unsetProperties(path: string): this;\r\n  }\r\n\r\n  function geoQuery(source: IGeoQuerySource): GeoQueryResult;\r\n\r\n  type IHintManager<T> = IPopupManager<T>;\r\n\r\n  interface IIterator {\r\n    getNext(): object | null;\r\n  }\r\n\r\n  interface ILayer extends IChildOnMap, ICustomizable, IEventEmitter {\r\n    getBrightness?(): number;\r\n\r\n    getCopyrights?(coords: number[], zoom: number): Promise<Array<string | HTMLElement>>;\r\n\r\n    getZoomRange?(point: number[]): Promise<number[]>;\r\n  }\r\n\r\n  interface ILayout extends IDomEventEmitter {\r\n    destroy(): void;\r\n\r\n    getData(): object;\r\n\r\n    getParentElement(): HTMLElement;\r\n\r\n    getShape(): IShape | null;\r\n\r\n    isEmpty(): boolean;\r\n\r\n    setData(data: object): void;\r\n\r\n    setParentElement(parent: HTMLElement | null): void;\r\n  }\r\n\r\n  interface ILinearRingGeometryAccess extends IFreezable {\r\n    contain(position: number): boolean;\r\n\r\n    freeze(): IFreezable;\r\n\r\n    get(index: number): number[];\r\n\r\n    getChildGeometry(index: number): IPointGeometryAccess;\r\n\r\n    getClosest(anchorPosition: number[]): object;\r\n\r\n    getCoordinates(): number[][];\r\n\r\n    getFillRule(): string;\r\n\r\n    getLength(): number;\r\n\r\n    insert(index: number, coordinates: number[]): ILinearRingGeometryAccess;\r\n\r\n    isFrozen(): boolean;\r\n\r\n    remove(index: number): number[];\r\n\r\n    set(index: number, coordinates: number[]): ILinearRingGeometryAccess;\r\n\r\n    setCoordinates(coordinates: number[][]): ILinearRingGeometryAccess;\r\n\r\n    setFillRule(fillRule: string): ILinearRingGeometryAccess;\r\n\r\n    splice(index: number, number: number): number[][];\r\n\r\n    unfreeze(): IFreezable;\r\n  }\r\n\r\n  interface ILineStringGeometry extends IGeometry, ILineStringGeometryAccess {}\r\n\r\n  interface ILineStringGeometryAccess extends IFreezable {\r\n    get(index: number): number[];\r\n\r\n    getChildGeometry(index: number): IPointGeometryAccess;\r\n\r\n    getClosest(anchorPosition: number[]): object;\r\n\r\n    getCoordinates(): number[][];\r\n\r\n    getLength(): number;\r\n\r\n    insert(index: number, coordinates: number[][]): ILineStringGeometryAccess;\r\n\r\n    remove(index: number): number[];\r\n\r\n    set(index: number, coordinates: number[]): ILineStringGeometryAccess;\r\n\r\n    setCoordinates(coordinates: number[][]): ILineStringGeometryAccess;\r\n\r\n    splice(index: number, length: number): number[][];\r\n  }\r\n\r\n  interface IMapAction extends IEventEmitter {\r\n    begin(mapActionManager: map.action.Manager): void;\r\n\r\n    end(): void;\r\n  }\r\n\r\n  interface IMapObjectCollection extends ICollection, ICustomizable, IParentOnMap {}\r\n\r\n  interface IMultiRouteModelJson {\r\n    params?: IMultiRouteParams;\r\n    referencePoints: IMultiRouteReferencePoint[];\r\n  }\r\n\r\n  interface IMultiRouteParams {\r\n    avoidTrafficJams?: boolean;\r\n    boundedBy?: number[][] | null;\r\n    requestSendInterval?: string | number;\r\n    results?: number;\r\n    reverseGeocoding?: boolean;\r\n    routingMode?: 'auto' | 'masstransit' | 'pedestrian';\r\n    searchCoordOrder?: string;\r\n    strictBounds?: boolean;\r\n    viaIndexes?: number[];\r\n  }\r\n\r\n  type IMultiRouteReferencePoint = string | number[] | geometry.Point;\r\n\r\n  interface IOptionManager extends IChild<IOptionManager>, IEventEmitter, IFreezable {\r\n    get(key: string, defaultValue?: any): any;\r\n\r\n    getAll(): Record<string, any>;\r\n\r\n    getName(): string;\r\n\r\n    getNative(key: string): object;\r\n\r\n    resolve(key: string, name?: string): object;\r\n\r\n    set(key: Record<string, any> | string, value?: any): this;\r\n\r\n    setName(name: string): void;\r\n  }\r\n\r\n  interface IOverlay extends ICustomizable, IDomEventEmitter {\r\n    getData(): object;\r\n\r\n    getGeometry(): IPixelGeometry;\r\n\r\n    getMap(): Map | null;\r\n\r\n    getShape(): IShape | null;\r\n\r\n    isEmpty(): boolean;\r\n\r\n    setData(data: object): void;\r\n\r\n    setGeometry(geometry: IPixelGeometry): void;\r\n\r\n    setMap(map: Map | null): void;\r\n  }\r\n\r\n  interface IPane extends IEventEmitter {\r\n    destroy(): void;\r\n\r\n    getElement(): HTMLElement;\r\n\r\n    getMap(): Map;\r\n\r\n    getOverflow(): 'visible' | 'hidden';\r\n\r\n    getZIndex(): number;\r\n  }\r\n\r\n  interface IPanorama {\r\n    getAngularBBox(): number[];\r\n\r\n    getConnectionArrows(): IPanoramaConnectionArrow[];\r\n\r\n    getConnectionMarkers(): IPanoramaConnectionMarker[];\r\n\r\n    getCoordSystem(): ICoordSystem;\r\n\r\n    getDefaultDirection(): number[];\r\n\r\n    getDefaultSpan(): number[];\r\n\r\n    getGraph(): IPanoramaGraph | null;\r\n\r\n    getMarkers(): IPanoramaMarker[];\r\n\r\n    getName(): string;\r\n\r\n    getPosition(): number[];\r\n\r\n    getTileLevels(): IPanoramaTileLevel[];\r\n\r\n    getTileSize(): number[];\r\n  }\r\n\r\n  interface IPanoramaConnection {\r\n    getConnectedPanorama(): Promise<IPanorama>;\r\n  }\r\n\r\n  interface IPanoramaConnectionArrow extends IPanoramaConnection {\r\n    properties: data.Manager;\r\n\r\n    getDirection(): number[];\r\n\r\n    getPanorama(): IPanorama;\r\n  }\r\n\r\n  interface IPanoramaConnectionMarker extends IPanoramaConnection, IPanoramaMarker {}\r\n\r\n  interface IPanoramaGraph {\r\n    getEdges(): IPanoramaGraphEdge[];\r\n\r\n    getNodes(): IPanoramaGraphEdge[];\r\n\r\n    getPanorama(): IPanorama;\r\n  }\r\n\r\n  interface IPanoramaGraphEdge {\r\n    getEndNodes(): IPanoramaGraphNode[];\r\n  }\r\n\r\n  interface IPanoramaGraphNode {\r\n    getConnectedPanorama(): Promise<IPanorama>;\r\n  }\r\n\r\n  interface IPanoramaMarker {\r\n    properties: data.Manager;\r\n\r\n    getIconSet(): Promise<IPanoramaMarkerIconSet>;\r\n\r\n    getPanorama(): IPanorama;\r\n\r\n    getPosition(): number[];\r\n  }\r\n\r\n  interface IPanoramaMarkerIcon {\r\n    image: HTMLCanvasElement | HTMLImageElement;\r\n    offset: number[];\r\n  }\r\n\r\n  interface IPanoramaMarkerIconSet {\r\n    default: IPanoramaMarkerIcon | null;\r\n    expanded: IPanoramaMarkerIcon | null;\r\n    expandedHovered: IPanoramaMarkerIcon | null;\r\n    hovered: IPanoramaMarkerIcon | null;\r\n  }\r\n\r\n  interface IPanoramaTileLevel {\r\n    getImageSize(): number[];\r\n\r\n    getTileUrl(x: number, y: number): string;\r\n  }\r\n\r\n  interface IParentOnMap {\r\n    getMap(): Map;\r\n  }\r\n\r\n  interface IPixelCircleGeometry extends IPixelGeometry {\r\n    getCoordinates(): number[];\r\n\r\n    getRadius(): number;\r\n  }\r\n\r\n  interface IPixelLineStringGeometry extends IPixelGeometry {\r\n    getClosest(anchorPosition: number[]): object;\r\n\r\n    getCoordinates(): number[][];\r\n\r\n    getLength(): number;\r\n  }\r\n\r\n  interface IPixelPointGeometry extends IPixelGeometry {\r\n    getCoordinates(): number[];\r\n  }\r\n\r\n  interface IPixelMultiLineGeometry extends IPixelGeometry {\r\n    getClosest(anchorPosition: number[]): object;\r\n\r\n    getCoordinates(): number[][][];\r\n\r\n    getLength(): number;\r\n  }\r\n\r\n  interface IPixelMultiPolygonGeometry extends IPixelGeometry {\r\n    contains(position: number[]): boolean;\r\n\r\n    getClosest(anchorPosition: number[]): object;\r\n\r\n    getCoordinates(): number[][][][];\r\n\r\n    getFillRule(): 'evenOdd' | 'nonZero';\r\n\r\n    getLength(): number;\r\n  }\r\n\r\n  interface IPixelPolygonGeometry extends IPixelGeometry {\r\n    contains(position: number[]): boolean;\r\n\r\n    getClosest(anchorPosition: number[]): object;\r\n\r\n    getCoordinates(): number[][][];\r\n\r\n    getFillRule(): 'evenOdd' | 'nonZero';\r\n\r\n    getLength(): number;\r\n  }\r\n\r\n  interface IPixelRectangleGeometry extends IPixelGeometry {\r\n    getClosest(anchorPosition: number[]): object;\r\n\r\n    getCoordinates(): number[][];\r\n  }\r\n\r\n  interface IPixelGeometry extends IBaseGeometry {\r\n    equals(geometry: IPixelGeometry): boolean;\r\n\r\n    getMetaData(): object;\r\n\r\n    scale(factor: number): IPixelGeometry;\r\n\r\n    shift(offset: number[]): IPixelGeometry;\r\n  }\r\n\r\n  interface IPointGeometry extends IGeometry, IPointGeometryAccess {}\r\n\r\n  interface IPointGeometryAccess {\r\n    getCoordinates(): number[] | null;\r\n\r\n    setCoordinates(coordinates: number[] | null): this;\r\n  }\r\n\r\n  interface IPolygonGeometry extends IGeometry, IPolygonGeometryAccess {}\r\n\r\n  interface IPolygonGeometryAccess extends IFreezable {\r\n    contains(position: number[]): boolean;\r\n\r\n    get(index: number): number[][];\r\n\r\n    getChildGeometry(index: number): ILinearRingGeometryAccess;\r\n\r\n    getClosest(anchorPosition: number[]): object;\r\n\r\n    getCoordinates(): number[][][];\r\n\r\n    getFillRule(): string;\r\n\r\n    getLength(): number;\r\n\r\n    insert(index: number, path: number[][]): IPolygonGeometryAccess;\r\n\r\n    remove(index: number): ILinearRingGeometryAccess;\r\n\r\n    set(index: number, path: number[][]): IPolygonGeometryAccess;\r\n\r\n    setCoordinates(coordinates: number[][][]): IPolygonGeometryAccess;\r\n\r\n    setFillRule(fillRule: string): IPolygonGeometryAccess;\r\n\r\n    splice(index: number, number: number): ILinearRingGeometryAccess[];\r\n  }\r\n\r\n  interface IPopup<T> extends ICustomizable, IEventEmitter {\r\n    close(force?: boolean): Promise<T>;\r\n\r\n    getData(): object;\r\n\r\n    getOverlay(): Promise<IOverlay>;\r\n\r\n    getOverlaySync(): IOverlay;\r\n\r\n    getPosition(): number[];\r\n\r\n    isOpen(): boolean;\r\n\r\n    open(position: number[], data: object | string | HTMLElement): Promise<T>;\r\n\r\n    setData(data: object | string | HTMLElement): Promise<T>;\r\n\r\n    setPosition(position: number[]): Promise<T>;\r\n  }\r\n\r\n  interface IPopupManager<T> extends IEventEmitter {\r\n    close(force?: boolean): Promise<T>;\r\n\r\n    destroy(): void;\r\n\r\n    getData(): object | null;\r\n\r\n    getOptions(): IOptionManager | null;\r\n\r\n    getOverlay(): Promise<IOverlay | null>;\r\n\r\n    getOverlaySync(): IOverlay | null;\r\n\r\n    getPosition(): number[] | null;\r\n\r\n    isOpen(): boolean;\r\n\r\n    open(position?: number[], data?: object | string | HTMLElement, options?: object): Promise<T>;\r\n\r\n    setData(data: object | string | HTMLElement): Promise<T>;\r\n\r\n    setOptions(options: object): Promise<T>;\r\n\r\n    setPosition(position: number[]): Promise<T>;\r\n  }\r\n\r\n  interface IPositioningContext {\r\n    fromClientPixels(clientPixelPoint: number[]): number[];\r\n\r\n    getZoom(): number;\r\n\r\n    toClientPixels(globalPixelPoint: number[]): number[];\r\n  }\r\n\r\n  interface IProjection {\r\n    fromGlobalPixels(globalPixelPoint: number[], zoom: number): number[];\r\n\r\n    getCoordSystem(): ICoordSystem;\r\n\r\n    isCycled(): boolean[];\r\n\r\n    toGlobalPixels(coordPoint: number[], zoom: number): number[];\r\n  }\r\n\r\n  interface IRoutePanel {\r\n    options: IOptionManager;\r\n\r\n    state: IDataManager;\r\n\r\n    enable(): void;\r\n\r\n    geolocate(name: string): Promise<{ geoObjects: GeoObjectCollection }>;\r\n\r\n    getRoute(): multiRouter.MultiRoute;\r\n\r\n    getRouteAsync(): Promise<multiRouter.MultiRoute>;\r\n\r\n    isEnable(): boolean;\r\n\r\n    switchPoints(): void;\r\n  }\r\n\r\n  type ISearchControlLayout = IExpandableControlLayout;\r\n\r\n  interface ISelectableControl extends IControl {\r\n    deselect(): void;\r\n\r\n    disable(): void;\r\n\r\n    enable(): void;\r\n\r\n    isEnabled(): boolean;\r\n\r\n    isSelected(): boolean;\r\n\r\n    select(): void;\r\n  }\r\n\r\n  type ISelectableControlLayout = ILayout;\r\n\r\n  type ITrafficControlLayout = ILayout;\r\n\r\n  type IZoomControlLayout = ILayout;\r\n\r\n  interface IShape {\r\n    contains(position: number[]): boolean;\r\n\r\n    equals(shape: IShape): boolean;\r\n\r\n    getBounds(): number[][] | null;\r\n\r\n    getGeometry(): IPixelGeometry;\r\n\r\n    getType(): string;\r\n\r\n    scale(factor: number): IShape;\r\n\r\n    shift(offset: number[]): IShape;\r\n  }\r\n\r\n  class Monitor {\r\n    constructor(dataManager: IDataManager | IOptionManager);\r\n\r\n    add(\r\n      name: string[] | string,\r\n      changeCallback: (event: object | IEvent) => void,\r\n      context?: any,\r\n      params?: any,\r\n    ): Monitor;\r\n\r\n    forceChange(): Monitor;\r\n\r\n    get(name: string): any;\r\n\r\n    remove(name: string): Monitor;\r\n\r\n    removeAll(): Monitor;\r\n  }\r\n\r\n  class ObjectManager implements ICustomizable, IEventEmitter, IGeoObject, IParentOnMap {\r\n    constructor(options: IObjectManagerOptions);\r\n\r\n    clusters: objectManager.ClusterCollection;\r\n\r\n    events: IEventManager;\r\n\r\n    geometry: IGeometry | null;\r\n\r\n    objects: objectManager.ObjectCollection;\r\n\r\n    options: IOptionManager;\r\n\r\n    properties: IDataManager;\r\n\r\n    state: IDataManager;\r\n\r\n    add(objects: object | object[] | string): this;\r\n\r\n    getBounds(): number[][] | null;\r\n\r\n    getFilter(): string | ((object: object | string) => boolean) | null;\r\n\r\n    getMap(): Map;\r\n\r\n    getObjectState(id: any): {\r\n      found: boolean;\r\n      isShown: boolean;\r\n      cluster?: object;\r\n      isClustered: boolean;\r\n      isFilteredOut: boolean;\r\n    };\r\n\r\n    getOverlay(): Promise<IOverlay | null>;\r\n\r\n    getOverlaySync(): IOverlay | null;\r\n\r\n    getParent(): IParentOnMap | null;\r\n\r\n    getPixelBounds(): number[][] | null;\r\n\r\n    remove(objects: object | object[] | string): this;\r\n\r\n    removeAll(): this;\r\n\r\n    setFilter(filterFunction: ((object: object) => boolean) | string): void;\r\n\r\n    setParent(parent: IParentOnMap | null): this;\r\n  }\r\n\r\n  interface IObjectManagerOptions\r\n    extends Omit<IClustererOptionsInject, 'hasBalloon' | 'hasHint'>,\r\n      IClusterPlacemarkOptionsWithClusterPrefix,\r\n      Omit<IGeoObjectOptionsWithGeoObjectPrefix, 'visible'> {\r\n    clusterize?: boolean | undefined;\r\n    syncOverlayInit?: boolean | undefined;\r\n    viewportMargin?: number[] | number | undefined;\r\n  }\r\n\r\n  namespace objectManager {\r\n    class Balloon implements Omit<IBalloonManager<map.Balloon>, 'isOpen' | 'open'> {\r\n      constructor(collection: object);\r\n\r\n      events: IEventManager;\r\n\r\n      autoPan(): Promise<ymaps.Balloon>;\r\n\r\n      close(force?: boolean): Promise<ymaps.Balloon>;\r\n\r\n      destroy(): void;\r\n\r\n      getData(): object | null;\r\n\r\n      getOptions(): IOptionManager | null;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getPosition(): number[] | null;\r\n\r\n      isOpen(id: any): boolean;\r\n\r\n      open(objectId: any, anchorPixelPosition?: boolean): Promise<ymaps.Balloon>;\r\n\r\n      setData(objectData: object | string | HTMLElement): Promise<ymaps.Balloon>;\r\n\r\n      setOptions(options: object): Promise<ymaps.Balloon>;\r\n\r\n      setPosition(position: number[]): Promise<ymaps.Balloon>;\r\n    }\r\n\r\n    class ClusterCollection implements ICustomizable, IEventEmitter {\r\n      balloon: objectManager.Balloon;\r\n\r\n      events: IEventManager;\r\n\r\n      hint: objectManager.Hint;\r\n\r\n      options: option.Manager;\r\n\r\n      overlays: objectManager.OverlayCollection;\r\n\r\n      state: data.Manager;\r\n\r\n      each(callback: (cluster: object) => void, context?: object): void;\r\n\r\n      getAll(): object[];\r\n\r\n      getById(id: string): object | null;\r\n\r\n      getIterator(): IIterator;\r\n\r\n      getLength(): number;\r\n\r\n      getObjectManager(): ObjectManager;\r\n\r\n      setClusterOptions(objectId: string, options: object): this;\r\n    }\r\n\r\n    class Hint implements Omit<IHintManager<map.Hint>, 'isOpen' | 'open'> {\r\n      constructor(collection: object);\r\n\r\n      events: IEventManager;\r\n\r\n      close(force?: boolean): Promise<map.Hint>;\r\n\r\n      destroy(): void;\r\n\r\n      getData(): object | null;\r\n\r\n      getOptions(): IOptionManager | null;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getPosition(): number[] | null;\r\n\r\n      isOpen(id: any): boolean;\r\n\r\n      open(objectId: any, position?: number[]): Promise<map.Hint>;\r\n\r\n      setData(data: object | string | HTMLElement): Promise<map.Hint>;\r\n\r\n      setOptions(options: object): Promise<map.Hint>;\r\n\r\n      setPosition(position: number[]): Promise<map.Hint>;\r\n    }\r\n\r\n    class ObjectCollection implements ICollection, ICustomizable {\r\n      balloon: objectManager.Balloon;\r\n\r\n      events: IEventManager;\r\n\r\n      hint: objectManager.Hint;\r\n\r\n      options: option.Manager;\r\n\r\n      overlays: objectManager.OverlayCollection;\r\n\r\n      add(object: object): this;\r\n\r\n      each(callback: (object: object) => void, context?: object): void;\r\n\r\n      getAll(): object[];\r\n\r\n      getById(id: number): object | null;\r\n\r\n      getIterator(): IIterator;\r\n\r\n      getLength(): number;\r\n\r\n      getObjectManager(): ObjectManager;\r\n\r\n      remove(data: object | object[] | string): this;\r\n\r\n      removeAll(): objectManager.ObjectCollection;\r\n\r\n      setObjectOptions(objectId: any, options: object): ObjectCollection;\r\n    }\r\n\r\n    class OverlayCollection implements ICustomizable, IEventEmitter {\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      each(callback: (overlay: IOverlay) => void, context?: object): void;\r\n\r\n      getAll(): object[];\r\n\r\n      getById(id: number): IOverlay | null;\r\n\r\n      getId(overlay: IOverlay): number | null;\r\n\r\n      getIterator(): IIterator;\r\n\r\n      getLength(): number;\r\n    }\r\n  }\r\n\r\n  namespace modules {\r\n    function define(\r\n      module: string,\r\n      depends?: string[],\r\n      resolveCallback?: ResolveCallbackFunction,\r\n      context?: object,\r\n    ): typeof modules;\r\n\r\n    function define(\r\n      module: string,\r\n      resolveCallback?: ResolveCallbackFunction,\r\n      context?: object,\r\n    ): typeof modules;\r\n\r\n    function isDefined(module: string): boolean;\r\n\r\n    function require(\r\n      modules: string | string[],\r\n      successCallback?: (...args: any[]) => void,\r\n      errorCallback?: (error: any) => void,\r\n      context?: object,\r\n    ): vow.Promise;\r\n  }\r\n\r\n  interface IHotspotObjectSource extends ICustomizable, IEventEmitter {\r\n    cancelLastRequest(): void;\r\n\r\n    requestObjects(\r\n      layer: hotspot.Layer,\r\n      tileNumber: number[],\r\n      zoom: number,\r\n      callback: () => void,\r\n    ): void;\r\n  }\r\n\r\n  interface IHotspotLayerOptions\r\n    extends IBalloonOptionsWithBalloonPrefix,\r\n      IHintOptionsWithHintPrefix {\r\n    cursor?: string;\r\n    dontChangeCursor?: boolean;\r\n    hasBalloon?: boolean;\r\n    hasHint?: boolean;\r\n    interactivityModel?: InteractivityModelKey;\r\n    openBalloonOnClick?: boolean;\r\n    openEmptyBalloon?: boolean;\r\n    openEmptyHint?: boolean;\r\n    openHintOnHover?: boolean;\r\n    pane?: IEventPane;\r\n    showEmptyBalloon?: boolean;\r\n    zIndex?: number;\r\n  }\r\n\r\n  interface IHotspotLayerObject extends ICustomizable, IDomEventEmitter {\r\n    getGeometry(): object;\r\n\r\n    getHotspot(): IHotspot;\r\n\r\n    getId(): number;\r\n\r\n    getProperties(): object;\r\n\r\n    setGeometry(geometry: object): void;\r\n\r\n    setId(id: number): void;\r\n\r\n    setProperties(properties: object): void;\r\n  }\r\n\r\n  namespace hotspot {\r\n    namespace layer {\r\n      namespace addon {\r\n        const balloon: {\r\n          get(layer: hotspot.Layer): IPopupManager<Balloon>;\r\n        };\r\n\r\n        const hint: {\r\n          get(layer: hotspot.Layer): IPopupManager<Hint>;\r\n        };\r\n      }\r\n\r\n      class Balloon implements IBalloonManager<Balloon> {\r\n        constructor(hotspotLayer: object);\r\n\r\n        events: IEventManager;\r\n\r\n        autoPan(): Promise<Balloon>;\r\n\r\n        close(force?: boolean): Promise<Balloon>;\r\n\r\n        destroy(): void;\r\n\r\n        getData(): object | null;\r\n\r\n        getOptions(): IOptionManager | null;\r\n\r\n        getOverlay(): Promise<IOverlay | null>;\r\n\r\n        getOverlaySync(): IOverlay | null;\r\n\r\n        getPosition(): number[] | null;\r\n\r\n        isOpen(): boolean;\r\n\r\n        open(position?: number[], data?: object, options?: object): Promise<Balloon>;\r\n\r\n        setData(data: object | string | HTMLElement): Promise<Balloon>;\r\n\r\n        setOptions(options: object): Promise<Balloon>;\r\n\r\n        setPosition(position: number[]): Promise<Balloon>;\r\n      }\r\n\r\n      class Hint implements IHintManager<Hint> {\r\n        constructor(hotspotLayer: object);\r\n\r\n        events: IEventManager;\r\n\r\n        close(force?: boolean): Promise<Hint>;\r\n\r\n        destroy(): void;\r\n\r\n        getData(): object | null;\r\n\r\n        getOptions(): IOptionManager | null;\r\n\r\n        getOverlay(): Promise<IOverlay | null>;\r\n\r\n        getOverlaySync(): IOverlay | null;\r\n\r\n        getPosition(): number[] | null;\r\n\r\n        isOpen(): boolean;\r\n\r\n        open(position?: number[], data?: object, options?: object): Promise<Hint>;\r\n\r\n        setData(data: object | string | HTMLElement): Promise<Hint>;\r\n\r\n        setOptions(options: object): Promise<Hint>;\r\n\r\n        setPosition(position: number[]): Promise<Hint>;\r\n      }\r\n\r\n      class Object implements IHotspotLayerObject {\r\n        constructor(shape: IShape, feature: object, options: object);\r\n\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        getGeometry(): object;\r\n\r\n        getHotspot(): IHotspot;\r\n\r\n        getId(): number;\r\n\r\n        getProperties(): object;\r\n\r\n        setGeometry(geometry: object): void;\r\n\r\n        setId(id: number): void;\r\n\r\n        setProperties(properties: object): void;\r\n      }\r\n    }\r\n\r\n    class Layer implements IChildOnMap, ICustomizable {\r\n      constructor(objectSource: IHotspotObjectSource, options: IHotspotLayerOptions);\r\n\r\n      balloon: hotspot.layer.Balloon;\r\n\r\n      events: IEventManager;\r\n\r\n      hint: hotspot.layer.Balloon;\r\n\r\n      options: IOptionManager;\r\n\r\n      getMap(): Map;\r\n\r\n      getObjectInPosition(coords: number[]): vow.Promise;\r\n\r\n      getObjectsInPosition(coords: number[]): vow.Promise;\r\n\r\n      getObjectSource(): ObjectSource;\r\n\r\n      getParent(): IParentOnMap | null;\r\n\r\n      setParent(parent: IParentOnMap | null): this;\r\n\r\n      update(): void;\r\n    }\r\n\r\n    class ObjectSource implements IHotspotObjectSource {\r\n      constructor(\r\n        tileUrlTemplate: string | ((tileNumber: number[], tileZoom: number) => string),\r\n        keyTemplate?: string | ((tileNumber: number[], tileZoom: number) => string),\r\n        options?: {\r\n          bounds?: number[][];\r\n          maxZoom?: number;\r\n          minZoom?: number;\r\n          noCache?: boolean;\r\n        },\r\n      );\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      cancelLastRequest(): void;\r\n\r\n      getKey(tileNumber: number[], zoom: number): string;\r\n\r\n      getKeyTemplate(): string;\r\n\r\n      getTileUrl(tileNumber: number[], zoom: number): string;\r\n\r\n      getTileUrlTemplate(): string;\r\n\r\n      parseResponse(\r\n        layer: hotspot.Layer,\r\n        res: object,\r\n        callback: () => void,\r\n        tileNumber: number[],\r\n        zoom: number,\r\n      ): void;\r\n\r\n      requestObjects(\r\n        layer: hotspot.Layer,\r\n        tileNumber: number[],\r\n        zoom: number,\r\n        callback: () => void,\r\n      ): void;\r\n\r\n      restrict(layer: hotspot.Layer, tileNumber: number[], zoom: number): boolean;\r\n\r\n      setKeyTemplate(template: string): void;\r\n\r\n      setTileUrlTemplate(template: string): void;\r\n    }\r\n  }\r\n\r\n  class Hotspot implements IHotspot {\r\n    constructor(shape: IShape, zIndex?: number);\r\n\r\n    events: IEventManager;\r\n  }\r\n\r\n  interface IHotspot extends IDomEventEmitter {\r\n    events: IEventManager;\r\n  }\r\n\r\n  namespace geolocation {\r\n    interface IGeolocationOptions {\r\n      autoReverseGeocode?: boolean;\r\n      mapStateAutoApply?: boolean;\r\n      provider?: string;\r\n      timeout?: number;\r\n      useMapMargin?: boolean;\r\n    }\r\n\r\n    function get(options?: IGeolocationOptions): Promise<{ geoObjects: GeoObjectCollection }>;\r\n  }\r\n\r\n  interface ISuggestProvider {\r\n    suggest(\r\n      request: string,\r\n      options?: {\r\n        boundedBy?: number[][];\r\n        results?: number;\r\n      },\r\n    ): Promise<object>;\r\n  }\r\n\r\n  interface ISuggestViewOptions {\r\n    boundedBy?: number[][];\r\n    container?: HTMLElement;\r\n    layout?: string | any;\r\n    offset?: number[];\r\n    provider?: string | ISuggestProvider;\r\n    results?: number;\r\n    width?: number;\r\n    zIndex?: number;\r\n  }\r\n\r\n  class SuggestView implements ICustomizable, IEventEmitter {\r\n    constructor(element: HTMLElement | string, options?: ISuggestViewOptions);\r\n\r\n    events: IEventManager;\r\n\r\n    options: IOptionManager;\r\n\r\n    state: data.Manager;\r\n\r\n    destroy(): void;\r\n  }\r\n\r\n  interface ITile extends IEventEmitter {\r\n    events: IEventManager;\r\n\r\n    destroy(): void;\r\n\r\n    isReady(): boolean;\r\n  }\r\n\r\n  interface ICanvasTile extends ITile {\r\n    events: IEventManager;\r\n\r\n    destroy(): void;\r\n\r\n    isReady(): boolean;\r\n\r\n    renderAt(context: any, canvasSize: number[], bounds: number[][], animate?: boolean): void;\r\n  }\r\n\r\n  interface IDomTile extends ITile {\r\n    events: IEventManager;\r\n\r\n    destroy(): void;\r\n\r\n    isReady(): boolean;\r\n\r\n    renderAt(context: HTMLElement, clientBounds: number[][], animate?: boolean): void;\r\n  }\r\n\r\n  namespace layer {\r\n    const storage: util.Storage;\r\n\r\n    namespace tile {\r\n      interface ITileOptions {\r\n        notFoundTile?: string | null;\r\n        tileAnimationDuration?: number;\r\n      }\r\n\r\n      interface ITileRenderOptions {\r\n        tileNumber?: number[];\r\n        tileZoom?: number;\r\n      }\r\n\r\n      class CanvasTile implements ICanvasTile {\r\n        constructor(url: string, options?: ITileOptions, renderOptions?: ITileRenderOptions);\r\n\r\n        events: IEventManager;\r\n\r\n        destroy(): void;\r\n\r\n        isReady(): boolean;\r\n\r\n        renderAt(context: any, canvasSize: number[], bounds: number[][], animate?: boolean): void;\r\n      }\r\n\r\n      class DomTile implements IDomTile {\r\n        constructor(url: string, options?: ITileOptions, renderOptions?: ITileRenderOptions);\r\n\r\n        events: IEventManager;\r\n\r\n        destroy(): void;\r\n\r\n        isReady(): boolean;\r\n\r\n        renderAt(context: HTMLElement, clientBounds: number[][], animate?: boolean): void;\r\n      }\r\n    }\r\n\r\n    namespace tileContainer {\r\n      interface CanvasContainerOptions {\r\n        notFoundTile?: string | null;\r\n        tileClass?: ICanvasTile;\r\n        tileTransparent?: boolean;\r\n      }\r\n\r\n      class CanvasContainer implements IChildOnMap {\r\n        constructor(layer: ILayer, options?: CanvasContainerOptions);\r\n\r\n        events: IEventManager;\r\n\r\n        getMap(): Map;\r\n\r\n        getParent(): object | null;\r\n\r\n        getTile(tileNumber: number[], tileZoom: number, priority: number): ICanvasTile;\r\n\r\n        setParent(parent: object | null): this;\r\n      }\r\n\r\n      interface DomContainerOptions {\r\n        notFoundTile?: string | null;\r\n        tileClass?: IDomTile;\r\n        tileTransparent?: boolean;\r\n      }\r\n\r\n      class DomContainer implements IChildOnMap {\r\n        constructor(layer: ILayer, options?: DomContainerOptions);\r\n\r\n        events: IEventManager;\r\n\r\n        getMap(): Map;\r\n\r\n        getParent(): object | null;\r\n\r\n        getTile(tileNumber: number[], tileZoom: number, priority: number): ICanvasTile;\r\n\r\n        setParent(parent: object | null): this;\r\n      }\r\n    }\r\n  }\r\n\r\n  namespace mapType {\r\n    const storage: util.Storage;\r\n  }\r\n\r\n  namespace projection {\r\n    class Cartesian implements IProjection {\r\n      constructor(bounds: number[][], cycled?: boolean[], scale?: number | number[]);\r\n\r\n      fromGlobalPixels(globalPixelPoint: number[], zoom: number): number[];\r\n\r\n      getCoordSystem(): ICoordSystem;\r\n\r\n      isCycled(): boolean[];\r\n\r\n      toGlobalPixels(coordPoint: number[], zoom: number): number[];\r\n    }\r\n\r\n    const sphericalMercator: IProjection;\r\n\r\n    const wgs84Mercator: IProjection;\r\n  }\r\n}\r\n"]}