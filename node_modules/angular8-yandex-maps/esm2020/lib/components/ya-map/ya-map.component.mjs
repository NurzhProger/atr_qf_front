import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { BehaviorSubject, Subject, takeUntil } from 'rxjs';
import { take } from 'rxjs/operators';
import { EventManager } from '../../event-manager/event-manager';
import { generateRandomId } from '../../utils/generate-random-id';
import * as i0 from "@angular/core";
import * as i1 from "../../services/ya-api-loader/ya-api-loader.service";
/**
 * The `ya-map` component wraps `ymaps.Map` class from the Yandex.Maps API.
 * You can configure the map via the component's inputs.
 * Events can be bound using the outputs of the component.
 *
 * <example-url>https://stackblitz.com/edit/map-onload-event?embed=1&view=preview</example-url>
 *
 * @example
 * ```html
 * <ya-map
 *   [center]="[55.751952, 37.600739]"
 *   [state]="{type: 'yandex#satellite'}"
 * ></ya-map>
 * ```
 */
export class YaMapComponent {
    constructor(ngZone, yaApiLoaderService) {
        this.ngZone = ngZone;
        this.yaApiLoaderService = yaApiLoaderService;
        this.destroy$ = new Subject();
        this.eventManager = new EventManager(this.ngZone);
        this.map$ = new BehaviorSubject(null);
        /**
         * Map instance is created.
         */
        this.ready = new EventEmitter();
        /**
         * The start of a new smooth map movement.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-actionbegin}
         */
        this.actionbegin = this.eventManager.getLazyEmitter('actionbegin');
        /**
         * Event that occurs when an action step was prematurely stopped.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-actionbreak}
         */
        this.actionbreak = this.eventManager.getLazyEmitter('actionbreak');
        /**
         * The end of smooth map movement.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-actionend}
         */
        this.actionend = this.eventManager.getLazyEmitter('actionend');
        /**
         * The start of a new step of smooth movement.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-actiontick}
         */
        this.actiontick = this.eventManager.getLazyEmitter('actiontick');
        /**
         * The end of performing a step of smooth movement.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-actiontickcomplete}
         */
        this.actiontickcomplete = this.eventManager.getLazyEmitter('actiontickcomplete');
        /**
         * Closing the balloon.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-balloonclose}
         */
        this.balloonclose = this.eventManager.getLazyEmitter('balloonclose');
        /**
         * Opening a balloon on a map.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-balloonopen}
         */
        this.balloonopen = this.eventManager.getLazyEmitter('balloonopen');
        /**
         * Event for a change to the map viewport.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-boundschange}
         */
        this.boundschange = this.eventManager.getLazyEmitter('boundschange');
        /**
         * Single left-click on the object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-click}
         */
        this.yaclick = this.eventManager.getLazyEmitter('click');
        /**
         * Calls the element's context menu.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-contextmenu}
         */
        this.yacontextmenu = this.eventManager.getLazyEmitter('contextmenu');
        /**
         * Double left-click on the object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-dblclick}
         */
        this.yadblclick = this.eventManager.getLazyEmitter('dblclick');
        /**
         * The map was destroyed.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-destroy}
         */
        this.destroy = this.eventManager.getLazyEmitter('destroy');
        /**
         * Closing the hint.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-hintclose}
         */
        this.hintclose = this.eventManager.getLazyEmitter('hintclose');
        /**
         * Opening a hint on a map.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-hintopen}
         */
        this.hintopen = this.eventManager.getLazyEmitter('hintopen');
        /**
         * Map margins changed.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-marginchange}
         */
        this.marginchange = this.eventManager.getLazyEmitter('marginchange');
        /**
         * Pressing the mouse button over the object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mousedown}
         */
        this.yamousedown = this.eventManager.getLazyEmitter('mousedown');
        /**
         * Pointing the cursor at the object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mouseenter}
         */
        this.yamouseenter = this.eventManager.getLazyEmitter('mouseenter');
        /**
         * Moving the cursor off of the object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mouseleave}
         */
        this.yamouseleave = this.eventManager.getLazyEmitter('mouseleave');
        /**
         * Moving the cursor over the object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mousemove}
         */
        this.yamousemove = this.eventManager.getLazyEmitter('mousemove');
        /**
         * Letting go of the mouse button over an object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mouseup}
         */
        this.yamouseup = this.eventManager.getLazyEmitter('mouseup');
        /**
         * End of multitouch.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-multitouchend}
         */
        this.multitouchend = this.eventManager.getLazyEmitter('multitouchend');
        /**
         * Repeating event during multitouch.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-multitouchmove}
         */
        this.multitouchmove = this.eventManager.getLazyEmitter('multitouchmove');
        /**
         * Start of multitouch.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-multitouchstart}
         */
        this.multitouchstart = this.eventManager.getLazyEmitter('multitouchstart');
        /**
         * Map options changed.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-optionschange}
         */
        this.optionschange = this.eventManager.getLazyEmitter('optionschange');
        /**
         * Map size changed.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-sizechange}
         */
        this.sizechange = this.eventManager.getLazyEmitter('sizechange');
        /**
         * The map type changed.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#event_detail__event-typechange}
         */
        this.typechange = this.eventManager.getLazyEmitter('typechange');
        /**
         * Mouse wheel scrolling.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-wheel}
         */
        this.yawheel = this.eventManager.getLazyEmitter('wheel');
    }
    /**
     * Handles input changes and passes them in API.
     * @param changes
     */
    ngOnChanges(changes) {
        const map = this.map$.value;
        if (map) {
            const { center, zoom, state, options } = changes;
            if (state) {
                this.setState(this.combineState(), map);
            }
            if (center) {
                map.setCenter(center.currentValue);
            }
            if (zoom) {
                map.setZoom(zoom.currentValue);
            }
            if (options) {
                map.options.set(options.currentValue);
            }
        }
    }
    ngAfterViewInit() {
        this.yaApiLoaderService
            .load()
            .pipe(take(1), takeUntil(this.destroy$))
            .subscribe(() => {
            const id = generateRandomId();
            const map = this.createMap(id);
            this.map$.next(map);
            this.eventManager.setTarget(map);
            this.ngZone.run(() => this.ready.emit({ ymaps, target: map }));
        });
    }
    ngOnDestroy() {
        this.eventManager.destroy();
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * Destructs state and passes it in API.
     * @param state
     * @param map
     */
    setState(state, map) {
        const { behaviors, bounds, center, controls, margin, type, zoom } = state;
        if (behaviors) {
            map.behaviors.enable(behaviors);
        }
        if (bounds) {
            map.setBounds(bounds);
        }
        if (center) {
            map.setCenter(center);
        }
        if (controls) {
            controls.forEach((control) => map.controls.add(control));
        }
        if (margin) {
            map.margin.setDefaultMargin(margin);
        }
        if (type) {
            map.setType(type);
        }
        if (zoom) {
            map.setZoom(zoom);
        }
    }
    /**
     * Creates a map.
     * @param id ID which will be set to the map container.
     */
    createMap(id) {
        const containerElem = this.container.nativeElement;
        containerElem.setAttribute('id', id);
        containerElem.style.cssText = 'width: 100%; height: 100%;';
        return new ymaps.Map(id, this.combineState(), this.options || {});
    }
    /**
     * Combines the center and zoom into single object.
     */
    combineState() {
        const state = this.state || {};
        return {
            ...state,
            center: this.center || state.center || [0, 0],
            zoom: this.zoom ?? state.zoom ?? 10,
        };
    }
}
YaMapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: YaMapComponent, deps: [{ token: i0.NgZone }, { token: i1.YaApiLoaderService }], target: i0.ɵɵFactoryTarget.Component });
YaMapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.5", type: YaMapComponent, selector: "ya-map", inputs: { center: "center", zoom: "zoom", state: "state", options: "options" }, outputs: { ready: "ready", actionbegin: "actionbegin", actionbreak: "actionbreak", actionend: "actionend", actiontick: "actiontick", actiontickcomplete: "actiontickcomplete", balloonclose: "balloonclose", balloonopen: "balloonopen", boundschange: "boundschange", yaclick: "yaclick", yacontextmenu: "yacontextmenu", yadblclick: "yadblclick", destroy: "destroy", hintclose: "hintclose", hintopen: "hintopen", marginchange: "marginchange", yamousedown: "yamousedown", yamouseenter: "yamouseenter", yamouseleave: "yamouseleave", yamousemove: "yamousemove", yamouseup: "yamouseup", multitouchend: "multitouchend", multitouchmove: "multitouchmove", multitouchstart: "multitouchstart", optionschange: "optionschange", sizechange: "sizechange", typechange: "typechange", yawheel: "yawheel" }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true }], usesOnChanges: true, ngImport: i0, template: '<div #container></div>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: YaMapComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ya-map',
                    template: '<div #container></div>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.YaApiLoaderService }]; }, propDecorators: { container: [{
                type: ViewChild,
                args: ['container']
            }], center: [{
                type: Input
            }], zoom: [{
                type: Input
            }], state: [{
                type: Input
            }], options: [{
                type: Input
            }], ready: [{
                type: Output
            }], actionbegin: [{
                type: Output
            }], actionbreak: [{
                type: Output
            }], actionend: [{
                type: Output
            }], actiontick: [{
                type: Output
            }], actiontickcomplete: [{
                type: Output
            }], balloonclose: [{
                type: Output
            }], balloonopen: [{
                type: Output
            }], boundschange: [{
                type: Output
            }], yaclick: [{
                type: Output
            }], yacontextmenu: [{
                type: Output
            }], yadblclick: [{
                type: Output
            }], destroy: [{
                type: Output
            }], hintclose: [{
                type: Output
            }], hintopen: [{
                type: Output
            }], marginchange: [{
                type: Output
            }], yamousedown: [{
                type: Output
            }], yamouseenter: [{
                type: Output
            }], yamouseleave: [{
                type: Output
            }], yamousemove: [{
                type: Output
            }], yamouseup: [{
                type: Output
            }], multitouchend: [{
                type: Output
            }], multitouchmove: [{
                type: Output
            }], multitouchstart: [{
                type: Output
            }], optionschange: [{
                type: Output
            }], sizechange: [{
                type: Output
            }], typechange: [{
                type: Output
            }], yawheel: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,