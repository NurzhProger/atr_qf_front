import { ChangeDetectionStrategy, Component, ContentChildren, EventEmitter, Input, Output, } from '@angular/core';
import { Subject, takeUntil } from 'rxjs';
import { filter, take } from 'rxjs/operators';
import { EventManager } from '../../event-manager/event-manager';
import { YaGeoObjectDirective } from '../ya-geoobject/ya-geoobject.directive';
import { YaPlacemarkDirective } from '../ya-placemark/ya-placemark.directive';
import * as i0 from "@angular/core";
import * as i1 from "../ya-map/ya-map.component";
/**
 * The `ya-clusterer` component wraps `ymaps.Clusterer` class from the Yandex.Maps API.
 * You can configure it via the component's inputs.
 * Events can be bound using the outputs of the component.
 *
 * <example-url>https://stackblitz.com/edit/placemark-clusterer?embed=1&view=preview</example-url>
 *
 * @example
 * ```html
 * <ya-map [center]="[55.761952, 37.620739]">
 *   <ya-clusterer [options]="{ minClusterSize: 5 }">
 *     <ya-placemark [geometry]="[55.74, 37.5]"></ya-placemark>
 *     <ya-placemark [geometry]="[55.64, 37.46]"></ya-placemark>
 *     <ya-placemark [geometry]="[55.75, 37.38]"></ya-placemark>
 *
 *     <ya-geoobject
 *       [feature]="{ geometry: { type: 'Point', coordinates: [55.81, 37.4] } }"
 *      ></ya-geoobject>
 *
 *     <ya-geoobject
 *       [feature]="{ geometry: { type: 'Point', coordinates: [55.7, 37.39] } }"
 *      ></ya-geoobject>
 *   </ya-clusterer>
 * </ya-map>
 * ```
 */
export class YaClustererComponent {
    constructor(ngZone, yaMapComponent) {
        this.ngZone = ngZone;
        this.yaMapComponent = yaMapComponent;
        this.destroy$ = new Subject();
        this.eventManager = new EventManager(this.ngZone);
        /**
         * Clusterer instance is added to a Map.
         */
        this.ready = new EventEmitter();
        /**
         * Closing the hint.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Clusterer.html#event_detail__event-hintclose}
         */
        this.hintclose = this.eventManager.getLazyEmitter('hintclose');
        /**
         * Opening a hint on a map.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Clusterer.html#event_detail__event-hintopen}
         */
        this.hintopen = this.eventManager.getLazyEmitter('hintopen');
        /**
         * Map reference changed.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IParentOnMap.html#event_detail__event-mapchange}
         */
        this.mapchange = this.eventManager.getLazyEmitter('mapchange');
        /**
         * Change to the object options.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/ICustomizable.html#event_detail__event-optionschange}
         */
        this.optionschange = this.eventManager.getLazyEmitter('optionschange');
        /**
         * The parent object reference changed.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IChild.html#event_detail__event-parentchange}
         */
        this.parentchange = this.eventManager.getLazyEmitter('parentchange');
    }
    /**
     * Handles input changes and passes them in API.
     * @param changes
     */
    ngOnChanges(changes) {
        const { clusterer } = this;
        if (clusterer) {
            const { options } = changes;
            if (options) {
                clusterer.options.set(options.currentValue);
            }
        }
    }
    ngAfterContentInit() {
        this.yaMapComponent.map$
            .pipe(filter(Boolean), take(1), takeUntil(this.destroy$))
            .subscribe((map) => {
            const clusterer = this.createClusterer();
            this.clusterer = clusterer;
            map.geoObjects.add(clusterer);
            this.eventManager.setTarget(clusterer);
            this.watchForContentChanges(clusterer);
            this.ngZone.run(() => this.ready.emit({ ymaps, target: clusterer }));
        });
    }
    ngOnDestroy() {
        this.eventManager.destroy();
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * Creates Clusterer.
     */
    createClusterer() {
        return new ymaps.Clusterer(this.options);
    }
    watchForContentChanges(clusterer) {
        // Adds new Placemarks to the clusterer on changes.
        const currentPlacemarks = new Set();
        this.getInternalPlacemarks(this.placemarks.toArray()).forEach((placemark) => {
            currentPlacemarks.add(placemark);
            clusterer.add(placemark);
        });
        this.placemarks.changes
            .pipe(takeUntil(this.destroy$))
            .subscribe((placemarkDirectives) => {
            const newPlacemarks = new Set(this.getInternalPlacemarks(placemarkDirectives));
            const difference = this.getDifference(newPlacemarks, currentPlacemarks);
            clusterer.add(difference.toAdd);
            clusterer.remove(difference.toRemove);
        });
        // Adds new GeoObjects to the clusterer on changes.
        const currentGeoObjects = new Set();
        this.getInternalGeoObjects(this.geoObjects.toArray()).forEach((geoObject) => {
            currentGeoObjects.add(geoObject);
            clusterer.add(geoObject);
        });
        this.geoObjects.changes
            .pipe(takeUntil(this.destroy$))
            .subscribe((geoObjectDirectives) => {
            const newGeoObjects = new Set(this.getInternalGeoObjects(geoObjectDirectives));
            const difference = this.getDifference(newGeoObjects, currentGeoObjects);
            clusterer.add(difference.toAdd);
            clusterer.remove(difference.toRemove);
        });
    }
    /**
     * Determines what should be added/removed in current set to equal new set
     *
     * @param newSet
     * @param currentSet
     */
    getDifference(newSet, currentSet) {
        const toAdd = [];
        const toRemove = [];
        newSet.forEach((component) => {
            if (!currentSet.has(component)) {
                toAdd.push(component);
                currentSet.add(component);
            }
        });
        currentSet.forEach((component) => {
            if (!newSet.has(component)) {
                toRemove.push(component);
                currentSet.delete(component);
            }
        });
        return {
            toAdd,
            toRemove,
        };
    }
    getInternalPlacemarks(placemarks) {
        return placemarks
            .filter((component) => !!component.placemark)
            .map((component) => component.placemark);
    }
    getInternalGeoObjects(geoObjects) {
        return geoObjects
            .filter((component) => !!component.geoObject)
            .map((component) => component.geoObject);
    }
}
YaClustererComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: YaClustererComponent, deps: [{ token: i0.NgZone }, { token: i1.YaMapComponent }], target: i0.ɵɵFactoryTarget.Component });
YaClustererComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.5", type: YaClustererComponent, selector: "ya-clusterer", inputs: { options: "options" }, outputs: { ready: "ready", hintclose: "hintclose", hintopen: "hintopen", mapchange: "mapchange", optionschange: "optionschange", parentchange: "parentchange" }, queries: [{ propertyName: "placemarks", predicate: YaPlacemarkDirective }, { propertyName: "geoObjects", predicate: YaGeoObjectDirective }], usesOnChanges: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: YaClustererComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ya-clusterer',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.YaMapComponent }]; }, propDecorators: { placemarks: [{
                type: ContentChildren,
                args: [YaPlacemarkDirective]
            }], geoObjects: [{
                type: ContentChildren,
                args: [YaGeoObjectDirective]
            }], options: [{
                type: Input
            }], ready: [{
                type: Output
            }], hintclose: [{
                type: Output
            }], hintopen: [{
                type: Output
            }], mapchange: [{
                type: Output
            }], optionschange: [{
                type: Output
            }], parentchange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,