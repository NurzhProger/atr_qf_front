import { Directive, EventEmitter, Input, Output, } from '@angular/core';
import { Subject, takeUntil } from 'rxjs';
import { filter, take } from 'rxjs/operators';
import { EventManager } from '../../event-manager/event-manager';
import * as i0 from "@angular/core";
import * as i1 from "../ya-map/ya-map.component";
/**
 * The `ya-object-manager` component wraps `ymaps.ObjectManager` class from the Yandex.Maps API.
 * You can configure it via the component's inputs.
 * Events can be bound using the outputs of the component.
 *
 * <example-url>https://stackblitz.com/edit/object-manager?embed=1&view=preview</example-url>
 *
 * @example
 * ```html
 * <ya-map [center]="[55.761952, 37.620739]">
 *   <ya-object-manager
 *     [options]="{ clusterize: true }"
 *     (ready)="onReady($event)"
 *   ></ya-object-manager>
 * </ya-map>
 * ```
 */
export class YaObjectManagerDirective {
    constructor(ngZone, yaMapComponent) {
        this.ngZone = ngZone;
        this.yaMapComponent = yaMapComponent;
        this.destroy$ = new Subject();
        this.eventManager = new EventManager(this.ngZone);
        /**
         * ObjectManager instance is added to a Map.
         */
        this.ready = new EventEmitter();
        /**
         * Single left-click on the object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-click}
         */
        this.yaclick = this.eventManager.getLazyEmitter('click');
        /**
         * Calls the element's context menu.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-contextmenu}
         */
        this.yacontextmenu = this.eventManager.getLazyEmitter('contextmenu');
        /**
         * Double left-click on the object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-dblclick}
         */
        this.yadblclick = this.eventManager.getLazyEmitter('dblclick');
        /**
         * Change to the geo object geometry.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IGeoObject.html#event_detail__event-geometrychange}
         */
        this.geometrychange = this.eventManager.getLazyEmitter('geometrychange');
        /**
         * Map reference changed.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IParentOnMap.html#event_detail__event-mapchange}
         */
        this.mapchange = this.eventManager.getLazyEmitter('mapchange');
        /**
         * Pressing the mouse button over the object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mousedown}
         */
        this.yamousedown = this.eventManager.getLazyEmitter('mousedown');
        /**
         * Pointing the cursor at the object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mouseenter}
         */
        this.yamouseenter = this.eventManager.getLazyEmitter('mouseenter');
        /**
         * Moving the cursor off of the object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mouseleave}
         */
        this.yamouseleave = this.eventManager.getLazyEmitter('mouseleave');
        /**
         * Moving the cursor over the object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mousemove}
         */
        this.yamousemove = this.eventManager.getLazyEmitter('mousemove');
        /**
         * Letting go of the mouse button over an object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mouseup}
         */
        this.yamouseup = this.eventManager.getLazyEmitter('mouseup');
        /**
         * End of multitouch.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-multitouchend}
         */
        this.multitouchend = this.eventManager.getLazyEmitter('multitouchend');
        /**
         * Repeating event during multitouch.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-multitouchmove}
         */
        this.multitouchmove = this.eventManager.getLazyEmitter('multitouchmove');
        /**
         * Start of multitouch.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-multitouchstart}
         */
        this.multitouchstart = this.eventManager.getLazyEmitter('multitouchstart');
        /**
         * Change to the object options.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/ICustomizable.html#event_detail__event-optionschange}
         */
        this.optionschange = this.eventManager.getLazyEmitter('optionschange');
        /**
         * Change to the geo object overlay.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IGeoObject.html#event_detail__event-overlaychange}
         */
        this.overlaychange = this.eventManager.getLazyEmitter('overlaychange');
        /**
         * The parent object reference changed.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IChild.html#event_detail__event-parentchange}
         */
        this.parentchange = this.eventManager.getLazyEmitter('parentchange');
        /**
         * Change to the geo object data.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IGeoObject.html#event_detail__event-propertieschange}
         */
        this.propertieschange = this.eventManager.getLazyEmitter('propertieschange');
        /**
         * Mouse wheel scrolling.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-wheel}
         */
        this.yawheel = this.eventManager.getLazyEmitter('wheel');
    }
    /**
     * Handles input changes and passes them in API.
     * @param changes
     */
    ngOnChanges(changes) {
        const { objectManager } = this;
        if (objectManager) {
            const { options } = changes;
            if (options) {
                objectManager.options.set(options.currentValue);
            }
        }
    }
    ngOnInit() {
        this.yaMapComponent.map$
            .pipe(filter(Boolean), take(1), takeUntil(this.destroy$))
            .subscribe((map) => {
            const objectManager = this.createObjectManager();
            this.objectManager = objectManager;
            map.geoObjects.add(objectManager);
            this.eventManager.setTarget(objectManager);
            this.ngZone.run(() => this.ready.emit({ ymaps, target: objectManager }));
        });
    }
    ngOnDestroy() {
        if (this.objectManager) {
            this.yaMapComponent?.map$.value?.geoObjects.remove(this.objectManager);
            this.eventManager.destroy();
        }
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * Creates ObjectManager.
     */
    createObjectManager() {
        return new ymaps.ObjectManager(this.options);
    }
}
YaObjectManagerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: YaObjectManagerDirective, deps: [{ token: i0.NgZone }, { token: i1.YaMapComponent }], target: i0.ɵɵFactoryTarget.Directive });
YaObjectManagerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.5", type: YaObjectManagerDirective, selector: "ya-object-manager", inputs: { options: "options" }, outputs: { ready: "ready", yaclick: "yaclick", yacontextmenu: "yacontextmenu", yadblclick: "yadblclick", geometrychange: "geometrychange", mapchange: "mapchange", yamousedown: "yamousedown", yamouseenter: "yamouseenter", yamouseleave: "yamouseleave", yamousemove: "yamousemove", yamouseup: "yamouseup", multitouchend: "multitouchend", multitouchmove: "multitouchmove", multitouchstart: "multitouchstart", optionschange: "optionschange", overlaychange: "overlaychange", parentchange: "parentchange", propertieschange: "propertieschange", yawheel: "yawheel" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: YaObjectManagerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ya-object-manager',
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.YaMapComponent }]; }, propDecorators: { options: [{
                type: Input
            }], ready: [{
                type: Output
            }], yaclick: [{
                type: Output
            }], yacontextmenu: [{
                type: Output
            }], yadblclick: [{
                type: Output
            }], geometrychange: [{
                type: Output
            }], mapchange: [{
                type: Output
            }], yamousedown: [{
                type: Output
            }], yamouseenter: [{
                type: Output
            }], yamouseleave: [{
                type: Output
            }], yamousemove: [{
                type: Output
            }], yamouseup: [{
                type: Output
            }], multitouchend: [{
                type: Output
            }], multitouchmove: [{
                type: Output
            }], multitouchstart: [{
                type: Output
            }], optionschange: [{
                type: Output
            }], overlaychange: [{
                type: Output
            }], parentchange: [{
                type: Output
            }], propertieschange: [{
                type: Output
            }], yawheel: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,