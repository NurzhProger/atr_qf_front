import { Directive, EventEmitter, Input, Output, } from '@angular/core';
import { Subject, takeUntil } from 'rxjs';
import { filter, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../ya-map/ya-map.component";
/**
 * The `ya-control` component wraps `ymaps.control[YaControlType]` classes from the Yandex.Maps API.
 * You can configure `ymaps.control[YaControlType]` via the component's inputs.
 * API Events can be bound only manually. You can use `ready` event to get an instance.
 *
 * <example-url>https://stackblitz.com/edit/searchcontrol?embed=1&view=preview</example-url>
 *
 * @example
 * ```html
 * <ya-map [center]="[55.761952, 37.620739]">
 *   <ya-control
 *     type="RoutePanel"
 *     [parameters]="{ options: { float: 'right' } }"
 *   ></ya-control>
 * </ya-map>
 * ```
 */
export class YaControlDirective {
    constructor(ngZone, yaMapComponent) {
        this.ngZone = ngZone;
        this.yaMapComponent = yaMapComponent;
        this.destroy$ = new Subject();
        /**
         * Control instance is added to a Map.
         */
        this.ready = new EventEmitter();
    }
    ngOnChanges() {
        if (this.control) {
            console.warn('Control does not support dynamic configuration. You can config it manually using ymaps or recreate the component with new configuration');
        }
    }
    ngOnInit() {
        this.yaMapComponent.map$
            .pipe(filter(Boolean), take(1), takeUntil(this.destroy$))
            .subscribe((map) => {
            const control = new ymaps.control[this.type](this.parameters);
            this.control = control;
            // RoutePanel ignores state in parameters. API bug
            if (control instanceof ymaps.control.RoutePanel &&
                this.parameters &&
                this.parameters.state) {
                control.routePanel.state.set({ ...this.parameters.state });
            }
            map.controls.add(control);
            this.ngZone.run(() => this.ready.emit({ ymaps, target: control }));
        });
    }
    ngOnDestroy() {
        if (this.control) {
            this.yaMapComponent?.map$.value?.controls.remove(this.control);
        }
        this.destroy$.next();
        this.destroy$.complete();
    }
}
YaControlDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: YaControlDirective, deps: [{ token: i0.NgZone }, { token: i1.YaMapComponent }], target: i0.ɵɵFactoryTarget.Directive });
YaControlDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.5", type: YaControlDirective, selector: "ya-control", inputs: { type: "type", parameters: "parameters" }, outputs: { ready: "ready" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: YaControlDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ya-control',
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.YaMapComponent }]; }, propDecorators: { type: [{
                type: Input
            }], parameters: [{
                type: Input
            }], ready: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWEtY29udHJvbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyOC15YW5kZXgtbWFwcy9zcmMvbGliL2NvbXBvbmVudHMveWEtY29udHJvbC95YS1jb250cm9sLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBS0wsTUFBTSxHQUNQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQXVCOUM7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFJSCxNQUFNLE9BQU8sa0JBQWtCO0lBb0I3QixZQUE2QixNQUFjLEVBQW1CLGNBQThCO1FBQS9ELFdBQU0sR0FBTixNQUFNLENBQVE7UUFBbUIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBbkIzRSxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQWNoRDs7V0FFRztRQUNPLFVBQUssR0FBb0MsSUFBSSxZQUFZLEVBQXFCLENBQUM7SUFFTSxDQUFDO0lBRWhHLFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsT0FBTyxDQUFDLElBQUksQ0FDVix5SUFBeUksQ0FDMUksQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUk7YUFDckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUN4RCxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNqQixNQUFNLE9BQU8sR0FBRyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUM5RCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztZQUV2QixrREFBa0Q7WUFDbEQsSUFDRSxPQUFPLFlBQVksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVO2dCQUMzQyxJQUFJLENBQUMsVUFBVTtnQkFDZixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFDckI7Z0JBQ0EsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7YUFDNUQ7WUFFRCxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2hFO1FBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNCLENBQUM7OytHQTFEVSxrQkFBa0I7bUdBQWxCLGtCQUFrQjsyRkFBbEIsa0JBQWtCO2tCQUg5QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxZQUFZO2lCQUN2QjswSEFTVSxJQUFJO3NCQUFaLEtBQUs7Z0JBS0csVUFBVTtzQkFBbEIsS0FBSztnQkFLSSxLQUFLO3NCQUFkLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIERpcmVjdGl2ZSxcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgSW5wdXQsXHJcbiAgTmdab25lLFxyXG4gIE9uQ2hhbmdlcyxcclxuICBPbkRlc3Ryb3ksXHJcbiAgT25Jbml0LFxyXG4gIE91dHB1dCxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3ViamVjdCwgdGFrZVVudGlsIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZpbHRlciwgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IFlhUmVhZHlFdmVudCB9IGZyb20gJy4uLy4uL21vZGVscy95YS1yZWFkeS1ldmVudCc7XHJcbmltcG9ydCB7IFlhTWFwQ29tcG9uZW50IH0gZnJvbSAnLi4veWEtbWFwL3lhLW1hcC5jb21wb25lbnQnO1xyXG5cclxuLyoqXHJcbiAqIENvbnRyb2wgdHlwZXMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBZYUNvbnRyb2xUeXBlID1cclxuICB8ICdCdXR0b24nXHJcbiAgfCAnRnVsbHNjcmVlbkNvbnRyb2wnXHJcbiAgfCAnR2VvbG9jYXRpb25Db250cm9sJ1xyXG4gIHwgJ0xpc3RCb3gnXHJcbiAgfCAnTGlzdEJveEl0ZW0nXHJcbiAgfCAnUm91dGVCdXR0b24nXHJcbiAgfCAnUm91dGVFZGl0b3InXHJcbiAgfCAnUm91dGVQYW5lbCdcclxuICB8ICdSdWxlckNvbnRyb2wnXHJcbiAgfCAnU2VhcmNoQ29udHJvbCdcclxuICB8ICdUcmFmZmljQ29udHJvbCdcclxuICB8ICdUeXBlU2VsZWN0b3InXHJcbiAgfCAnWm9vbUNvbnRyb2wnO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBgeWEtY29udHJvbGAgY29tcG9uZW50IHdyYXBzIGB5bWFwcy5jb250cm9sW1lhQ29udHJvbFR5cGVdYCBjbGFzc2VzIGZyb20gdGhlIFlhbmRleC5NYXBzIEFQSS5cclxuICogWW91IGNhbiBjb25maWd1cmUgYHltYXBzLmNvbnRyb2xbWWFDb250cm9sVHlwZV1gIHZpYSB0aGUgY29tcG9uZW50J3MgaW5wdXRzLlxyXG4gKiBBUEkgRXZlbnRzIGNhbiBiZSBib3VuZCBvbmx5IG1hbnVhbGx5LiBZb3UgY2FuIHVzZSBgcmVhZHlgIGV2ZW50IHRvIGdldCBhbiBpbnN0YW5jZS5cclxuICpcclxuICogPGV4YW1wbGUtdXJsPmh0dHBzOi8vc3RhY2tibGl0ei5jb20vZWRpdC9zZWFyY2hjb250cm9sP2VtYmVkPTEmdmlldz1wcmV2aWV3PC9leGFtcGxlLXVybD5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgaHRtbFxyXG4gKiA8eWEtbWFwIFtjZW50ZXJdPVwiWzU1Ljc2MTk1MiwgMzcuNjIwNzM5XVwiPlxyXG4gKiAgIDx5YS1jb250cm9sXHJcbiAqICAgICB0eXBlPVwiUm91dGVQYW5lbFwiXHJcbiAqICAgICBbcGFyYW1ldGVyc109XCJ7IG9wdGlvbnM6IHsgZmxvYXQ6ICdyaWdodCcgfSB9XCJcclxuICogICA+PC95YS1jb250cm9sPlxyXG4gKiA8L3lhLW1hcD5cclxuICogYGBgXHJcbiAqL1xyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ3lhLWNvbnRyb2wnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgWWFDb250cm9sRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XHJcblxyXG4gIHByaXZhdGUgY29udHJvbD86IGFueTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ29udHJvbCB0eXBlLlxyXG4gICAqL1xyXG4gIEBJbnB1dCgpIHR5cGU6IFlhQ29udHJvbFR5cGU7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnRyb2wgcGFyYW1ldGVycy5cclxuICAgKi9cclxuICBASW5wdXQoKSBwYXJhbWV0ZXJzOiBhbnk7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnRyb2wgaW5zdGFuY2UgaXMgYWRkZWQgdG8gYSBNYXAuXHJcbiAgICovXHJcbiAgQE91dHB1dCgpIHJlYWR5OiBFdmVudEVtaXR0ZXI8WWFSZWFkeUV2ZW50PGFueT4+ID0gbmV3IEV2ZW50RW1pdHRlcjxZYVJlYWR5RXZlbnQ8YW55Pj4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBuZ1pvbmU6IE5nWm9uZSwgcHJpdmF0ZSByZWFkb25seSB5YU1hcENvbXBvbmVudDogWWFNYXBDb21wb25lbnQpIHt9XHJcblxyXG4gIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuY29udHJvbCkge1xyXG4gICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgJ0NvbnRyb2wgZG9lcyBub3Qgc3VwcG9ydCBkeW5hbWljIGNvbmZpZ3VyYXRpb24uIFlvdSBjYW4gY29uZmlnIGl0IG1hbnVhbGx5IHVzaW5nIHltYXBzIG9yIHJlY3JlYXRlIHRoZSBjb21wb25lbnQgd2l0aCBuZXcgY29uZmlndXJhdGlvbicsXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMueWFNYXBDb21wb25lbnQubWFwJFxyXG4gICAgICAucGlwZShmaWx0ZXIoQm9vbGVhbiksIHRha2UoMSksIHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSlcclxuICAgICAgLnN1YnNjcmliZSgobWFwKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY29udHJvbCA9IG5ldyB5bWFwcy5jb250cm9sW3RoaXMudHlwZV0odGhpcy5wYXJhbWV0ZXJzKTtcclxuICAgICAgICB0aGlzLmNvbnRyb2wgPSBjb250cm9sO1xyXG5cclxuICAgICAgICAvLyBSb3V0ZVBhbmVsIGlnbm9yZXMgc3RhdGUgaW4gcGFyYW1ldGVycy4gQVBJIGJ1Z1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIGNvbnRyb2wgaW5zdGFuY2VvZiB5bWFwcy5jb250cm9sLlJvdXRlUGFuZWwgJiZcclxuICAgICAgICAgIHRoaXMucGFyYW1ldGVycyAmJlxyXG4gICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnN0YXRlXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBjb250cm9sLnJvdXRlUGFuZWwuc3RhdGUuc2V0KHsgLi4udGhpcy5wYXJhbWV0ZXJzLnN0YXRlIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbWFwLmNvbnRyb2xzLmFkZChjb250cm9sKTtcclxuICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4gdGhpcy5yZWFkeS5lbWl0KHsgeW1hcHMsIHRhcmdldDogY29udHJvbCB9KSk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5jb250cm9sKSB7XHJcbiAgICAgIHRoaXMueWFNYXBDb21wb25lbnQ/Lm1hcCQudmFsdWU/LmNvbnRyb2xzLnJlbW92ZSh0aGlzLmNvbnRyb2wpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZGVzdHJveSQubmV4dCgpO1xyXG4gICAgdGhpcy5kZXN0cm95JC5jb21wbGV0ZSgpO1xyXG4gIH1cclxufVxyXG4iXX0=