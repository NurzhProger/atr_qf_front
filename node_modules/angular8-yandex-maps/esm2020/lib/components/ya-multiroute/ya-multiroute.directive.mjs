import { Directive, EventEmitter, Input, Output, } from '@angular/core';
import { Subject, takeUntil } from 'rxjs';
import { filter, take } from 'rxjs/operators';
import { EventManager } from '../../event-manager/event-manager';
import * as i0 from "@angular/core";
import * as i1 from "../ya-map/ya-map.component";
/**
 * The `ya-multiroute` component wraps `ymaps.multiRouter.MultiRoute` class from the Yandex.Maps API.
 * You can configure it via the component's inputs.
 * Events can be bound using the outputs of the component.
 *
 * @example
 * ```html
 * <ya-map [center]="[55.761952, 37.620739]">
 *   <ya-multiroute
 *     [referencePoints]="[[55.751952, 37.600739], 'Красные ворота, Москва']"
 *     [models]="{ params: { routingMode: 'pedestrian' } }"
 *   ></ya-multiroute>
 * </ya-map>
 * ```
 */
export class YaMultirouteDirective {
    constructor(ngZone, yaMapComponent) {
        this.ngZone = ngZone;
        this.yaMapComponent = yaMapComponent;
        this.destroy$ = new Subject();
        this.eventManager = new EventManager(this.ngZone);
        /**
         * Multi-route instance is added to a Map.
         */
        this.ready = new EventEmitter();
        /**
         * Change to the active route.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/multiRouter.MultiRoute.html#event_detail__event-activeroutechange}
         */
        this.activeroutechange = this.eventManager.getLazyEmitter('activeroutechange');
        /**
         * Closing the balloon.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/multiRouter.MultiRoute.html#event_detail__event-balloonclose}
         */
        this.balloonclose = this.eventManager.getLazyEmitter('balloonclose');
        /**
         * Opening the balloon.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/multiRouter.MultiRoute.html#event_detail__event-balloonopen}
         */
        this.balloonopen = this.eventManager.getLazyEmitter('balloonopen');
        /**
         * The event occurs at the time of setting the map center and its zoom level for optimal display of the multi-route.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/multiRouter.MultiRoute.html#event_detail__event-boundsautoapply}
         */
        this.boundsautoapply = this.eventManager.getLazyEmitter('boundsautoapply');
        /**
         * Changing coordinates of the geographical area covering the multi-route.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/multiRouter.MultiRoute.html#event_detail__event-boundschange}
         */
        this.boundschange = this.eventManager.getLazyEmitter('boundschange');
        /**
         * Single left-click on the object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-click}
         */
        this.yaclick = this.eventManager.getLazyEmitter('click');
        /**
         * Calls the element's context menu.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-contextmenu}
         */
        this.yacontextmenu = this.eventManager.getLazyEmitter('contextmenu');
        /**
         * Double left-click on the object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-dblclick}
         */
        this.yadblclick = this.eventManager.getLazyEmitter('dblclick');
        /**
         * Change to the geo object geometry.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IGeoObject.html#event_detail__event-geometrychange}
         */
        this.geometrychange = this.eventManager.getLazyEmitter('geometrychange');
        /**
         * Map reference changed.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IParentOnMap.html#event_detail__event-mapchange}
         */
        this.mapchange = this.eventManager.getLazyEmitter('mapchange');
        /**
         * Pressing the mouse button over the object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mousedown}
         */
        this.yamousedown = this.eventManager.getLazyEmitter('mousedown');
        /**
         * Pointing the cursor at the object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mouseenter}
         */
        this.yamouseenter = this.eventManager.getLazyEmitter('mouseenter');
        /**
         * Moving the cursor off of the object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mouseleave}
         */
        this.yamouseleave = this.eventManager.getLazyEmitter('mouseleave');
        /**
         * Moving the cursor over the object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mousemove}
         */
        this.yamousemove = this.eventManager.getLazyEmitter('mousemove');
        /**
         * Letting go of the mouse button over an object.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-mouseup}
         */
        this.yamouseup = this.eventManager.getLazyEmitter('mouseup');
        /**
         * End of multitouch.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-multitouchend}
         */
        this.multitouchend = this.eventManager.getLazyEmitter('multitouchend');
        /**
         * Repeating event during multitouch.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-multitouchmove}
         */
        this.multitouchmove = this.eventManager.getLazyEmitter('multitouchmove');
        /**
         * Start of multitouch.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-multitouchstart}
         */
        this.multitouchstart = this.eventManager.getLazyEmitter('multitouchstart');
        /**
         * Change to the object options.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/ICustomizable.html#event_detail__event-optionschange}
         */
        this.optionschange = this.eventManager.getLazyEmitter('optionschange');
        /**
         * Change to the geo object overlay.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IGeoObject.html#event_detail__event-overlaychange}
         */
        this.overlaychange = this.eventManager.getLazyEmitter('overlaychange');
        /**
         * The parent object reference changed.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IChild.html#event_detail__event-parentchange}
         */
        this.parentchange = this.eventManager.getLazyEmitter('parentchange');
        /**
         * Changing pixel coordinates of the area covering the multi-route.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/multiRouter.MultiRoute.html#event_detail__event-pixelboundschange}
         */
        this.pixelboundschange = this.eventManager.getLazyEmitter('pixelboundschange');
        /**
         * Change to the geo object data.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IGeoObject.html#event_detail__event-propertieschange}
         */
        this.propertieschange = this.eventManager.getLazyEmitter('propertieschange');
        /**
         * Updating the multi-route.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/multiRouter.MultiRoute.html#event_detail__event-update}
         */
        this.update = this.eventManager.getLazyEmitter('update');
        /**
         * Mouse wheel scrolling.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/IDomEventEmitter.html#event_detail__event-wheel}
         */
        this.yawheel = this.eventManager.getLazyEmitter('wheel');
    }
    /**
     * Handles input changes and passes them in API.
     * @param changes
     */
    ngOnChanges(changes) {
        const { multiroute } = this;
        if (multiroute) {
            const { referencePoints, model, options } = changes;
            if (model) {
                this.setModel(model.currentValue, multiroute);
            }
            if (referencePoints) {
                multiroute.model.setReferencePoints(referencePoints.currentValue);
            }
            if (options) {
                multiroute.options.set(options.currentValue);
            }
        }
    }
    ngOnInit() {
        this.yaMapComponent.map$
            .pipe(filter(Boolean), take(1), takeUntil(this.destroy$))
            .subscribe((map) => {
            const multiroute = this.createMultiroute();
            this.multiroute = multiroute;
            map.geoObjects.add(multiroute);
            this.eventManager.setTarget(multiroute);
            this.ngZone.run(() => this.ready.emit({ ymaps, target: multiroute }));
        });
    }
    ngOnDestroy() {
        if (this.multiroute) {
            this.yaMapComponent?.map$.value?.geoObjects.remove(this.multiroute);
            this.eventManager.destroy();
        }
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * Destructs state and passes them in API.
     * @param model
     * @param multiroute
     */
    setModel(model, multiroute) {
        const { referencePoints, params } = model;
        if (referencePoints) {
            multiroute.model.setReferencePoints(referencePoints);
        }
        if (params) {
            multiroute.model.setParams(params);
        }
    }
    /**
     * Creates Multiroute.
     */
    createMultiroute() {
        return new ymaps.multiRouter.MultiRoute(this.combineModel(), this.options);
    }
    /**
     * Combines the models and reference points into single object
     */
    combineModel() {
        const model = (this.model || {});
        return {
            ...model,
            referencePoints: this.referencePoints || model.referencePoints,
        };
    }
}
YaMultirouteDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: YaMultirouteDirective, deps: [{ token: i0.NgZone }, { token: i1.YaMapComponent }], target: i0.ɵɵFactoryTarget.Directive });
YaMultirouteDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.5", type: YaMultirouteDirective, selector: "ya-multiroute", inputs: { referencePoints: "referencePoints", model: "model", options: "options" }, outputs: { ready: "ready", activeroutechange: "activeroutechange", balloonclose: "balloonclose", balloonopen: "balloonopen", boundsautoapply: "boundsautoapply", boundschange: "boundschange", yaclick: "yaclick", yacontextmenu: "yacontextmenu", yadblclick: "yadblclick", geometrychange: "geometrychange", mapchange: "mapchange", yamousedown: "yamousedown", yamouseenter: "yamouseenter", yamouseleave: "yamouseleave", yamousemove: "yamousemove", yamouseup: "yamouseup", multitouchend: "multitouchend", multitouchmove: "multitouchmove", multitouchstart: "multitouchstart", optionschange: "optionschange", overlaychange: "overlaychange", parentchange: "parentchange", pixelboundschange: "pixelboundschange", propertieschange: "propertieschange", update: "update", yawheel: "yawheel" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: YaMultirouteDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ya-multiroute',
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.YaMapComponent }]; }, propDecorators: { referencePoints: [{
                type: Input
            }], model: [{
                type: Input
            }], options: [{
                type: Input
            }], ready: [{
                type: Output
            }], activeroutechange: [{
                type: Output
            }], balloonclose: [{
                type: Output
            }], balloonopen: [{
                type: Output
            }], boundsautoapply: [{
                type: Output
            }], boundschange: [{
                type: Output
            }], yaclick: [{
                type: Output
            }], yacontextmenu: [{
                type: Output
            }], yadblclick: [{
                type: Output
            }], geometrychange: [{
                type: Output
            }], mapchange: [{
                type: Output
            }], yamousedown: [{
                type: Output
            }], yamouseenter: [{
                type: Output
            }], yamouseleave: [{
                type: Output
            }], yamousemove: [{
                type: Output
            }], yamouseup: [{
                type: Output
            }], multitouchend: [{
                type: Output
            }], multitouchmove: [{
                type: Output
            }], multitouchstart: [{
                type: Output
            }], optionschange: [{
                type: Output
            }], overlaychange: [{
                type: Output
            }], parentchange: [{
                type: Output
            }], pixelboundschange: [{
                type: Output
            }], propertieschange: [{
                type: Output
            }], update: [{
                type: Output
            }], yawheel: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,