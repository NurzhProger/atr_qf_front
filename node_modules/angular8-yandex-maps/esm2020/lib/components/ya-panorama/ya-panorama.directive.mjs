import { Directive, EventEmitter, Input, Output, } from '@angular/core';
import { from, Subject, takeUntil } from 'rxjs';
import { filter, map, switchMap, take } from 'rxjs/operators';
import { EventManager } from '../../event-manager/event-manager';
import * as i0 from "@angular/core";
import * as i1 from "../ya-map/ya-map.component";
/**
 * The `ya-panorama` component wraps `ymaps.panorama.Player` class from the Yandex.Maps API.
 * You can configure it via the component's inputs.
 * Events can be bound using the outputs of the component.
 *
 * @example
 * ```html
 * <ya-map>
 *   <ya-panorama [point]="[59.938557, 30.316198]" layer="yandex#airPanorama"></ya-panorama>
 * </ya-map>
 * ```
 */
export class YaPanoramaDirective {
    constructor(ngZone, yaMapComponent) {
        this.ngZone = ngZone;
        this.yaMapComponent = yaMapComponent;
        this.destroy$ = new Subject();
        this.eventManager = new EventManager(this.ngZone);
        /**
         * Panorama instance is created.
         */
        this.ready = new EventEmitter();
        /**
         * The player was closed by the user or destroyed using the panorama.Player.destroy method.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/panorama.Player.html#event_detail__event-destroy}
         */
        this.destroy = this.eventManager.getLazyEmitter('destroy');
        /**
         * The view direction changed.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/panorama.Player.html#event_detail__event-directionchange}
         */
        this.directionchange = this.eventManager.getLazyEmitter('directionchange');
        /**
         * An error occurred during operation of the player. The user will be shown the appropriate screen.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/panorama.Player.html#event_detail__event-error}
         */
        this.yaerror = this.eventManager.getLazyEmitter('error');
        /**
         * The panorama player switched to full-screen mode.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/panorama.Player.html#event_detail__event-fullscreenenter}
         */
        this.fullscreenenter = this.eventManager.getLazyEmitter('fullscreenenter');
        /**
         * The panorama player exited full-screen mode.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/panorama.Player.html#event_detail__event-fullscreenexit}
         */
        this.fullscreenexit = this.eventManager.getLazyEmitter('fullscreenexit');
        /**
         * The user clicked on an expanded marker.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/panorama.Player.html#event_detail__event-markercollapse}
         */
        this.markercollapse = this.eventManager.getLazyEmitter('markercollapse');
        /**
         * The user clicked on a collapsed marker.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/panorama.Player.html#event_detail__event-markerexpand}
         */
        this.markerexpand = this.eventManager.getLazyEmitter('markerexpand');
        /**
         * The user's cursor hovered over a marker.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/panorama.Player.html#event_detail__event-markermouseenter}
         */
        this.markermouseenter = this.eventManager.getLazyEmitter('markermouseenter');
        /**
         * The user's cursor left a marker.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/panorama.Player.html#event_detail__event-markermouseleave}
         */
        this.markermouseleave = this.eventManager.getLazyEmitter('markermouseleave');
        /**
         * The open panorama changed.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/panorama.Player.html#event_detail__event-panoramachange}
         */
        this.panoramachange = this.eventManager.getLazyEmitter('panoramachange');
        /**
         * The size of the viewport has been changed.
         * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/panorama.Player.html#event_detail__event-spanchange}
         */
        this.spanchange = this.eventManager.getLazyEmitter('spanchange');
    }
    /**
     * Handles input changes and passes them in API.
     * @param changes
     */
    ngOnChanges(changes) {
        const { player } = this;
        if (player) {
            const { point, layer, options } = changes;
            /**
             * player.moveTo resets values to default if any of them isn't passed.
             * That's why we use value from currentValue OR previous value from input.
             * With that logic it's possible to pass only point, layer or options.
             */
            if (point || layer) {
                const combinedPoint = point?.currentValue || this.point;
                const combinedLayer = layer?.currentValue || this.layer;
                player.moveTo(combinedPoint, { layer: combinedLayer });
            }
            if (options) {
                this.setOptions(options.currentValue, player);
            }
        }
    }
    ngOnInit() {
        const panorama$ = this.yaMapComponent.map$.pipe(filter(Boolean), switchMap((m) => {
            // Map and panorama use the same container, so need to destroy/remove map
            m.destroy();
            return this.createPanorama();
        }));
        panorama$.pipe(take(1), takeUntil(this.destroy$)).subscribe((panorama) => {
            const { id } = this.yaMapComponent.container.nativeElement;
            const player = new ymaps.panorama.Player(id, panorama, this.options);
            this.player = player;
            this.eventManager.setTarget(player);
            this.ngZone.run(() => this.ready.emit({ ymaps, target: player }));
        });
    }
    ngOnDestroy() {
        this.eventManager.destroy();
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * Destructs state and passes it in API.
     * @param options
     * @param player
     */
    setOptions(options, player) {
        const { autoFitToViewport, controls, direction, hotkeysEnabled, span, scrollZoomBehavior, suppressMapOpenBlock, } = options;
        if (autoFitToViewport ||
            controls ||
            hotkeysEnabled ||
            scrollZoomBehavior ||
            suppressMapOpenBlock) {
            console.warn('Only direction and span can be set after entity init. To set other options, you should recreate a Panorama with new options');
        }
        if (direction) {
            player.setDirection(direction);
        }
        if (span) {
            player.setSpan(span);
        }
    }
    /**
     * Searches for a panorama and returns first
     */
    createPanorama() {
        return from(ymaps.panorama.locate(this.point, { layer: this.layer })).pipe(map((panoramas) => panoramas[0]));
    }
}
YaPanoramaDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: YaPanoramaDirective, deps: [{ token: i0.NgZone }, { token: i1.YaMapComponent }], target: i0.ɵɵFactoryTarget.Directive });
YaPanoramaDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.5", type: YaPanoramaDirective, selector: "ya-panorama", inputs: { point: "point", layer: "layer", options: "options" }, outputs: { ready: "ready", destroy: "destroy", directionchange: "directionchange", yaerror: "yaerror", fullscreenenter: "fullscreenenter", fullscreenexit: "fullscreenexit", markercollapse: "markercollapse", markerexpand: "markerexpand", markermouseenter: "markermouseenter", markermouseleave: "markermouseleave", panoramachange: "panoramachange", spanchange: "spanchange" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: YaPanoramaDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ya-panorama',
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.YaMapComponent }]; }, propDecorators: { point: [{
                type: Input
            }], layer: [{
                type: Input
            }], options: [{
                type: Input
            }], ready: [{
                type: Output
            }], destroy: [{
                type: Output
            }], directionchange: [{
                type: Output
            }], yaerror: [{
                type: Output
            }], fullscreenenter: [{
                type: Output
            }], fullscreenexit: [{
                type: Output
            }], markercollapse: [{
                type: Output
            }], markerexpand: [{
                type: Output
            }], markermouseenter: [{
                type: Output
            }], markermouseleave: [{
                type: Output
            }], panoramachange: [{
                type: Output
            }], spanchange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,