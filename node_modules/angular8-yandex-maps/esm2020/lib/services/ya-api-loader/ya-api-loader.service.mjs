import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, Optional, PLATFORM_ID } from '@angular/core';
import { from, fromEvent, merge, NEVER, throwError } from 'rxjs';
import { map, switchMap, take } from 'rxjs/operators';
import { YA_CONFIG } from '../../tokens/ya-config';
import * as i0 from "@angular/core";
/**
 * The `YaApiLoader` service handles loading of Yandex.Maps API.
 *
 * @example
 * ```ts
 * import { YaApiLoaderService } from 'angular8-yandex-maps';
 *
 * @Component()
 * export class AppComponent {
 *   constructor(private yaApiLoaderService: YaApiLoaderService) {
 *     // Don't forget to unsubscribe
 *     this.yaApiLoaderService.load()
 *       .subscribe(v => console.log(v))
 *   }
 * }
 *```
 *
 * @dynamic
 */
export class YaApiLoaderService {
    constructor(config, document, platformId) {
        this.document = document;
        this.isBrowser = isPlatformBrowser(platformId);
        const defaultConfig = { lang: 'ru_RU' };
        this.config = {
            ...defaultConfig,
            ...config,
        };
    }
    /**
     * Loads Yandex.Maps API.
     */
    load() {
        if (!this.isBrowser) {
            return NEVER;
        }
        if (window.ymaps) {
            return from(ymaps.ready()).pipe(map(() => ymaps));
        }
        if (!this.script) {
            const script = this.document.createElement('script');
            script.type = 'text/javascript';
            script.src = this.getScriptSource(this.config);
            script.id = 'yandexMapsApiScript';
            script.async = true;
            script.defer = true;
            this.script = this.document.body.appendChild(script);
        }
        const load = fromEvent(this.script, 'load').pipe(switchMap(() => from(ymaps.ready())), map(() => ymaps));
        const error = fromEvent(this.script, 'error').pipe(switchMap(throwError));
        return merge(load, error).pipe(take(1));
    }
    /**
     * Returns script source by config.
     * @param config config with parameters that will be added in source
     * @example
     * // returns 'https://api-maps.yandex.ru/2.1/?apikey=658f67a2-fd77-42e9-b99e-2bd48c4ccad4&lang=en_US'
     * getScriptSource({ apikey: '658f67a2-fd77-42e9-b99e-2bd48c4ccad4', lang: 'en_US' })
     */
    getScriptSource(config) {
        const { enterprise, version = '2.1', ...rest } = config;
        const params = this.convertConfigIntoQueryParams(rest);
        return `https://${enterprise ? 'enterprise.' : ''}api-maps.yandex.ru/${version}/?${params}`;
    }
    /**
     * Converts a config into a query string parameters.
     * @param config object for converting
     * @example
     * // returns "lang=ru_RU&apikey=XXX"
     * convertIntoQueryParams({ lang: 'ru_RU', apikey: 'XXX' })
     */
    convertConfigIntoQueryParams(config) {
        return Object.entries(config)
            .map(([key, value]) => `${key}=${value}`)
            .join('&');
    }
}
YaApiLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: YaApiLoaderService, deps: [{ token: YA_CONFIG, optional: true }, { token: DOCUMENT }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Injectable });
YaApiLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: YaApiLoaderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.5", ngImport: i0, type: YaApiLoaderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [YA_CONFIG]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,