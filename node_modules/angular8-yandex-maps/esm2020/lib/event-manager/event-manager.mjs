/**
 * Copied from angular/components/google-maps and updated for Yandex.Maps API.
 * {@link https://github.com/angular/components/blob/master/src/google-maps/map-event-manager.ts}
 */
import { BehaviorSubject, Observable } from 'rxjs';
import { switchMap } from 'rxjs/operators';
/**
 * Manages event on a Yandex.Maps object, ensuring that events are added only when necessary.
 * @internal
 */
export class EventManager {
    constructor(ngZone) {
        this.ngZone = ngZone;
        /**
         * Listeners that were added before the target was set.
         */
        this.pending = [];
        this.listeners = [];
        this.targetStream = new BehaviorSubject(undefined);
    }
    /**
     * Gets an observable that adds an event listener to the map when a consumer subscribes to it.
     * @param name
     */
    getLazyEmitter(name) {
        return this.targetStream.pipe(switchMap((target) => {
            const observable = new Observable((observer) => {
                // If the target hasn't been initialized yet, cache the observer, so it can be added later.
                if (!target) {
                    this.pending.push({ observable, observer });
                    return undefined;
                }
                const callback = (event) => {
                    const e = {
                        event,
                        target,
                        ymaps,
                    };
                    this.ngZone.run(() => observer.next(e));
                };
                const listener = target.events.add(name, callback);
                this.listeners.push({ name, callback, manager: listener });
                // Unsubscribe function
                return () => listener.remove(name, callback);
            });
            return observable;
        }));
    }
    /**
     * Sets the current target that the manager should bind events to.
     * @param target
     */
    setTarget(target) {
        const currentTarget = this.targetStream.value;
        if (target === currentTarget) {
            return;
        }
        // Clear the listeners from the pre-existing target.
        if (currentTarget) {
            this.clearListeners();
            this.pending = [];
        }
        this.targetStream.next(target);
        // Add the listeners that were bound before the map was initialized.
        this.pending.forEach((subscriber) => subscriber.observable.subscribe(subscriber.observer));
        this.pending = [];
    }
    /**
     * Destroys the manager and clears the event listeners.
     */
    destroy() {
        this.clearListeners();
        this.pending = [];
        this.targetStream.complete();
    }
    /**
     * Clears all currently-registered event listeners.
     */
    clearListeners() {
        this.listeners.forEach((listener) => {
            const { name, callback, manager } = listener;
            manager.remove(name, callback);
        });
        this.listeners = [];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXI4LXlhbmRleC1tYXBzL3NyYy9saWIvZXZlbnQtbWFuYWdlci9ldmVudC1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUdILE9BQU8sRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQVczQzs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sWUFBWTtJQWlCdkIsWUFBNkIsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7UUFoQjNDOztXQUVHO1FBQ0ssWUFBTyxHQUdULEVBQUUsQ0FBQztRQUVELGNBQVMsR0FJWCxFQUFFLENBQUM7UUFFUSxpQkFBWSxHQUFHLElBQUksZUFBZSxDQUFpQyxTQUFTLENBQUMsQ0FBQztJQUVqRCxDQUFDO0lBRS9DOzs7T0FHRztJQUNILGNBQWMsQ0FBQyxJQUFZO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQzNCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ25CLE1BQU0sVUFBVSxHQUFHLElBQUksVUFBVSxDQUFVLENBQUMsUUFBUSxFQUFFLEVBQUU7Z0JBQ3RELDJGQUEyRjtnQkFDM0YsSUFBSSxDQUFDLE1BQU0sRUFBRTtvQkFDWCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO29CQUM1QyxPQUFPLFNBQVMsQ0FBQztpQkFDbEI7Z0JBRUQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxLQUFrQixFQUFFLEVBQUU7b0JBQ3RDLE1BQU0sQ0FBQyxHQUFHO3dCQUNSLEtBQUs7d0JBQ0wsTUFBTTt3QkFDTixLQUFLO3FCQUNOLENBQUM7b0JBRUYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMxQyxDQUFDLENBQUM7Z0JBRUYsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2dCQUNuRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7Z0JBRTNELHVCQUF1QjtnQkFDdkIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxRQUFlLENBQUMsQ0FBQztZQUN0RCxDQUFDLENBQUMsQ0FBQztZQUVILE9BQU8sVUFBVSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsU0FBUyxDQUFDLE1BQTBCO1FBQ2xDLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO1FBRTlDLElBQUksTUFBTSxLQUFLLGFBQWEsRUFBRTtZQUM1QixPQUFPO1NBQ1I7UUFFRCxvREFBb0Q7UUFDcEQsSUFBSSxhQUFhLEVBQUU7WUFDakIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1NBQ25CO1FBRUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFL0Isb0VBQW9FO1FBQ3BFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUUzRixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxPQUFPO1FBQ0wsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVEOztPQUVHO0lBQ0ssY0FBYztRQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ2xDLE1BQU0sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxHQUFHLFFBQVEsQ0FBQztZQUM3QyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxRQUFlLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3BpZWQgZnJvbSBhbmd1bGFyL2NvbXBvbmVudHMvZ29vZ2xlLW1hcHMgYW5kIHVwZGF0ZWQgZm9yIFlhbmRleC5NYXBzIEFQSS5cclxuICoge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2NvbXBvbmVudHMvYmxvYi9tYXN0ZXIvc3JjL2dvb2dsZS1tYXBzL21hcC1ldmVudC1tYW5hZ2VyLnRzfVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIFN1YnNjcmliZXIgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuaW1wb3J0IHsgWWFFdmVudCB9IGZyb20gJy4uL21vZGVscy95YS1ldmVudCc7XHJcblxyXG4vKipcclxuICogQGludGVybmFsXHJcbiAqL1xyXG50eXBlIEV2ZW50TWFuYWdlclRhcmdldCA9IHtcclxuICBldmVudHM6IHltYXBzLklFdmVudE1hbmFnZXI7XHJcbn07XHJcblxyXG4vKipcclxuICogTWFuYWdlcyBldmVudCBvbiBhIFlhbmRleC5NYXBzIG9iamVjdCwgZW5zdXJpbmcgdGhhdCBldmVudHMgYXJlIGFkZGVkIG9ubHkgd2hlbiBuZWNlc3NhcnkuXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEV2ZW50TWFuYWdlciB7XHJcbiAgLyoqXHJcbiAgICogTGlzdGVuZXJzIHRoYXQgd2VyZSBhZGRlZCBiZWZvcmUgdGhlIHRhcmdldCB3YXMgc2V0LlxyXG4gICAqL1xyXG4gIHByaXZhdGUgcGVuZGluZzoge1xyXG4gICAgb2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICAgb2JzZXJ2ZXI6IFN1YnNjcmliZXI8YW55PjtcclxuICB9W10gPSBbXTtcclxuXHJcbiAgcHJpdmF0ZSBsaXN0ZW5lcnM6IHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIGNhbGxiYWNrOiAoZTogeW1hcHMuRXZlbnQpID0+IHZvaWQ7XHJcbiAgICBtYW5hZ2VyOiB5bWFwcy5JRXZlbnRNYW5hZ2VyO1xyXG4gIH1bXSA9IFtdO1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IHRhcmdldFN0cmVhbSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8RXZlbnRNYW5hZ2VyVGFyZ2V0IHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IG5nWm9uZTogTmdab25lKSB7fVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIGFuIG9ic2VydmFibGUgdGhhdCBhZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBtYXAgd2hlbiBhIGNvbnN1bWVyIHN1YnNjcmliZXMgdG8gaXQuXHJcbiAgICogQHBhcmFtIG5hbWVcclxuICAgKi9cclxuICBnZXRMYXp5RW1pdHRlcihuYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFlhRXZlbnQ+IHtcclxuICAgIHJldHVybiB0aGlzLnRhcmdldFN0cmVhbS5waXBlKFxyXG4gICAgICBzd2l0Y2hNYXAoKHRhcmdldCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxZYUV2ZW50Pigob2JzZXJ2ZXIpID0+IHtcclxuICAgICAgICAgIC8vIElmIHRoZSB0YXJnZXQgaGFzbid0IGJlZW4gaW5pdGlhbGl6ZWQgeWV0LCBjYWNoZSB0aGUgb2JzZXJ2ZXIsIHNvIGl0IGNhbiBiZSBhZGRlZCBsYXRlci5cclxuICAgICAgICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucGVuZGluZy5wdXNoKHsgb2JzZXJ2YWJsZSwgb2JzZXJ2ZXIgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAoZXZlbnQ6IHltYXBzLkV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB7XHJcbiAgICAgICAgICAgICAgZXZlbnQsXHJcbiAgICAgICAgICAgICAgdGFyZ2V0LFxyXG4gICAgICAgICAgICAgIHltYXBzLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IG9ic2VydmVyLm5leHQoZSkpO1xyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBjb25zdCBsaXN0ZW5lciA9IHRhcmdldC5ldmVudHMuYWRkKG5hbWUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2goeyBuYW1lLCBjYWxsYmFjaywgbWFuYWdlcjogbGlzdGVuZXIgfSk7XHJcblxyXG4gICAgICAgICAgLy8gVW5zdWJzY3JpYmUgZnVuY3Rpb25cclxuICAgICAgICAgIHJldHVybiAoKSA9PiBsaXN0ZW5lci5yZW1vdmUobmFtZSwgY2FsbGJhY2sgYXMgYW55KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XHJcbiAgICAgIH0pLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgdGFyZ2V0IHRoYXQgdGhlIG1hbmFnZXIgc2hvdWxkIGJpbmQgZXZlbnRzIHRvLlxyXG4gICAqIEBwYXJhbSB0YXJnZXRcclxuICAgKi9cclxuICBzZXRUYXJnZXQodGFyZ2V0OiBFdmVudE1hbmFnZXJUYXJnZXQpOiB2b2lkIHtcclxuICAgIGNvbnN0IGN1cnJlbnRUYXJnZXQgPSB0aGlzLnRhcmdldFN0cmVhbS52YWx1ZTtcclxuXHJcbiAgICBpZiAodGFyZ2V0ID09PSBjdXJyZW50VGFyZ2V0KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDbGVhciB0aGUgbGlzdGVuZXJzIGZyb20gdGhlIHByZS1leGlzdGluZyB0YXJnZXQuXHJcbiAgICBpZiAoY3VycmVudFRhcmdldCkge1xyXG4gICAgICB0aGlzLmNsZWFyTGlzdGVuZXJzKCk7XHJcbiAgICAgIHRoaXMucGVuZGluZyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudGFyZ2V0U3RyZWFtLm5leHQodGFyZ2V0KTtcclxuXHJcbiAgICAvLyBBZGQgdGhlIGxpc3RlbmVycyB0aGF0IHdlcmUgYm91bmQgYmVmb3JlIHRoZSBtYXAgd2FzIGluaXRpYWxpemVkLlxyXG4gICAgdGhpcy5wZW5kaW5nLmZvckVhY2goKHN1YnNjcmliZXIpID0+IHN1YnNjcmliZXIub2JzZXJ2YWJsZS5zdWJzY3JpYmUoc3Vic2NyaWJlci5vYnNlcnZlcikpO1xyXG5cclxuICAgIHRoaXMucGVuZGluZyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGVzdHJveXMgdGhlIG1hbmFnZXIgYW5kIGNsZWFycyB0aGUgZXZlbnQgbGlzdGVuZXJzLlxyXG4gICAqL1xyXG4gIGRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICB0aGlzLmNsZWFyTGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLnBlbmRpbmcgPSBbXTtcclxuICAgIHRoaXMudGFyZ2V0U3RyZWFtLmNvbXBsZXRlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbGVhcnMgYWxsIGN1cnJlbnRseS1yZWdpc3RlcmVkIGV2ZW50IGxpc3RlbmVycy5cclxuICAgKi9cclxuICBwcml2YXRlIGNsZWFyTGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIpID0+IHtcclxuICAgICAgY29uc3QgeyBuYW1lLCBjYWxsYmFjaywgbWFuYWdlciB9ID0gbGlzdGVuZXI7XHJcbiAgICAgIG1hbmFnZXIucmVtb3ZlKG5hbWUsIGNhbGxiYWNrIGFzIGFueSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xyXG4gIH1cclxufVxyXG4iXX0=