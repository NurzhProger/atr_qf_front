import { Observable } from 'rxjs';
import { YaConfig } from '../../models/ya-config';
import * as i0 from "@angular/core";
/**
 * The `YaApiLoader` service handles loading of Yandex.Maps API.
 *
 * @example
 * ```ts
 * import { YaApiLoaderService } from 'angular8-yandex-maps';
 *
 * @Component()
 * export class AppComponent {
 *   constructor(private yaApiLoaderService: YaApiLoaderService) {
 *     // Don't forget to unsubscribe
 *     this.yaApiLoaderService.load()
 *       .subscribe(v => console.log(v))
 *   }
 * }
 *```
 *
 * @dynamic
 */
export declare class YaApiLoaderService {
    private readonly document;
    private readonly isBrowser;
    private readonly config;
    private script;
    constructor(config: YaConfig | null, document: Document, platformId: object);
    /**
     * Loads Yandex.Maps API.
     */
    load(): Observable<typeof ymaps>;
    /**
     * Returns script source by config.
     * @param config config with parameters that will be added in source
     * @example
     * // returns 'https://api-maps.yandex.ru/2.1/?apikey=658f67a2-fd77-42e9-b99e-2bd48c4ccad4&lang=en_US'
     * getScriptSource({ apikey: '658f67a2-fd77-42e9-b99e-2bd48c4ccad4', lang: 'en_US' })
     */
    private getScriptSource;
    /**
     * Converts a config into a query string parameters.
     * @param config object for converting
     * @example
     * // returns "lang=ru_RU&apikey=XXX"
     * convertIntoQueryParams({ lang: 'ru_RU', apikey: 'XXX' })
     */
    private convertConfigIntoQueryParams;
    static ɵfac: i0.ɵɵFactoryDeclaration<YaApiLoaderService, [{ optional: true; }, null, null]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<YaApiLoaderService>;
}
